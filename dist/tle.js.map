{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///tle.js","webpack:///webpack/bootstrap 69cb7c0b41511bd9ccdc","webpack:///./src/constants.js","webpack:///./src/main.js","webpack:///./node_modules/satellite.js/dist/satellite.js","webpack:///./src/utils.js","webpack:///./src/line-defs.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","undefined","apply","value","_MS_IN_A_DAY","_DATA_TYPES","_INT","Symbol","_FLOAT","_CHAR","_DECIMAL_ASSUMED","_DECIMAL_ASSUMED_E","_ACCEPTABLE_TLE_INPUT_TYPES","_STRING","_ARRAY","_OBJECT","_LEADING_ZERO_ASSUMED_PREFIX","_satellite","_utils","_lineDefs","_constants","_interopRequireDefault","obj","default","_typeof","iterator","constructor","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","writable","key","_createClass","protoProps","staticProps","_satellite2","_lineDefs2","satellitejs","twoline2satrec","satellite","TLEJS","createAllTLEGetters","cache","antemeridianCrossings","inputTLE","arr","tleStrLong","Array","isArray","join","tleStr","substr","cacheKey","concat","outputObj","tleType","tleArr","split","Error","splice","map","line","trim","tle","_this","parsedTLE","parseTLE","isValid","forEach","index","lineNumber","parsedLineNumber","lineNumberIsValid","calculatedLineChecksum","tleLineChecksum","parsedChecksum","checksumIsValid","tleLineStr","charArr","reduce","sum","val","parsedVal","parseInt","parsedSum","Number","isInteger","lines","boundCreateTLELineGetters","createTLELineGetters","bind","keys","boundCreateTLEValGetter","createTLEValGetter","tleLine","prop","_this2","_toCamelCase","output","start","type","parseFloat","_decimalAssumedEToFloat","epochDay","getEpochDay","epochYear","getEpochYear","_dayOfYearToTimeStamp","timestamp","observerLat","observerLng","observerHeight","timestampCopy","Date","now","tleStrShort","defaultObserverPosition","lat","lng","height","obsLat","obsLng","obsHeight","satrec","time","positionAndVelocity","propagate","error","positionEci","position","velocityEci","velocity","observerGd","latitude","_degreesToRadians","longitude","gmst","gstimeFromDate","positionEcf","eciToEcf","positionGd","eciToGeodetic","lookAngles","ecfToLookAngles","velocityKmS","Math","sqrt","pow","x","y","z","azimuth","degreesLong","degreesLat","elevation","_radiansToDegrees","range","rangeSat","optionalTimestamp","arguments","tleObj","isValidTLE","satInfo","getSatelliteInfo","ll","getLatLon","getEpochTimestamp","meanMotionSeconds","getMeanMotion","epochDayOfYear","timeMS","orbitLengthMS","getAverageOrbitLengthMins","cachedCrossingTimes","filter","diff","cachedVal","getCachedLastAntemeridianCrossingTimeMS","step","curLatLon","lastLatLon","curTimeMS","didCrossAntemeridian","tries","isDone","getLatLonArr","_crossesAntemeridian","couldNotFindCrossing","crossingTime","push","stepMS","optionalTimeMS","_this3","fnName","timeS","toFixed","tleStrTrimmed","orbitTimeMS","getOrbitTimeMS","curOrbitStartMS","getLastAntemeridianCrossingTimeMS","getOrbitTrack","curOrbitStartS","lastOrbitStartMS","nextOrbitStartMS","orbitStartTimes","orbitLatLons","orbitStartMS","TLEArr","startTimeMS","maxTimeMS","startTime","stepMSCopy","latLons","doesCrossAntemeridian","customTimeMS","latLon1","latLon2","lat1","lat2","lon1","lon2","NS","EW","sin","cos","degrees","atan2","compass","getGroundTrackLatLng","latLng","requirejs","require","undef","hasProp","hasOwn","normalize","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","j","part","baseParts","config","starMap","charAt","slice","nodeIdCompat","jsSuffixRegExp","test","replace","indexOf","substring","makeRequire","relName","forceSync","req","aps","makeNormalize","makeLoad","depName","defined","callDep","waiting","args","defining","main","splitPrefix","prefix","makeConfig","makeMap","handlers","plugin","parts","f","pr","e","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","alt","setTimeout","cfg","_defined","jQuery","pi","PI","xke","earthRadius","j2","j3","twoPi","deg2rad","rad2deg","minutesPerDay","mu","tumin","j4","j3oj2","x2o3","constants","radians","ecfCoords","geodeticCoords","a","e2","normal","geodeticToEcf","observerCoords","satelliteCoords","observerEcf","rx","ry","rz","topS","topE","topZ","topocentric","El","asin","topocentricToLookAngles","observerCoordsEcf","satelliteCoordsEcf","topocentricCoords","eciCoords","C","R","k","myLocation","currentRange","nextPos","nextRange","rangeRate","year","days","lmonth","dayofyr","floor","inttemp","mon","day","temp","hr","minute","sec","jdut1","tut1","date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","dpperParameters","alfdp","betdp","cosip","sinip","cosop","sinop","dalf","dbet","dls","f2","f3","pe","pgh","ph","pinc","pl","sel","ses","sghl","sghs","shs","sil","sinzf","sis","sll","sls","xls","xnoh","zf","zm","shll","init","ep","inclp","nodep","argpp","mp","opsmode","e3","ee2","peo","pgho","pho","pinco","plo","se2","se3","sgh2","sgh3","sgh4","sh2","sh3","si2","si3","sl2","sl3","sl4","t","xgh2","xgh3","xgh4","xh2","xh3","xi2","xi3","xl2","xl3","xl4","zmol","zmos","abs","dspaceParameters","delt","ft","theta","x2li","x2omi","xl","xldot","xnddt","xndt","xomi","irez","d2201","d2211","d3210","d3222","d4410","d4422","d5220","d5232","d5421","d5433","dedt","del1","del2","del3","didt","dmdt","dnodt","domdt","argpo","argpdot","tc","gsto","xfact","xlamo","no","atime","em","argpm","inclm","xli","mm","xni","nodem","nm","g22","g32","g44","g52","g54","dndt","iretn","dpper","dspace","tsince","am","axnl","aynl","betal","cosim","sinim","cnod","snod","cos2u","sin2u","coseo1","sineo1","cosi","sini","cosisq","cossu","sinsu","cosu","sinu","delm","delomg","emsq","ecose","el2","eo1","esine","r","v","rdotl","rl","rvdot","rvdotl","su","t2","t3","t4","tem5","temp1","temp2","tempa","tempe","templ","u","ux","uy","uz","vx","vy","vz","xinc","xincp","xlm","xmdf","xmx","xmy","nodedf","xnode","mrt","vkmpersec","mo","mdot","argpdf","nodeo","nodedot","nodecf","cc1","bstar","cc4","t2cof","isimp","omgcof","delmtemp","eta","xmcof","delmo","d2","d3","d4","cc5","sinmao","t3cof","t4cof","t5cof","ecco","inclo","method","dspaceResult","operationmod","dpperResult","aycof","xlcof","ktr","con41","x1mth2","x7thm1","mvt","jday","sgp4","jdsatepoch","dscomParameters","a1","a2","a3","a4","a5","a6","a7","a8","a9","a10","betasq","cc","ctem","stem","x1","x2","x3","x4","x5","x6","x7","x8","xnodce","xnoi","zcosg","zsing","zcosgl","zsingl","zcosh","zsinh","zcoshl","zsinhl","zcosi","zsini","zcosil","zsinil","zx","zy","ss1","ss2","ss3","ss4","ss5","ss6","ss7","sz1","sz2","sz3","sz11","sz12","sz13","sz21","sz22","sz23","sz31","sz32","sz33","s1","s2","s3","s4","s5","s6","s7","z1","z2","z3","z11","z12","z13","z21","z22","z23","z31","z32","z33","epoch","np","snodm","cnodm","sinomm","cosomm","rtemsq","gam","lsflg","dsinitParameters","f220","f221","f311","f321","f322","f330","f441","f442","f522","f523","f542","f543","g200","g201","g211","g300","g310","g322","g410","g422","g520","g521","g532","g533","sini2","xno2","ainv2","aonv","eoc","xpidot","eccsq","rptim","znl","zns","sgs","emo","emsqo","gstime","initlParameters","ak","d1","adel","po","omeosq","rteosq","cosio","cosio2","delPrime","ao","sinio","con42","ainv","posq","rp","ts70","ds70","tfrac","c1","dscom","dsinit","initl","sgp4initParameters","cc1sq","cc2","cc3","coef","coef1","cosio4","eeta","etasq","perige","pinvsq","psisq","qzms24","sfour","temp3","temp4","tsi","xhdot1","satn","xbstar","xecco","xargpo","xinclo","xmo","xno","xnodeo","operationmode","ss","qzms2ttemp","qzms2t","initlResult","qzms24temp","delmotemp","dscomResult","dsinitResult","days2mdhms","sgp4init","longstr1","longstr2","xpdotp","satnum","epochyr","epochdays","ndot","nddot","alta","altp","mdhmsResult","ecfToEci","dopplerFactor","version","gstimeFromJday","_toLeadingDecimal","_getDigitCount","_isPositive","num","toString","numDigits","zeroes","repeat","str","numWithAssumedLeadingDecimal","leadingDecimalPoints","toPrecision","dayOfYear","getFullYear","yearStart","yearStartMS","getTime","divider","bits","len","toUpperCase","longitude1","longitude2","line1","lineNumber1","satelliteNumber","classification","intDesignatorYear","intDesignatorLaunchNumber","intDesignatorPieceOfLaunch","firstTimeDerivative","secondTimeDerivative","bstarDrag","orbitModel","tleSetNumber","checksum1","line2","lineNumber2","satelliteNumber2","inclination","rightAscension","eccentricity","perigee","meanAnomaly","meanMotion","revNumberAtEpoch","checksum2"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,IAAAD,IAEAD,EAAA,IAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,EACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GAEjC,GAAIyB,GAAgCC,EAA8BC,GAA8B,SAAWC,EAAQnC,GAE7GiC,GAAgChC,GAAU+B,EAAiC,MAG3CI,MAFlCF,EAA2E,kBAAnCF,GACvCA,EAA+BK,MAAMpC,EAASgC,GAAiCD,KAChC9B,EAAOD,QAAUiC,IAUlE7B,EAAM,SAAUJ,GACjB,YAEAkB,QAAOC,eAAenB,EAAS,cAC7BqC,OAAO,IElGEC,IAAe,MAGfC,KACXC,EAAMC,SACNC,EAAQD,SACRE,EAAOF,SACPG,EAAkBH,SAClBI,EAAoBJ,UAGTK,KACXC,EAAS,SACTC,EAAQ,QACRC,EAAS,UAGEC,IAA+B,QF4GtC,SAAUjD,EAAQD,EAASM,GAEjC,GAAIyB,GAAgCC,EAA8BC,GAA8B,SAAWC,EAAQnC,GAE7GiC,GAAgC/B,EAAQD,EAASM,EAAoB,GAAIA,EAAoB,GAAIA,EAAoB,GAAIA,EAAoB,IAAKyB,EAAiC,MAGnJI,MAFlCF,EAA2E,kBAAnCF,GACvCA,EAA+BK,MAAMpC,EAASgC,GAAiCD,KAChC9B,EAAOD,QAAUiC,IAUlE7B,EAAM,SAAUH,EAAQD,EAASmD,EAAYC,EAAQC,EAAWC,GACjE,YAWA,SAASC,GAAuBC,GAC9B,MAAOA,IAAOA,EAAIhC,EAAagC,GAC7BC,QAASD,GAIb,QAASE,GAAQF,GAWf,OATEE,EADoB,kBAAXjB,SAAoD,gBAApBA,QAAOkB,SACtC,SAAiBH,GACzB,aAAcA,IAGN,SAAiBA,GACzB,MAAOA,IAAyB,kBAAXf,SAAyBe,EAAII,cAAgBnB,QAAUe,IAAQf,OAAOd,UAAY,eAAkB6B,KAI9GA,GAGjB,QAASK,GAAgBC,EAAUC,GACjC,KAAMD,YAAoBC,IACxB,KAAM,IAAIC,WAAU,qCAIxB,QAASC,GAAkBC,EAAQC,GACjC,IAAK,GAAI1D,GAAI,EAAGA,EAAI0D,EAAMC,OAAQ3D,IAAK,CACrC,GAAI4D,GAAaF,EAAM1D,EACvB4D,GAAWhD,WAAagD,EAAWhD,aAAc,EACjDgD,EAAWjD,cAAe,EACtB,SAAWiD,KAAYA,EAAWC,UAAW,GACjDpD,OAAOC,eAAe+C,EAAQG,EAAWE,IAAKF,IAIlD,QAASG,GAAaT,EAAaU,EAAYC,GAG7C,MAFID,IAAYR,EAAkBF,EAAYpC,UAAW8C,GACrDC,GAAaT,EAAkBF,EAAaW,GACzCX,EAhDT7C,OAAOC,eAAenB,EAAS,cAC7BqC,OAAO,IAETrC,EAAQyD,YAAUtB,EAElB,IAAIwC,GAAcpB,EAAuBJ,GAErCyB,EAAarB,EAAuBF,GGtIpCwB,EAAeF,EAAAlB,QAAYqB,eAAbH,EAAAlB,QAA6CkB,EAAAlB,QAAYsB,UAExDC,EHmLP,WGlLZ,QAAAA,KAAcnB,EAAAzD,KAAA4E,GACZ5E,KAAK6E,oBAALL,EAAAnB,SAGArD,KAAK8E,OACHC,0BH4pBF,MAheAX,GAAaQ,IACXT,IAAK,WACLlC,MAAO,SGvLF+C,GAIP,GAAI1B,EAAO0B,KAAa9B,EAAAR,EAA4BG,GAAWmC,EAASC,IAAK,MAAOD,EACpF,IAAME,GAAcC,MAAMC,QAAQJ,GAAaA,EAASK,KAAK,IAAML,EAC7DM,EAASJ,EAAWK,QAAUL,EAAWK,OAAO,EAAG,IACnDC,YANS,WAMT,KAAAC,OAAwBH,EAC9B,IAAItF,KAAK8E,MAAMU,GAAW,MAAOxF,MAAK8E,MAAMU,EAE5C,IAAME,MACAC,EAAWR,MAAMC,QAAQJ,GAC3B9B,EAAAR,EAA4BE,EADhBU,EAEL0B,GACPY,IAEJ,QAAQD,GACR,IAAKzC,GAAAR,EAA4BE,EAE/BgD,EAASZ,EAASS,QAClB,MAEF,KAAKvC,GAAAR,EAA4BC,EAE/BiD,EAASZ,EAASa,MAAM,KACxB,MAEF,SACE,KAAM,IAAIC,OAAM,wBAwBlB,MApBIF,GAAO5B,OAAS,GAIlB0B,EAAU/E,KAAOiF,EAAO,GAGxBA,EAAOG,OAAO,EAAG,IAGjBL,EAAU/E,KAAO,UAInBiF,EAASA,EAAOI,IAAI,SAAAC,GAAA,MAAQA,GAAKC,SAEjCR,EAAUT,IAAMW,EAEhB5F,KAAK8E,MAAMU,GAAYE,EAEhBA,KHmLLvB,IAAK,aACLlC,MAAO,SG7KAkE,GAAK,GAAAC,GAAApG,KAGRqG,EAAYrG,KAAKsG,SAASH,GAC1Bb,EAASe,EAAUpB,IAAII,KAAK,IAAIE,OAAO,EAAG,IAC1CC,YAJS,aAIT,KAAAC,OAAwBH,EAC9B,IAAItF,KAAK8E,MAAMU,GAAW,MAAOxF,MAAK8E,MAAMU,EAE5C,IAAIe,IAAU,CAEd,OAA6B,KAAzBF,EAAUpB,IAAIjB,SAGlBqC,EAAUpB,IAAIuB,QAAQ,SAACP,EAAMQ,GAE3B,GAAKF,EAAL,CAEA,GAAMG,GAAaD,EAAQ,EAGrBE,EAAmBP,EAAA,gBAAAX,OAAqBiB,IAAcL,GACtDO,EAAoBD,IAAqBD,EAGzCG,EAAyBT,EAAKU,gBAAgBT,EAAUpB,IAAIwB,IAC5DM,EAAiBX,EAAA,cAAAX,OAAmBiB,IAAcL,GAClDW,EAAkBD,IAAmBF,CAEtCD,IAAsBI,IACzBT,GAAU,MAIdvG,KAAK8E,MAAMU,GAAYe,EAEhBA,MH4KLpC,IAAK,kBACLlC,MAAO,SGpKKgF,GACd,GAAMC,GAAUD,EAAWpB,MAAM,GAKjC,IAFAqB,EAAQnB,OAAOmB,EAAQlD,OAAS,EAAG,GAEZ,IAAnBkD,EAAQlD,OACV,KAAM,IAAI8B,OAAM,yBAA0BmB,EAgB5C,OAbiBC,GAAQC,OAAO,SAACC,EAAKC,GACpC,GAAMC,GAAYC,SAASF,EAAK,IAC1BG,EAAYD,SAASH,EAAK,GAEhC,OAAIK,QAAOC,UAAUJ,GACZE,EAAYF,EACF,MAARD,EACFG,EAAY,EAGdA,IAGS,MHqKhBrD,IAAK,sBACLlC,MAAO,SGhKS0F,GAClB,GAAMC,GAA4B5H,KAAK6H,qBAAqBC,KAAK9H,KAAM2H,EACvE7G,QAAOiH,KAAKJ,GAAOnB,QAAQoB,MHmKzBzD,IAAK,uBACLlC,MAAO,SG9JU0F,EAAO1B,GAC1B,GAAM+B,GAA0BhI,KAAKiI,mBAAmBH,KAAK9H,KAAMiG,EACnEnF,QAAOiH,KAAKJ,EAAM1B,IAAOO,QAAQwB,MHiK/B7D,IAAK,qBACLlC,MAAO,SG1JQiG,EAASC,GAAM,GAAAC,GAAApI,IAChCA,OAAK,EAAAgD,EAAAqF,GAAA,OAAA5C,OAAoB0C,KAAW,SAAChC,GACnC,GASImC,GATEjC,EAAY+B,EAAK9B,SAASH,GAE1BP,EAASS,EAAUpB,IACnBgB,EAAoB,UAAZiC,EAAuBtC,EAAO,GAAKA,EAAO,GAClD2C,EAAQ/D,EAAAnB,QAAS6E,GAASC,GAAMI,MAChCvE,EAASQ,EAAAnB,QAAS6E,GAASC,GAAMnE,OAEjCuB,EAASU,EAAKV,OAAOgD,EAAOvE,EAGlC,QAAQQ,EAAAnB,QAAS6E,GAASC,GAAMK,MAChC,IAAKtF,GAAAf,EAAYC,EACfkG,EAASf,SAAShC,EAAQ,GAC1B,MAEF,KAAKrC,GAAAf,EAAYG,EACfgG,EAASG,WAAWlD,EACpB,MAEF,KAAKrC,GAAAf,EAAYK,EACf8F,EAASG,iCAA6ClD,GACtD,MAEF,KAAKrC,GAAAf,EAAYM,EACf6F,GAAS,EAAAtF,EAAA0F,GAAwBnD,EACjC,MAEF,KAAKrC,GAAAf,EAAYI,EACjB,QACE+F,EAAS/C,EAAOW,OAIlB,MAAOoC,OH+JPnE,IAAK,oBACLlC,MAAO,SGrJOkE,GAChB,GAAMwC,GAAW3I,KAAK4I,YAAYzC,GAC5B0C,EAAY7I,KAAK8I,aAAa3C,EACpC,QAAO,EAAAnD,EAAA+F,GAAsBJ,EAAUE,MHwJrC1E,IAAK,mBACLlC,MAAO,SG9IMkE,GAEf,MADkBnG,MAAKsG,SAASH,GACfxF,QHiJfwD,IAAK,mBACLlC,MAAO,SGrGMkE,EAAK6C,EAAWC,EAAaC,EAAaC,GACzD,GAEMC,GAAgBJ,GAAaK,KAAKC,MAElC1D,EAAU5F,KAAKsG,SAASH,GAAMlB,IAC9BsE,EAAc3D,EAAOP,KAAK,IAAIE,OAAO,EAAG,IAExCiE,GACJC,IAAK,WACLC,KAAM,SACNC,OAAQ,KAGJC,EAASX,GAAeO,EAAwBC,IAChDI,EAASX,GAAeM,EAAwBE,IAChDI,EAAYX,GAAkBK,EAAwBG,OAGtDnE,YAlBS,mBAkBT,KAAAC,OAAwB8D,EAAxB,KAAA9D,OAAuC2D,EAAvC,KAAA3D,OAAwDwD,EAAxD,KAAAxD,OAAuEyD,EAAvE,OAAAzD,OACP0D,EACC,IAAInJ,KAAK8E,MAAMU,GAAW,MAAOxF,MAAK8E,MAAMU,EAG5C,KAAKf,EACH,KAAM,IAAIqB,OAAM,yBAIlB,IAAMiE,GAAStF,EAAYC,eAAekB,EAAO,GAAIA,EAAO,IAEtDoE,EAAO,GAAIX,MAAKD,GAGhBa,EAAsBxF,EAAYyF,UAAUH,EAAQC,EAE1D,IAAIvF,EAAY0F,MACd,KAAM,IAAIrE,OAAM,sDAKlB,IAAMsE,GAAcH,EAAoBI,SAClCC,EAAcL,EAAoBM,SAGlCC,GACJC,UAAU,EAAAzH,EAAA0H,GAAkBd,GAC5Be,WAAW,EAAA3H,EAAA0H,GAAkBb,GAC7BF,OAAQG,GAKJc,EAAOnG,EAAYoG,eAAeb,GAGlCc,EAAcrG,EAAYsG,SAASX,EAAaQ,GAChDI,EAAavG,EAAYwG,cAAcb,EAAaQ,GACpDM,EAAazG,EAAY0G,gBAAgBX,EAAYM,GAErDM,EACJC,KAAKC,KAAKD,KAAKE,IAAIjB,EAAYkB,EAAG,GAClCH,KAAKE,IAAIjB,EAAYmB,EAAG,GACxBJ,KAAKE,IAAIjB,EAAYoB,EAAG,IAGpBC,EAAUT,EAAWS,QAGrBhB,EAAYK,EAAWL,UACvBF,EAAWO,EAAWP,SACtBd,EAASqB,EAAWrB,OAEpBrB,GACJoB,IAAKjF,EAAYmH,YAAYjB,GAC7BlB,IAAKhF,EAAYoH,WAAWpB,GAC5BqB,WAAW,EAAA9I,EAAA+I,GAAkBb,EAAWY,WACxCH,SAAS,EAAA3I,EAAA+I,GAAkBJ,GAC3BK,MAAOd,EAAWe,SAClBtC,SACAY,SAAUa,EAKZ,OAFApL,MAAK8E,MAAMU,GAAY8C,EAEhBA,KHmFLnE,IAAK,YACLlC,MAAO,SG9EDkE,GAAqC,GAAhC+F,GAAgCC,UAAAnI,OAAA,OAAAjC,KAAAoK,UAAA,GAAAA,UAAA,GAAZ9C,KAAKC,MAChC8C,EAASpM,KAAKsG,SAASH,EAG7B,KAAKnG,KAAKqM,WAAWD,GACnB,KAAM,IAAItG,OAAM,2BAA4BK,EAG9C,IAAMmG,GAAUtM,KAAKuM,iBAAiBH,EAAOnH,IAAKiH,EAClD,QACEzC,IAAK6C,EAAQ7C,IACbC,IAAK4C,EAAQ5C,QHkFbvF,IAAK,eACLlC,MAAO,SG5EEkE,GAAqC,GAAhC+F,GAAgCC,UAAAnI,OAAA,OAAAjC,KAAAoK,UAAA,GAAAA,UAAA,GAAZ9C,KAAKC,MACnCkD,EAAKxM,KAAKyM,UAAUtG,EAAK+F,EAC/B,QAAQM,EAAG/C,IAAK+C,EAAG9C,QHgFjBvF,IAAK,mBACLlC,MAAO,SG3EMkE,GACf,MAAOnG,MAAKyM,UAAUtG,EAAKnG,KAAK0M,kBAAkBvG,OH8EhDhC,IAAK,4BACLlC,MAAO,SGzEekE,GACxB,GAEMb,GAASa,EAAId,KAAK,IAAIE,OAAO,EAAG,IAChCC,YAHS,4BAGT,KAAAC,OAAwBH,EAC9B,IAAItF,KAAK8E,MAAMU,GAAW,MAAOxF,MAAK8E,MAAMU,EAE5C,IAAMmH,GAAqB,KAAW3M,KAAK4M,cAAczG,EAIzD,OAFAnG,MAAK8E,MAAMU,GAAYmH,EAEhBA,KHwELxI,IAAK,uBACLlC,MAAO,SGnEUkE,GACnB,GAAM0C,GAAY7I,KAAK8I,aAAa3C,GAC9B0G,EAAiB7M,KAAK4I,YAAYzC,EAGxC,QAFkB,EAAAnD,EAAA+F,GAAsB8D,EAAgBhE,MHuEtD1E,IAAK,0CACLlC,MAAO,SG/D6BkE,EAAK2G,GAC3C,GAAMC,GAA0D,GAA1C/M,KAAKgN,0BAA0B7G,EAAIlB,KAAY,IAE/DK,EAASa,EAAIlB,IAAII,KAAK,IAAIE,OAAO,EAAG,IAEpC0H,EAAsBjN,KAAK8E,MAAMC,sBAAsBO,EAC7D,SAAK2H,KAEwB,IAAzBA,EAAmCA,EAEpBA,EAAoBC,OAAO,SAAA7F,GAC5C,GAAmB,WAAf/D,EAAO+D,IAAoBA,EAAIlB,MAAQA,EAAK,OAAQ,CAExD,IAAMgH,GAAOL,EAASzF,CAGtB,OAFuB8F,GAAO,GACUA,EAAOJ,IAI/B,KAAM,MH4DtB5I,IAAK,oCACLlC,MAAO,SGtDuBkE,EAAK2G,GACrC,GAAMzG,GAAYrG,KAAKsG,SAASH,GAE1BiH,EAAYpN,KAAKqN,wCAAwChH,EAAWyG,EAC1E,IAAIM,EAAW,MAAOA,EAYtB,KAVA,GAAMpD,GAAO8C,GAAUzD,KAAKC,MAExBgE,EAAO,IACPC,KACAC,KACAC,EAAYzD,EACZ0D,GAAuB,EACvBC,EAAQ,EACRC,GAAS,GAELA,GACNL,EAAYvN,KAAK6N,aAAaxH,EAAUpB,IAAKwI,GAE7CC,GAAuB,EAAA1K,EAAA8K,GAAqBN,EAAW,GAAID,EAAU,IACjEG,GAEFD,GAAaH,EACbA,EAAQA,EAAO,IAAS,IAAQA,EAAO,IAEvCG,GAAaH,EACbE,EAAaD,GAGfK,EAASN,EAAO,KAAOK,GAdR,IAgBfA,GAGF,IAAMI,GAAuBJ,EAAQ,GAnBpB,IAoBXK,EAAgBD,GAAyB,EAAIxG,SAASkG,EAAW,IAEjEnI,EAASe,EAAUpB,IAAII,KAAK,IAAIE,OAAO,EAAG,GAShD,OARKvF,MAAK8E,MAAMC,sBAAsBO,KAAStF,KAAK8E,MAAMC,sBAAsBO,OAE5EyI,EACF/N,KAAK8E,MAAMC,sBAAsBO,IAAW,EAE5CtF,KAAK8E,MAAMC,sBAAsBO,GAAQ2I,KAAKD,GAGzCA,KHqDL7J,IAAK,iBACLlC,MAAO,SGhDIkE,GACb,MAAOoB,UAASrE,EAAAhB,EAAelC,KAAK4M,cAAczG,GAAM,OHmDtDhC,IAAK,uBACLlC,MAAO,SGvBUkE,EAAK+H,EAAQC,GAAgB,GAc5C3I,GAd4C4I,EAAApO,KAC1CqO,EAAS,uBAETvB,EAASqB,GAAkB9E,KAAKC,MAChCgF,GAASxB,EAAS,KAAMyB,UAExBlI,EAAYrG,KAAKsG,SAASH,GAC1BqI,EAAgBnI,EAAUpB,IAAI,GAAGM,OAAO,EAAG,IAE3CkJ,EAAczO,KAAK0O,eAAevI,GAClCwI,EAAkB3O,KAAK4O,kCAAkCvI,EAAWyG,EAK1E,KAH2C,IAArB6B,EAapB,MADAnJ,aAAc6I,EAAd,KAAA5I,OAAwB+I,EAAxB,KAAA/I,OAAyCyI,EAAzC,KAAAzI,OAAmD6I,GAC/CtO,KAAK8E,MAAMU,GAAkBxF,KAAK8E,MAAMU,IAE5CxF,KAAK8E,MAAMU,IACTxF,KAAK6O,cAAcxI,EAAUpB,IAAK6H,EAAQ,IAAQ,QAG7C9M,KAAK8E,MAAMU,GAflB,IAAMsJ,IAAkBH,EAAkB,KAAMJ,SAIhD,IADA/I,YAAc6I,EAAd,KAAA5I,OAAwB+I,EAAxB,KAAA/I,OAAyCyI,EAAzC,KAAAzI,OAAmDqJ,GAC/C9O,KAAK8E,MAAMU,GAAW,MAAOxF,MAAK8E,MAAMU,EAc9C,IAAMuJ,GAAmB/O,KAAK4O,kCAAkCzI,EAAKwI,EAAkB,KACjFK,EAAmBhP,KAAK4O,kCAC1BzI,EAAKwI,EAAkBF,EAAe,MAEpCQ,GACJF,EACAJ,EACAK,GAGIE,EAAeD,EAAgBjJ,IACnC,SAAAmJ,GAAA,MAAgBf,GAAKS,cAAcxI,EAAUpB,IAAKkK,EAAcjB,GAAQ,IAK1E,OAFAlO,MAAK8E,MAAMU,GAAY0J,EAEhBA,KHSL/K,IAAK,gBACLlC,MAAO,SGFGmN,EAAQC,EAAanB,GAA6B,GAArBoB,GAAqBnD,UAAAnI,OAAA,OAAAjC,KAAAoK,UAAA,GAAAA,UAAA,GAAT,GAGrD,KAAKkD,EAAa,QAGlB,IAAM/J,GAAS8J,EAAO/J,KAAK,IACrBmJ,EAAgBlJ,EAAOC,OAAO,EAAG,IACjCgK,GAAaF,EAAc,KAAOd,UAClC/I,YARS,gBAQT,KAAAC,OAAwB+I,EAAxB,KAAA/I,OAAyC8J,EAAzC,KAAA9J,OAAsDyI,EAC5D,IAAIlO,KAAK8E,MAAMU,GAAW,MAAOxF,MAAK8E,MAAMU,EAY5C,KATA,GACIgK,GAAatB,GADK,IAGhBuB,KACFhC,EAAY4B,EACZ7B,KACAD,KACAK,GAAS,EACT8B,GAAwB,GACpB9B,GACNL,EAAYvN,KAAK6N,aAAauB,EAAQ3B,GAEtCiC,GAAwB,EAAA1M,EAAA8K,GAAqBN,EAAW,GAAID,EAAU,IAClEmC,GACiB,MAAfF,IAAoB5B,GAAS,GAGjCH,GAAa+B,EACbA,EAAa,MAEbC,EAAQxB,KAAKV,GACbE,GAAa+B,EACbhC,EAAaD,GAGX+B,GAAc7B,EAAY4B,EAAcC,IAAY1B,GAAS,EAKnE,OAFA5N,MAAK8E,MAAMU,GAAYiK,EAEhBA,KHCLtL,IAAK,gBACLlC,MAAO,SGOGkE,EAAKwJ,GACjB,GAAMtJ,GAAYrG,KAAKsG,SAASH,GAE1B2G,EAAS6C,GAAgBtG,KAAKC,MAE9BsG,EAAU5P,KAAK6N,aAAaxH,EAAUpB,IAAK6H,GAC3C+C,EAAU7P,KAAK6N,aAAaxH,EAAUpB,IAAK6H,EAAS,IAI1D,KAF8B,EAAA9J,EAAA8K,GAAqB8B,EAAQ,GAAIC,EAAQ,IAIrE,QAIF,IAAMC,IAAO,EAAA9M,EAAA0H,GAAkBkF,EAAQ,IACjCG,GAAO,EAAA/M,EAAA0H,GAAkBmF,EAAQ,IACjCG,GAAO,EAAAhN,EAAA0H,GAAkBkF,EAAQ,IACjCK,GAAO,EAAAjN,EAAA0H,GAAkBmF,EAAQ,IAEjCK,EAAMJ,GAAQC,EAAQ,IAAM,IAC5BI,EAAMH,GAAQC,EAAQ,IAAM,IAE5BxE,EAAIJ,KAAK+E,IAAIH,EAAOD,GAAQ3E,KAAKgF,IAAIN,GACrCvE,EAAKH,KAAKgF,IAAIP,GAAQzE,KAAK+E,IAAIL,GAC1B1E,KAAK+E,IAAIN,GAAQzE,KAAKgF,IAAIN,GAAQ1E,KAAKgF,IAAIJ,EAAOD,EAG7D,QACEM,SAHc,EAAAtN,EAAA+I,GAAkBV,KAAKkF,MAAM9E,EAAGD,IAI9CgF,kBAAYN,GAAZzK,OAAiB0K,OHXjBhM,IAAK,uBACLlC,MAAO,SGkBUkE,EAAK+H,EAAQC,GAIhC,MAHkBnO,MAAKyQ,qBAAqBtK,EAAK+H,EAAQC,GAC7BnI,IAAI,SAAAC,GAAA,MAAQA,GAAKD,IAAI,SAAA0K,GAAA,OAAWA,EAAO,GAAIA,EAAO,YHTvE9L,IAGThF,GAAQyD,QGrqBWuB,EHsqBnB/E,EAAOD,QAAUA,EAAiB,WAK9B,SAAUC,EAAQD,EAASM,GAEjC,GAAIyB,GAAgCC,EAA8BC,GIjsBlE,SAAAnC,EAAAC,GAMAiC,KAAAD,EAAA,MAAAI,MAAAF,EAAA,kBAAAF,KAAAK,MAAApC,EAAAgC,GAAAD,KAAA9B,EAAAD,QAAAiC,IAMC7B,EAAA,WAUD,GAAA2Q,GAAAC,EAAA9Q,CAsoHA,OAroHA,UAAA+Q,GAUA,QAAAC,GAAA1N,EAAA+E,GACA,MAAA4I,GAAAxQ,KAAA6C,EAAA+E,GAWA,QAAA6I,GAAArQ,EAAAsQ,GACA,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAApR,EAAAqR,EAAAC,EACAC,EAAAX,KAAApL,MAAA,KACAG,EAAA6L,EAAA7L,IACA8L,EAAA9L,KAAA,QAGA,IAAArF,GAAA,MAAAA,EAAAoR,OAAA,GAIA,GAAAd,EAAA,CAkBA,IAZAW,IAAAI,MAAA,EAAAJ,EAAA5N,OAAA,GACArD,IAAAkF,MAAA,KACAyL,EAAA3Q,EAAAqD,OAAA,EAGA6N,EAAAI,cAAAC,EAAAC,KAAAxR,EAAA2Q,MACA3Q,EAAA2Q,GAAA3Q,EAAA2Q,GAAAc,QAAAF,EAAA,KAGAvR,EAAAiR,EAAAnM,OAAA9E,GAGAN,EAAA,EAA2BA,EAAAM,EAAAqD,OAAiB3D,GAAA,EAE5C,UADAsR,EAAAhR,EAAAN,IAEAM,EAAAoF,OAAA1F,EAAA,GACAA,GAAA,MACqB,WAAAsR,EAAA,CACrB,OAAAtR,IAAA,OAAAM,EAAA,WAAAA,EAAA,IAOA,KACyBN,GAAA,IACzBM,EAAAoF,OAAA1F,EAAA,KACAA,GAAA,GAMAM,IAAA0E,KAAA,SACa,KAAA1E,EAAA0R,QAAA,QAGb1R,IAAA2R,UAAA,GAKA,KAAAV,GAAAE,IAAA9L,EAAA,CAGA,IAFAkL,EAAAvQ,EAAAkF,MAAA,KAEAxF,EAAA6Q,EAAAlN,OAAsC3D,EAAA,EAAOA,GAAA,GAG7C,GAFA8Q,EAAAD,EAAAc,MAAA,EAAA3R,GAAAgF,KAAA,KAEAuM,EAGA,IAAAF,EAAAE,EAAA5N,OAA8C0N,EAAA,EAAOA,GAAA,EAKrD,IAJAN,EAAApL,EAAA4L,EAAAI,MAAA,EAAAN,GAAArM,KAAA,SAKA+L,IAAAD,IACA,CAEAE,EAAAD,EACAG,EAAAlR,CACA,OAMA,GAAAgR,EACA,OAMAG,GAAAM,KAAAX,KACAK,EAAAM,EAAAX,GACAM,EAAApR,IAIAgR,GAAAG,IACAH,EAAAG,EACAD,EAAAE,GAGAJ,IACAH,EAAAnL,OAAA,EAAAwL,EAAAF,GACA1Q,EAAAuQ,EAAA7L,KAAA,MAIA,MAAA1E,GAGA,QAAA4R,GAAAC,EAAAC,GACA,kBAIA,MAAAC,GAAA1Q,MAAA6O,EAAA8B,EAAApS,KAAA4L,UAAA,GAAA1G,QAAA+M,EAAAC,MAIA,QAAAG,GAAAJ,GACA,gBAAA7R,GACA,MAAAqQ,GAAArQ,EAAA6R,IAIA,QAAAK,GAAAC,GACA,gBAAA7Q,GACA8Q,EAAAD,GAAA7Q,GAIA,QAAA+Q,GAAArS,GACA,GAAAmQ,EAAAmC,EAAAtS,GAAA,CACA,GAAAuS,GAAAD,EAAAtS,SACAsS,GAAAtS,GACAwS,EAAAxS,IAAA,EACAyS,EAAApR,MAAA6O,EAAAqC,GAGA,IAAApC,EAAAiC,EAAApS,KAAAmQ,EAAAqC,EAAAxS,GACA,SAAAmF,OAAA,MAAAnF,EAEA,OAAAoS,GAAApS,GAMA,QAAA0S,GAAA1S,GACA,GAAA2S,GACA7M,EAAA9F,IAAA0R,QAAA,OAKA,OAJA5L,IAAA,IACA6M,EAAA3S,EAAA2R,UAAA,EAAA7L,GACA9F,IAAA2R,UAAA7L,EAAA,EAAA9F,EAAAqD,UAEAsP,EAAA3S,GA8CA,QAAA4S,GAAA5S,GACA,kBACA,MAAAkR,uBAAAlR,QApOA,GAAAyS,GAAAV,EAAAc,EAAAC,EACAV,KACAE,KACApB,KACAsB,KACApC,EAAAjQ,OAAAS,UAAAC,eACAmR,KAAAX,MACAE,EAAA,OAqLAsB,GAAA,SAAA7S,EAAA6R,GACA,GAAAkB,GACAC,EAAAN,EAAA1S,GACA2S,EAAAK,EAAA,EA2BA,OAzBAhT,GAAAgT,EAAA,GAEAL,IACAA,EAAAtC,EAAAsC,EAAAd,GACAkB,EAAAV,EAAAM,IAIAA,EAEA3S,EADA+S,KAAA1C,UACA0C,EAAA1C,UAAArQ,EAAAiS,EAAAJ,IAEAxB,EAAArQ,EAAA6R,IAGA7R,EAAAqQ,EAAArQ,EAAA6R,GACAmB,EAAAN,EAAA1S,GACA2S,EAAAK,EAAA,GACAhT,EAAAgT,EAAA,GACAL,IACAI,EAAAV,EAAAM,MAMAM,EAAAN,IAAA,IAAA3S,IACAQ,EAAAR,EACAkT,GAAAP,EACA7R,EAAAiS,IAUAD,GACA7C,QAAA,SAAAjQ,GACA,MAAA4R,GAAA5R,IAEAf,QAAA,SAAAe,GACA,GAAAmT,GAAAf,EAAApS,EACA,iBAAAmT,EACAA,EAEAf,EAAApS,OAGAd,OAAA,SAAAc,GACA,OACAoT,GAAApT,EACAqT,IAAA,GACApU,QAAAmT,EAAApS,GACAkR,OAAA0B,EAAA5S,MAKAyS,EAAA,SAAAzS,EAAAsT,EAAAC,EAAA1B,GACA,GAAA2B,GAAArB,EAAAsB,EAAApO,EAAA3F,EAGAgU,EAFAnB,KACAoB,QAAAJ,EAOA,IAHA1B,KAAA7R,EAGA,cAAA2T,GAAA,aAAAA,EAAA,CAKA,IADAL,KAAAjQ,QAAAkQ,EAAAlQ,QAAA,8BAAAiQ,EACA5T,EAAA,EAAuBA,EAAA4T,EAAAjQ,OAAiB3D,GAAA,EAKxC,GAJA2F,EAAAwN,EAAAS,EAAA5T,GAAAmS,GAIA,aAHAM,EAAA9M,EAAA4N,GAIAV,EAAA7S,GAAAoT,EAAA7C,QAAAjQ,OACiB,gBAAAmS,EAEjBI,EAAA7S,GAAAoT,EAAA7T,QAAAe,GACA0T,GAAA,MACiB,eAAAvB,EAEjBqB,EAAAjB,EAAA7S,GAAAoT,EAAA5T,OAAAc,OACiB,IAAAmQ,EAAAiC,EAAAD,IACjBhC,EAAAmC,EAAAH,IACAhC,EAAAqC,EAAAL,GACAI,EAAA7S,GAAA2S,EAAAF,OACiB,KAAA9M,EAAAvE,EAIjB,SAAAqE,OAAAnF,EAAA,YAAAmS,EAHA9M,GAAAvE,EAAA8S,KAAAvO,EAAA7E,EAAAoR,EAAAC,GAAA,GAAAK,EAAAC,OACAI,EAAA7S,GAAA0S,EAAAD,GAMAsB,EAAAF,IAAAlS,MAAA+Q,EAAApS,GAAAuS,OAAAnR,GAEApB,IAIAwT,KAAAvU,UAAAiR,GACAsD,EAAAvU,UAAAmT,EAAApS,GACAoS,EAAApS,GAAAwT,EAAAvU,QACiBwU,IAAAvD,GAAAwD,IAEjBtB,EAAApS,GAAAyT,QAGSzT,KAGToS,EAAApS,GAAAuT,IAIAvD,EAAAC,EAAA8B,EAAA,SAAAuB,EAAAC,EAAA1B,EAAAC,EAAA+B,GACA,mBAAAP,GACA,MAAAR,GAAAQ,GAEAR,EAAAQ,GAAAC,GAMAlB,EAAAQ,EAAAS,EAAAC,GAAAN,EACS,KAAAK,EAAAlO,OAAA,CAMT,GAJA8L,EAAAoC,EACApC,EAAAoC,MACAvB,EAAAb,EAAAoC,KAAApC,EAAAqC,WAEAA,EACA,MAGAA,GAAAnO,QAGAkO,EAAAC,EACAA,EAAA1B,EACAA,EAAA,MAEAyB,EAAApD,EA6BA,MAxBAqD,MAAA,aAIA,kBAAA1B,KACAA,EAAAC,EACAA,EAAA+B,GAIA/B,EACAW,EAAAvC,EAAAoD,EAAAC,EAAA1B,GAQAiC,WAAA,WACArB,EAAAvC,EAAAoD,EAAAC,EAAA1B,IACa,GAGbE,GAOAA,EAAAb,OAAA,SAAA6C,GACA,MAAAhC,GAAAgC,IAMA/D,EAAAgE,EAAA5B,EAEAjT,EAAA,SAAAa,EAAAsT,EAAAC,GAGAD,EAAAlO,SAIAmO,EAAAD,EACAA,MAGAnD,EAAAiC,EAAApS,IAAAmQ,EAAAmC,EAAAtS,KACAsS,EAAAtS,MAAAsT,EAAAC,KAIApU,EAAAC,KACA6U,QAAA,MAIA9U,EAAA,uBASAA,EAAA,0BACA,YAEA,IAAA+U,GAAAxJ,KAAAyJ,GAGAC,EAAA,GAAA1J,KAAAC,KAAA0J,mBACAC,EAAA,gBACAC,GAAA,aAEA,QACAL,KACAM,MAAA,EAAAN,EACAO,QAAAP,EAAA,IACAQ,QAAA,IAAAR,EACAS,cAAA,KACAC,GAZA,SAaAP,YAZA,SAaAD,MACAS,MAAA,EAAAT,EACAE,KACAC,KACAO,IAAA,cACAC,MAAAR,EAAAD,EACAU,KAAA,OAUA7V,EAAA,qCACA,gBACA,SACA8V,GAEA,YAEA,iBAAAC,GACA,GAAAA,EAAAD,EAAAf,GAAA,GAAAgB,GAAAD,EAAAf,GAAA,EACA,WAEA,IAAAvE,GAAAuF,EAAAD,EAAAf,GAAA,GAOA,OALAvE,QAeAxQ,EAAA,sCACA,gBACA,SACA8V,GAEA,YAEA,iBAAAC,GACA,GAAAvF,GAAAuF,EAAAD,EAAAf,GAAA,OAOA,OANAvE,GAAA,IACAA,EAAA,IAAAA,EAEAA,GAAA,MACAA,EAAA,IAAAA,GAEAA,KAUAxQ,EAAA,iDACA,YAEA,iBAAAgW,EAAAlL,GAUA,OAAgBY,EAHhBsK,EAAAtK,EAAAH,KAAAgF,IAAAzF,GAAAkL,EAAArK,EAAAJ,KAAA+E,IAAAxF,GAGgBa,EAFhBqK,EAAAtK,EAAAH,KAAA+E,IAAAxF,GAAAkL,EAAArK,EAAAJ,KAAAgF,IAAAzF,GAEgBc,EADhBoK,EAAApK,MAWA5L,EAAA,sDACA,YAEA,iBAAAiW,GACA,GAAApL,GAAAoL,EAAApL,UACAF,EAAAsL,EAAAtL,SACAd,EAAAoM,EAAApM,OACAqM,EAAA,SAEApC,GAAAoC,EADA,cACAA,EACAC,EAAA,EAAArC,MACAsC,EAAAF,EAAA3K,KAAAC,KAAA,EAAA2K,GAAA5K,KAAA+E,IAAA3F,GAAAY,KAAA+E,IAAA3F,IAKA,QAAgBe,GAHhB0K,EAAAvM,GAAA0B,KAAAgF,IAAA5F,GAAAY,KAAAgF,IAAA1F,GAGgBc,GAFhByK,EAAAvM,GAAA0B,KAAAgF,IAAA5F,GAAAY,KAAA+E,IAAAzF,GAEgBe,GADhBwK,GAAA,EAAAD,GAAAtM,GAAA0B,KAAA+E,IAAA3F,OAWA3K,EAAA,qCACA,qBACA,SACAqW,GAEA,YAEA,iBAAAC,EAAAC,GAKA,GAAA1L,GAAAyL,EAAAzL,UACAF,EAAA2L,EAAA3L,SAKA6L,EAAAH,EAAAC,GAEAG,EAAAF,EAAA7K,EAAA8K,EAAA9K,EACAgL,EAAAH,EAAA5K,EAAA6K,EAAA7K,EACAgL,EAAAJ,EAAA3K,EAAA4K,EAAA5K,CASA,QAAgBgL,KAPhBrL,KAAA+E,IAAA3F,GAAAY,KAAAgF,IAAA1F,GAAA4L,EACAlL,KAAA+E,IAAA3F,GAAAY,KAAA+E,IAAAzF,GAAA6L,EACAnL,KAAAgF,IAAA5F,GAAAgM,EAKgBE,MAJhBtL,KAAA+E,IAAAzF,GAAA4L,EAAAlL,KAAAgF,IAAA1F,GAAA6L,EAIgBI,KAHhBvL,KAAAgF,IAAA5F,GAAAY,KAAAgF,IAAA1F,GAAA4L,EACAlL,KAAAgF,IAAA5F,GAAAY,KAAA+E,IAAAzF,GAAA6L,EACAnL,KAAA+E,IAAA3F,GAAAgM,MAWA3W,EAAA,oDACA,gBACA,SACA8V,GAEA,YASA,iBAAAiB,GACA,GAAAH,GAAAG,EAAAH,KACAC,EAAAE,EAAAF,KACAC,EAAAC,EAAAD,KACA3K,EAAAZ,KAAAC,KAAAoL,IAAAC,IAAAC,KACAE,EAAAzL,KAAA0L,KAAAH,EAAA3K,EAGA,QACAN,QAHAN,KAAAkF,OAAAoG,EAAAD,GAAAd,EAAAf,GAIA/I,UAAAgL,EACA7K,eAYAnM,EAAA,4CACA,gBACA,gCACA,SACA+W,EACAG,GAEA,YAEA,iBAAAC,EAAAC,GACA,GAAAC,GAAAN,EAAAI,EAAAC,EACA,OAAAF,GAAAG,MAUArX,EAAA,iDACA,YAEA,iBAAAsX,EAAAxM,GAgBA,OAAgBY,EAHhB4L,EAAA5L,EAAAH,KAAAgF,IAAAzF,GAAAwM,EAAA3L,EAAAJ,KAAA+E,IAAAxF,GAGgBa,EAFhB2L,EAAA5L,GAAAH,KAAA+E,IAAAxF,GAAAwM,EAAA3L,EAAAJ,KAAAgF,IAAAzF,GAEgBc,EADhB0L,EAAA1L,MAWA5L,EAAA,sDACA,YAEA,iBAAAsX,EAAAxM,GAcA,IAZA,GAWAyM,GAXArB,EAAA,SAEAsB,EAAAjM,KAAAC,KAAA8L,EAAA5L,EAAA4L,EAAA5L,EAAA4L,EAAA3L,EAAA2L,EAAA3L,GACAmI,GAAAoC,EAFA,cAEAA,EACAC,EAAA,EAAArC,MACAjJ,EAAAU,KAAAkF,MAAA6G,EAAA3L,EAAA2L,EAAA5L,GAAAZ,EAEA2M,EAAA,EACA9M,EAAAY,KAAAkF,MAAA6G,EAAA1L,EACAL,KAAAC,KAAA8L,EAAA5L,EAAA4L,EAAA5L,EACA4L,EAAA3L,EAAA2L,EAAA3L,IAEA8L,EANA,IAOAF,EAAA,EAAAhM,KAAAC,KAAA,EAAA2K,GAAA5K,KAAA+E,IAAA3F,GAAAY,KAAA+E,IAAA3F,KACAA,EAAAY,KAAAkF,MAAA6G,EAAA1L,EAAAsK,EAAAqB,EAAApB,EAAA5K,KAAA+E,IAAA3F,GAAA6M,GACAC,GAAA,CAGA,QAAgB5M,YAAAF,WAAAd,OADhB2N,EAAAjM,KAAAgF,IAAA5F,GAAAuL,EAAAqB,MAWAvX,EAAA,+BACA,YAEA,iBAAA0X,EAAAnN,EAAAE,GACA,GAAAkN,GAAApM,KAAAC,KACAD,KAAAE,IAAAlB,EAAAmB,EAAAgM,EAAAhM,EAAA,GACAH,KAAAE,IAAAlB,EAAAoB,EAAA+L,EAAA/L,EAAA,GACAJ,KAAAE,IAAAlB,EAAAqB,EAAA8L,EAAA9L,EAAA,IACAgM,GACAlM,EAAAnB,EAAAmB,EAAAjB,EAAAiB,EACAC,EAAApB,EAAAoB,EAAAlB,EAAAkB,EACAC,EAAArB,EAAAqB,EAAAnB,EAAAmB,GAEAiM,EAAAtM,KAAAC,KACAD,KAAAE,IAAAmM,EAAAlM,EAAAgM,EAAAhM,EAAA,GACAH,KAAAE,IAAAmM,EAAAjM,EAAA+L,EAAA/L,EAAA,GACAJ,KAAAE,IAAAmM,EAAAhM,EAAA8L,EAAA9L,EAAA,IACAkM,EAAAD,EAAAF,CASA,OADA,IAFAG,GAJA,SAAA3V,GACA,MAAAA,IAAA,QAGA2V,IACA,cAKA9X,EAAA,kCACA,YAEA,iBAAA+X,EAAAC,GAsCA,GAAAC,IAAA,qCAEAC,EAAA3M,KAAA4M,MAAAH,EAEAD,GAAA,OACAE,GAAA,qCAKA,KAFA,GAAA1X,GAAA,EACA6X,EAAA,EACAF,EAAAE,EAAAH,EAAA1X,EAAA,IAAAA,EAAA,IACA6X,GAAAH,EAAA1X,EAAA,GACAA,GAAA,CAEA,IAAA8X,GAAA9X,EACA+X,EAAAJ,EAAAE,EAGAG,EAAA,IAAAP,EAAAE,GACAM,EAAAjN,KAAA4M,MAAAI,EACAA,GAAA,IAAAA,EAAAC,EACA,IAAAC,GAAAlN,KAAA4M,MAAAI,EAWA,QAPAF,MACAC,MACAE,KACAC,SACAC,IAPA,IAAAH,EAAAE,OAaAzY,EAAA,iBACA,gBACA,SACA8V,GAEA,YAEA,iBAAA6C,GA2BA,GAAAC,IAAAD,EAAA,eACAJ,GAAA,MAAAK,MAAA,QAAAA,IACA,kBAAAA,EAAA,WAOA,OANAL,KAAAzC,EAAAR,QAAA,IAAAQ,EAAAT,MAGAkD,EAAA,IACAA,GAAAzC,EAAAT,OAEAkD,KAGAvY,EAAA,4BACA,YAEA,iBAAA+X,EAAAM,EAAAC,EAAAE,EAAAC,EAAAC,GACA,GAAAX,YAAAxO,MAAA,CACA,GAAAsP,GAAAd,CACAA,GAAAc,EAAAC,iBACAT,EAAAQ,EAAAE,cAAA,EACAT,EAAAO,EAAAG,aACAR,EAAAK,EAAAI,cACAR,EAAAI,EAAAK,gBACAR,EAAAG,EAAAM,gBAGA,WAAApB,EACAxM,KAAA4M,MAAA,GAAAJ,EAAAxM,KAAA4M,OAAAE,EAAA,aACA9M,KAAA4M,MAAA,IAAAE,EAAA,GACAC,EAAA,YACAI,EAAA,GAAAD,GAAA,GAAAD,GAAA,MAYAxY,EAAA,SACA,eACA,SACA8V,GAEA,YAEA,iBAAA7L,EAAAmP,GAuEA,GAYAC,GAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAlBAC,EAAAhC,EAAAgC,KACAC,EAAAjC,EAAAiC,GACAC,EAAAlC,EAAAkC,MACAC,EAAAnC,EAAAmC,MACAC,EAAApC,EAAAoC,MACAC,EAAArC,EAAAqC,GACAC,EAAAtC,EAAAsC,QAiBAC,EAAA1R,EAAA0R,GACAC,EAAA3R,EAAA2R,IACAC,EAAA5R,EAAA4R,IACAC,EAAA7R,EAAA6R,KACAC,EAAA9R,EAAA8R,IACAC,EAAA/R,EAAA+R,MACAC,EAAAhS,EAAAgS,IACAC,EAAAjS,EAAAiS,IACAC,EAAAlS,EAAAkS,IACAC,EAAAnS,EAAAmS,KACAC,EAAApS,EAAAoS,KACAC,EAAArS,EAAAqS,KACAC,EAAAtS,EAAAsS,IACAC,GAAAvS,EAAAuS,IACAC,GAAAxS,EAAAwS,IACAC,GAAAzS,EAAAyS,IACAC,GAAA1S,EAAA0S,IACAC,GAAA3S,EAAA2S,IACAC,GAAA5S,EAAA4S,IACAC,GAAA7S,EAAA6S,EACAC,GAAA9S,EAAA8S,KACAC,GAAA/S,EAAA+S,KACAC,GAAAhT,EAAAgT,KACAC,GAAAjT,EAAAiT,IACAC,GAAAlT,EAAAkT,IACAC,GAAAnT,EAAAmT,IACAC,GAAApT,EAAAoT,IACAC,GAAArT,EAAAqT,IACAC,GAAAtT,EAAAsT,IACAC,GAAAvT,EAAAuT,IACAC,GAAAxT,EAAAwT,KACAC,GAAAzT,EAAAyT,IAmHA,OA1GAxC,GAAAwC,GANA,WAMAZ,GAEA,MAAA1B,IACAF,EAAAwC,IAEAzC,EAAAC,EAAA,MAAA3P,KAAA+E,IAAA4K,GACAP,EAAApP,KAAA+E,IAAA2K,GACAnB,EAAA,GAAAa,IAAA,IACAZ,GAAA,GAAAY,EAAApP,KAAAgF,IAAA0K,GACAX,EAAA4B,EAAApC,EAAAqC,EAAApC,EACAa,EAAA6B,GAAA3C,EAAA4C,GAAA3C,EACAe,EAAA6B,GAAA7C,EAAA8C,GAAA7C,EAAA8C,GAAAlC,EACAH,EAAA4B,EAAAtC,EAAAuC,EAAAtC,EAAAuC,EAAA3B,EACAF,EAAA8B,EAAAzC,EAAA0C,GAAAzC,EACAmB,EAAAuC,GAlBA,aAkBAX,GACA,MAAA1B,IACAF,EAAAuC,IAGAxC,EAAAC,EAAA,MAAA3P,KAAA+E,IAAA4K,GACAP,EAAApP,KAAA+E,IAAA2K,GACAnB,EAAA,GAAAa,IAAA,IACAZ,GAAA,GAAAY,EAAApP,KAAAgF,IAAA0K,GACAZ,EAAAuB,EAAA9B,EAAA6B,EAAA5B,EACAW,EAAA0C,GAAAtD,EAAAuD,GAAAtD,EACAc,EAAAyC,GAAAxD,EAAAyD,GAAAxD,EAAAyD,GAAA7C,EACAJ,EAAAwC,GAAAjD,EAAAkD,GAAAjD,EAAAkD,GAAAtC,EACAQ,EAAA+B,GAAApD,EAAAqD,GAAApD,EACAC,EAAAM,EAAAD,EACAF,EAAAS,EAAAF,EACAN,EAAAU,EAAAD,EACAZ,EAAAO,EAAAD,EACAL,EAAAO,EAAAU,EAEA,MAAAC,IACApB,GAAA6B,EACA1B,GAAA6B,EACA5B,GAAA6B,EACAhC,GAAA6B,EACA5B,GAAA6B,EACAT,GAAAnB,EACAkB,GAAArB,EACAR,EAAAjO,KAAA+E,IAAAgL,GACA/B,EAAAhO,KAAAgF,IAAA+K,GAWAA,GAAA,IACApB,GAAAV,EACAS,GAAAV,EAAAW,EACAsB,GAAAvB,EACAsB,GAAArB,EACAuB,GAAArB,IAIAV,EAAAnO,KAAA+E,IAAAiL,GACA9B,EAAAlO,KAAAgF,IAAAgL,GACAlC,EAAAG,EAAAE,EACAJ,EAAAE,EAAAC,EACAE,EAAAO,EAAAT,EAAAU,EAAAZ,EAAAG,EACAE,GAAAM,EAAAR,EAAAS,EAAAZ,EAAAE,EACAJ,GAAAM,EACAL,GAAAM,EACA2B,GAAAzF,EAAAT,MAGAkG,EAAA,SAAAG,IACAH,GAAAzF,EAAAT,OAEA0F,EAAAU,EAAAD,EAAAjC,EAAAgC,EACA1B,EAAAO,EAAAH,EAAAE,EAAAoB,EAAA/B,EACAuB,GAAAlB,EACAmB,EAAAO,EACAA,EAAAhQ,KAAAkF,MAAA4I,EAAAC,GAGAiC,EAAA,SAAAG,IACAH,GAAAzF,EAAAT,OAEA9J,KAAAoS,IAAA3C,EAAAO,GAAAzF,EAAAf,KACAwG,EAAAP,EACAO,GAAAzF,EAAAT,MAGAkG,GAAAzF,EAAAT,OAGAoG,GAAArB,EACAoB,EAAAT,EAAAU,EAAAlC,EAAAgC,KAIAF,KACAC,QACAC,QACAC,QACAC,SAYAzb,EAAA,UACA,eACA,SACA8V,GAEA,YAEA,iBAAA8H,GA0EA,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEAC,EAAAX,EAAAW,KACAC,EAAAZ,EAAAY,MACAC,EAAAb,EAAAa,MACAC,EAAAd,EAAAc,MACAC,EAAAf,EAAAe,MACAC,EAAAhB,EAAAgB,MACAC,EAAAjB,EAAAiB,MACAC,EAAAlB,EAAAkB,MACAC,EAAAnB,EAAAmB,MACAC,EAAApB,EAAAoB,MACAC,EAAArB,EAAAqB,MACAC,EAAAtB,EAAAsB,KACAC,EAAAvB,EAAAuB,KACAC,EAAAxB,EAAAwB,KACAC,EAAAzB,EAAAyB,KACAC,EAAA1B,EAAA0B,KACAC,EAAA3B,EAAA2B,KACAC,EAAA5B,EAAA4B,MACAC,EAAA7B,EAAA6B,MACAC,EAAA9B,EAAA8B,MACAC,EAAA/B,EAAA+B,QACA7C,EAAAc,EAAAd,EACA8C,EAAAhC,EAAAgC,GACAC,EAAAjC,EAAAiC,KACAC,EAAAlC,EAAAkC,MACAC,EAAAnC,EAAAmC,MACAC,EAAApC,EAAAoC,GACAC,EAAArC,EAAAqC,MACAC,EAAAtC,EAAAsC,GACAC,EAAAvC,EAAAuC,MACAC,EAAAxC,EAAAwC,MACAC,EAAAzC,EAAAyC,IACAC,EAAA1C,EAAA0C,GACAC,EAAA3C,EAAA2C,IACAC,EAAA5C,EAAA4C,MACAC,EAAA7C,EAAA6C,GAMAC,EAAA,UACAC,EAAA,UACAC,EAAA,UACAC,EAAA,SACAC,EAAA,UAOAC,EAAA,CA4BA,IA3BAhD,GAAA8B,EAPA,kBAOAD,GAAA9J,EAAAT,MACA6K,GAAAhB,EAAApC,EAEAsD,GAAAd,EAAAxC,EACAqD,GAAAV,EAAA3C,EACA0D,GAAAhB,EAAA1C,EACAwD,GAAAf,EAAAzC,EAoBAgB,EAAA,EACA,IAAAS,EAAA,EAEA,IAAA0B,GAAAnD,EAAAmD,GAAA,GAAA1U,KAAAoS,IAAAb,GAAAvR,KAAAoS,IAAAsC,MACAA,EAAA,EACAM,EAAAP,EACAK,EAAAN,GAKAlC,EADAf,EAAA,EA1CA,KACA,GAiDA,KAFA,GAAAkE,IAAA,IAEA,MAAAA,IAGA,IAAAzC,GACAF,EAAAc,EAAA5T,KAAA+E,IAAA+P,EA/DA,WA+DAjB,EAAA7T,KAAA+E,IAAA,GAAA+P,EA9DA,YA+DAhB,EAAA9T,KAAA+E,IAAA,GAAA+P,EA9DA,YA+DAlC,EAAAoC,EAAAT,EACA1B,EAAAe,EAAA5T,KAAAgF,IAAA8P,EAlEA,WAmEA,EAAAjB,EAAA7T,KAAAgF,IAAA,GAAA8P,EAlEA,YAmEA,EAAAhB,EAAA9T,KAAAgF,IAAA,GAAA8P,EAlEA,YAmEAjC,GAAAD,IAIAG,EAAAoB,EAAAC,EAAAM,EACAhC,EAAAK,IACAN,EAAAqC,IACAhC,EAAAG,EAAAjT,KAAA+E,IAAA2N,EAAAoC,EAAAK,GAAAjC,EAAAlT,KAAA+E,IAAA+P,EAAAK,GACAhC,EAAAnT,KAAA+E,IAAAgO,EAAA+B,EAAAM,GAAAhC,EAAApT,KAAA+E,KAAAgO,EAAA+B,EAAAM,GACA/B,EAAArT,KAAA+E,IAAA2N,EAAAD,EAAA4C,GAAA/B,EAAAtT,KAAA+E,IAAA0N,EAAA4C,GACA9B,EAAAvT,KAAA+E,IAAAgO,EAAA+B,EAAAQ,GAAA9B,EAAAxT,KAAA+E,KAAAgO,EAAA+B,EAAAQ,GACA7B,EAAAzT,KAAA+E,IAAAgO,EAAAN,EAAA8C,GAAA7B,EAAA1T,KAAA+E,KAAAgO,EAAAN,EAAA8C,GACA3C,EAAAoC,EAAAT,EACA1B,EAAAI,EAAAjT,KAAAgF,IAAA0N,EAAAoC,EAAAK,GAAAjC,EAAAlT,KAAAgF,IAAA8P,EAAAK,GACAhC,EAAAnT,KAAAgF,IAAA+N,EAAA+B,EAAAM,GAAAhC,EAAApT,KAAAgF,KAAA+N,EAAA+B,EAAAM,GACA7B,EAAAvT,KAAAgF,IAAA+N,EAAA+B,EAAAQ,GAAA9B,EAAAxT,KAAAgF,KAAA+N,EAAA+B,EAAAQ,GACA,GAAAjC,EAAArT,KAAAgF,IAAA0N,EAAAD,EAAA4C,GACA/B,EAAAtT,KAAAgF,IAAAyN,EAAA4C,GAAA5B,EAAAzT,KAAAgF,IAAA+N,EAAAN,EAAA8C,GACA7B,EAAA1T,KAAAgF,KAAA+N,EAAAN,EAAA8C,IACA1C,GAAAD,GAIA5S,KAAAoS,IAAAb,EAAAmD,IAnFA,IAqFAe,GAAA,KAGAlD,EAAAhB,EAAAmD,EACAe,GAAA,GAEA,MAAAA,KACAX,IAAAlC,EAAAN,EA1FA,OA0FAQ,EACAkC,IAAAlC,EAAAR,EA3FA,OA2FAO,EACA6B,GAAApC,EAGA4C,GAAAF,EAAAlC,EAAAP,EAAAM,EAAAN,IAAA,GACAI,EAAAmC,EAAAlC,EAAAL,EAAAO,EAAAP,IAAA,GACA,IAAAS,GACA+B,EAAApC,EAAA,EAAAsC,EAAA,EAAAzC,EACAgD,EAAAN,EAAAT,IAGAM,EAAApC,EAAAsC,EAAAL,EAAApC,EACAgD,EAAAN,EAAAT,GAEAS,EAAAT,EAAAe,EAcA,OAXAd,QACAC,KACAC,QACAC,QACAC,MACAC,KACAC,MACAC,QACAO,OACAN,SAYAzgB,EAAA,QACA,cACA,UACA,YACA,SACA8V,EACAmL,EACAC,GAEA,YAEA,iBAAAjX,EAAAkX,GAwFA,GAAAC,GAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1I,EAAAC,EACA0I,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EACA1C,EAAA3E,EAAApB,EACA0I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAA3D,EACA4D,EAAAjL,EAAAkL,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GACAhE,GAAAE,GAAAG,GAAAD,GACA6D,GAAAC,GAAApG,GAAAqG,GAAA9I,GAAA+I,GAAAC,GAAAC,GACAC,GAAAC,GAAArJ,GAKAsJ,GAAA,EASAC,GAAAhP,EAAAZ,YAAAY,EAAAb,IAAA,EAGAhL,GAAA6S,EAAAqE,EACAlX,EAAAI,MAAA,EAGAma,GAAAva,EAAA8a,GAAA9a,EAAA+a,KAAA/a,EAAA6S,CACA,IAAAmI,IAAAhb,EAAAyV,MAAAzV,EAAA0V,QAAA1V,EAAA6S,CAUA,IATA6H,GAAA1a,EAAAib,MAAAjb,EAAAkb,QAAAlb,EAAA6S,EACAqD,EAAA8E,GACA3E,GAAAkE,GACAnB,EAAApZ,EAAA6S,EAAA7S,EAAA6S,EACA0D,GAAAmE,GAAA1a,EAAAmb,OAAA/B,EACAM,EAAA,EAAA1Z,EAAAob,IAAApb,EAAA6S,EACA8G,EAAA3Z,EAAAqb,MAAArb,EAAAsb,IAAAtb,EAAA6S,EACA+G,EAAA5Z,EAAAub,MAAAnC,EAEA,IAAApZ,EAAAwb,MAAA,CACAjD,EAAAvY,EAAAyb,OAAAzb,EAAA6S,CAEA,IAAA6I,IAAA,EAAA1b,EAAA2b,IAAAra,KAAAgF,IAAAiU,GACAjC,GAAAtY,EAAA4b,OACAF,SACA1b,EAAA6b,OACAvN,EAAAiK,EAAAD,EACAjC,GAAAkE,GAAAjM,EACA4H,EAAA8E,GAAA1M,EACA+K,EAAAD,EAAApZ,EAAA6S,EACAyG,EAAAD,EAAArZ,EAAA6S,EACA6G,IAAA1Z,EAAA8b,GAAA1C,EAAApZ,EAAA+b,GAAA1C,EACArZ,EAAAgc,GAAA1C,EACAK,GAAA3Z,EAAAqb,MAAArb,EAAAic,KAAA3a,KAAA+E,IAAAgQ,IACArW,EAAAkc,QACAtC,IAAA5Z,EAAAmc,MAAA9C,EAAAC,GAAAtZ,EAAAoc,MACApc,EAAA6S,EAAA7S,EAAAqc,OAEA7F,GAAAxW,EAAA+V,EACA,IAAAE,IAAAjW,EAAAsc,IAEA,IADAnG,GAAAnW,EAAAuc,MACA,MAAAvc,EAAAwc,OAAA,CACA7G,EAAA3V,EAAA6S,CAEA,IAAAc,KACAW,KAAAtU,EAAAsU,KACAC,MAAAvU,EAAAuU,MACAC,MAAAxU,EAAAwU,MACAC,MAAAzU,EAAAyU,MACAC,MAAA1U,EAAA0U,MACAC,MAAA3U,EAAA2U,MACAC,MAAA5U,EAAA4U,MACAC,MAAA7U,EAAA6U,MACAC,MAAA9U,EAAA8U,MACAC,MAAA/U,EAAA+U,MACAC,MAAAhV,EAAAgV,MACAC,KAAAjV,EAAAiV,KACAC,KAAAlV,EAAAkV,KACAC,KAAAnV,EAAAmV,KACAC,KAAApV,EAAAoV,KACAC,KAAArV,EAAAqV,KACAC,KAAAtV,EAAAsV,KACAC,MAAAvV,EAAAuV,MACAC,MAAAxV,EAAAwV,MACAC,MAAAzV,EAAAyV,MACAC,QAAA1V,EAAA0V,QACA7C,EAAA7S,EAAA6S,EACA8C,KACAC,KAAA5V,EAAA4V,KACAC,MAAA7V,EAAA6V,MACAC,MAAA9V,EAAA8V,MACAC,GAAA/V,EAAA+V,GACAC,MAAAhW,EAAAgW,MACAC,MACAC,QACAC,SACAC,IAAApW,EAAAoW,IACAC,MACAC,IAAAtW,EAAAsW,IACAC,SACAC,OAGAiG,GAAAxF,EAAAtD,GAKAsC,IAAAwG,GAAAxG,GACAC,EAAAuG,GAAAvG,MACAC,GAAAsG,GAAAtG,MAKAE,GAAAoG,GAAApG,GAKAE,GAAAkG,GAAAlG,MACAkG,GAAA3F,KACAN,GAAAiG,GAAAjG,GAGA,GAAAA,IAAA,EAIA,MAFAxW,GAAAI,MAAA,IAEA,KAQA,IANA+W,EAAA7V,KAAAE,IAAAqK,EAAAb,IAAAwL,GAAA3K,EAAAD,MAAA8N,IACAlD,GAAA3K,EAAAb,IAAA1J,KAAAE,IAAA2V,EAAA,MACAlB,IAAA0D,IAIA,GAAA1D,IAAA,KAIA,MAFAjW,GAAAI,MAAA,IAEA,KAGA6V,IAAA,OACAA,GAAA,MAEAI,IAAArW,EAAA+V,GAAA6D,EACAU,GAAAjE,GAAAH,EAAAK,GACAiC,EAAAvC,MACA3H,EAAA,EAAAkK,EAEAjC,IAAA1K,EAAAT,MACA8K,GAAArK,EAAAT,MACAkP,IAAAzO,EAAAT,MACAiL,IAAAiE,GAAApE,EAAAK,IAAA1K,EAAAT,MAGAoM,EAAAlW,KAAA+E,IAAA8P,IACAoB,EAAAjW,KAAAgF,IAAA6P,GAGA,IAAA/E,IAAA6E,EAOA,IANAoE,GAAAlE,GACA5E,EAAA2E,EACA5E,GAAAiF,GACA/E,GAAA6E,GACA9G,EAAAiI,EACAlI,EAAAiI,EACA,MAAAvX,EAAAwc,OAAA,CAEA,GAAArN,KACAoN,MAAAvc,EAAAuc,MACApL,KAAA,IACAC,MACAC,MAAAgJ,GACA/I,SACAC,QACAC,MACAC,QAAAzR,EAAA0c,cAGAC,GAAA3F,EAAAhX,EAAAmP,GAYA,IAXAiC,GAAAuL,GAAAvL,GACAiJ,GAAAsC,GAAAtL,MACAC,GAAAqL,GAAArL,MACAC,EAAAoL,GAAApL,MACAC,GAAAmL,GAAAnL,GAEA6I,GAAA,IACAA,OACA/I,IAAAzF,EAAAf,GACAyG,GAAA1F,EAAAf,IAEAsG,GAAA,GAAAA,GAAA,EAIA,MAFApR,GAAAI,MAAA,IAEA,MAIA,MAAAJ,EAAAwc,SACAjN,EAAAjO,KAAA+E,IAAAgU,IACA/K,EAAAhO,KAAAgF,IAAA+T,IACAra,EAAA4c,OAAA,GAAA/Q,EAAAF,MAAA4D,EAEAjO,KAAAoS,IAAApE,EAAA,WACAtP,EAAA6c,OAAA,IAAAhR,EAAAF,MAAA4D,GAAA,IAAAD,IAAA,EAAAA,GAGAtP,EAAA6c,OAAA,IAAAhR,EAAAF,MAAA4D,GAAA,IAAAD,GAhMA,SAmMA8H,EAAAhG,GAAA9P,KAAAgF,IAAAiL,GACAjD,EAAA,GAAA6I,GAAA,EAAA/F,QACAiG,EAAAjG,GAAA9P,KAAA+E,IAAAkL,GAAAjD,EAAAtO,EAAA4c,MACA3I,GAAAzC,GAAAD,EAAAD,GAAAhD,EAAAtO,EAAA6c,MAAAzF,EAGAyC,IAAA5F,GAAA3C,IAAAzF,EAAAT,MACAuN,EAAAkB,GACAN,EAAA,MAIA,KAHA,GAAAuD,IAAA,EAGAxb,KAAAoS,IAAA6F,IAAA,OAAAuD,IAAA,IACAhF,EAAAxW,KAAA+E,IAAAsS,GACAd,EAAAvW,KAAAgF,IAAAqS,GACAY,EAAA,EAAA1B,EAAAT,EAAAU,EAAAT,EACAkC,GAAAM,GAAAxC,EAAAQ,EAAAT,EAAAU,EAAAa,GAAAY,EACAjY,KAAAoS,IAAA6F,IAAA,MAEAA,EADAA,EAAA,EACA,KAGA,KAGAZ,GAAAY,EACAuD,IAAA,CAOA,IAJArE,EAAArB,EAAAS,EAAAR,EAAAS,EACAc,EAAAxB,EAAAU,EAAAT,EAAAQ,EACAa,EAAAtB,IAAAC,KACAlH,EAAAgH,GAAA,EAAAuB,IACA,EAKA,MAFA1Y,GAAAI,MAAA,IAEA,KAGA4Y,GAAA7B,GAAA,EAAAsB,GACAM,EAAAzX,KAAAC,KAAA4V,GAAAyB,EAAAI,EACAE,EAAA5X,KAAAC,KAAA4O,GAAA6I,EACA1B,EAAAhW,KAAAC,KAAA,EAAAmX,GACApK,EAAAsK,GAAA,EAAAtB,GACAe,EAAAlB,EAAA6B,GAAAlB,EAAAT,EAAAD,EAAA9I,GACA8J,EAAAjB,EAAA6B,GAAAnB,EAAAT,EAAAC,EAAA/I,GACA6K,EAAA7X,KAAAkF,MAAA6R,EAAAD,GACAR,GAAAQ,KAAAC,EACAV,EAAA,IAAAU,IACA/J,EAAA,EAAA6B,EACAqJ,EAAA,GAAA3N,EAAAX,GAAAoD,EACAmL,EAAAD,EAAAlL,EAGA,MAAAtO,EAAAwc,SACAvE,EAAA3I,IACAtP,EAAA+c,MAAA,EAAA9E,EAAA,EACAjY,EAAAgd,OAAA,EAAA/E,EACAjY,EAAAid,OAAA,EAAAhF,EAAA,GAEA2C,GAAA5B,GAAA,MAAAS,EAAAnC,EAAAtX,EAAA+c,OACA,GAAAvD,EAAAxZ,EAAAgd,OAAArF,EACAwB,GAAA,IAAAM,EAAAzZ,EAAAid,OAAArF,EACA+C,GAAArJ,GAAA,IAAAmI,EAAAnK,EAAAsI,EACAwC,GAAAC,GAAA,IAAAZ,EAAAnK,EAAAC,EAAAoI,CACA,IAAAuF,IAAAnE,EAAAvC,GAAAgD,EAAAxZ,EAAAgd,OAAApF,EAAA/L,EAAAb,GA+BA,OA9BAiO,GAAAC,EAAA1C,GAAAgD,GAAAxZ,EAAAgd,OAAArF,EACA,IAAA3X,EAAA+c,OAAAlR,EAAAb,IAGAmN,EAAA7W,KAAA+E,IAAA8S,GACAjB,EAAA5W,KAAAgF,IAAA6S,GACAzB,EAAApW,KAAA+E,IAAAsU,IACAlD,EAAAnW,KAAAgF,IAAAqU,IACA3C,EAAA1W,KAAA+E,IAAA+T,IACArC,EAAAzW,KAAAgF,IAAA8T,IACAI,IAAA9C,EAAAK,EACA0C,GAAAhD,EAAAM,EACA+B,GAAAU,GAAArC,EAAAV,EAAAS,EACA6B,GAAAU,GAAAtC,EAAAT,EAAAQ,EACA8B,GAAAhC,EAAAG,EACA8B,GAAAO,GAAAtC,EAAAT,EAAAU,EACA+B,GAAAO,GAAAvC,EAAAR,EAAAS,EACAgC,GAAAnC,EAAAE,EAGAW,GAAiBpX,EAAA,EAAAC,EAAA,EAAAC,EAAA,GACjBkX,EAAApX,EAAAmZ,GAAAd,GAAAjO,EAAAZ,YACA4N,EAAAnX,EAAAkZ,GAAAb,GAAAlO,EAAAZ,YACA4N,EAAAlX,EAAAiZ,GAAAZ,GAAAnO,EAAAZ,YACA6N,GAAiBrX,EAAA,EAAAC,EAAA,EAAAC,EAAA,GACjBmX,EAAArX,GAAAyb,GAAApD,GAAAb,EAAAgB,IAAAY,GACA/B,EAAApX,GAAAwb,GAAAnD,GAAAd,EAAAiB,IAAAW,GACA/B,EAAAnX,GAAAub,GAAAlD,GAAAf,EAAAkB,IAAAU,GAGAD,GAAA,GAEA5a,EAAAI,MAAA,GACoBE,UAAA,EAAAE,UAAA,KAEJF,SAAAuY,EAAArY,SAAAsY,MAUhB/iB,EAAA,uBACA,eACA,iBACA,WACA,SACA8V,EACAsR,EACAC,GAEA,YAEA,mBAEA,GAAApd,GAAAoC,UAAA,GACAwM,EAAAxT,MAAA5D,UAAAyQ,MAAAzR,KAAA4L,UAAA,GACAuF,EAAAwV,EAAAllB,MAAA,KAAA2W,GACAnY,GAAAkR,EAAA3H,EAAAqd,YAAAxR,EAAAN,aACA,OAAA6R,GAAApd,EAAAvJ,MAUAV,EAAA,SACA,eACA,SACA8V,GAEA,YAEA,iBAAAyR,GAqEA,GAwCAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAEAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EACAC,EAAAC,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GACAC,GAAAC,GAAAC,GA1DAC,GAAA7E,EAAA6E,MACA/Q,GAAAkM,EAAAlM,GACAG,GAAA+L,EAAA/L,MACAoE,GAAA2H,EAAA3H,GACAtE,GAAAiM,EAAAjM,MACAC,GAAAgM,EAAAhM,MACA8Q,GAAA9E,EAAA8E,GACA1Q,GAAA4L,EAAA5L,GACAC,GAAA2L,EAAA3L,IACAC,GAAA0L,EAAA1L,IACAC,GAAAyL,EAAAzL,KACAC,GAAAwL,EAAAxL,IACAC,GAAAuL,EAAAvL,MACAC,GAAAsL,EAAAtL,IACAC,GAAAqL,EAAArL,IACAC,GAAAoL,EAAApL,IACAC,GAAAmL,EAAAnL,KACAC,GAAAkL,EAAAlL,KACAC,GAAAiL,EAAAjL,KACAC,GAAAgL,EAAAhL,IACAC,GAAA+K,EAAA/K,IACAC,GAAA8K,EAAA9K,IACAC,GAAA6K,EAAA7K,IACAC,GAAA4K,EAAA5K,IACAC,GAAA2K,EAAA3K,IACAC,GAAA0K,EAAA1K,IACAE,GAAAwK,EAAAxK,KACAC,GAAAuK,EAAAvK,KACAC,GAAAsK,EAAAtK,KACAC,GAAAqK,EAAArK,IACAC,GAAAoK,EAAApK,IACAC,GAAAmK,EAAAnK,IACAC,GAAAkK,EAAAlK,IACAC,GAAAiK,EAAAjK,IACAC,GAAAgK,EAAAhK,IACAC,GAAA+J,EAAA/J,IACAC,GAAA8J,EAAA9J,KACAC,GAAA6J,EAAA7J,KAiCA+C,GAAA4L,GACAnM,GAAA7E,GACAiR,GAAA/gB,KAAA+E,IAAAiL,IACAgR,GAAAhhB,KAAAgF,IAAAgL,IACAiR,GAAAjhB,KAAA+E,IAAAkL,IACAiR,GAAAlhB,KAAAgF,IAAAiL,IACAiG,GAAAlW,KAAA+E,IAAAgL,IACAkG,GAAAjW,KAAAgF,IAAA+K,IACAmH,GAAAvC,KACAgI,GAAA,EAAAzF,EACA,IAAAiK,IAAAnhB,KAAAC,KAAA0c,EAGArM,IAAA,EACAG,GAAA,EACAC,GAAA,EACAH,GAAA,EACAC,GAAA,CACA,IAAAzD,IAAA8T,GAAA,QAAAxM,GAAA,IACAkJ,IAAA,sBAAAxQ,IAAAxC,EAAAT,MACAgT,EAAA9c,KAAA+E,IAAAwY,GACAV,EAAA7c,KAAAgF,IAAAuY,GACAY,EAAA,oBAAAtB,EACAuB,EAAApe,KAAAC,KAAA,EAAAke,KACAH,EAAA,WAAAlB,EAAAsB,EACAL,EAAA/d,KAAAC,KAAA,EAAA+d,IACA,IAAAoD,IAAA,qBAAArU,EACAsR,GAAA,UAAAvB,EAAAsB,EACAE,EAAAP,EAAAlB,EAAA,UAAAmB,EAAAlB,EACAuB,EAAAre,KAAAkF,MAAAmZ,EAAAC,GACAD,EAAA+C,GAAA/C,EAAAd,EACAI,EAAA3d,KAAAgF,IAAAqZ,GACAT,EAAA5d,KAAA+E,IAAAsZ,GAGAZ,EAtCA,SAuCAC,GAtCA,UAuCAO,EAzCA,UA0CAC,EA3CA,UA4CAL,EAAAmD,GACAlD,EAAAiD,GACAnE,EAhDA,aAiDAY,EAAA,EAAAtI,EAGA,KADA,GAAAmM,IAAA,EACAA,GAAA,GACAA,IAAA,EACApF,EAAAwB,EAAAI,EAAAH,EAAAO,EAAAH,EACA3B,GAAAuB,EAAAG,EAAAJ,EAAAQ,EAAAH,EACAvB,GAAAkB,EAAAK,EAAAJ,EAAAO,EAAAJ,EACArB,EAAAkB,EAAAQ,EACAzB,EAAAiB,EAAAI,EAAAL,EAAAQ,EAAAJ,EACAnB,EAAAe,EAAAS,EACAhC,EAAAjG,GAAAsG,EAAArG,GAAAsG,EACAJ,EAAAnG,GAAAwG,EAAAvG,GAAAwG,EACAL,GAAAnG,GAAAqG,EAAAtG,GAAAuG,EACAF,GAAApG,GAAAuG,EAAAxG,GAAAyG,EAEAK,EAAAd,EAAAiF,GAAAhF,EAAA+E,GACAjE,EAAAb,EAAA+E,GAAA9E,EAAA6E,GACAhE,GAAAhB,EAAAgF,GAAA/E,EAAAgF,GACAhE,GAAAf,EAAA8E,GAAA7E,EAAA8E,GACA/D,EAAAd,EAAA4E,GACA7D,EAAAd,EAAA2E,GACA5D,EAAAhB,EAAA6E,GACA5D,EAAAhB,EAAA4E,GAEAR,GAAA,GAAA3D,IAAA,EAAAE,IACA0D,GAAA,GAAA5D,EAAAC,EAAA,EAAAC,EAAAC,EACA0D,GAAA,GAAA5D,IAAA,EAAAE,IACA+C,GAAA,GAAAhE,IAAAC,KAAAwE,GAAAxJ,GACAgJ,GAAA,GAAAjE,EAAAE,EAAAD,EAAAE,GAAAuE,GAAAzJ,GACAiJ,GAAA,GAAAhE,IAAAC,KAAAwE,GAAA1J,GACAkJ,IAAA,EAAAnE,EAAAI,EAAAnF,KACA,GAAA6F,EAAAM,EAAA,EAAAJ,EAAAE,GACAkD,IAAA,GAAApE,EAAAK,EAAAH,EAAAE,GAAAnF,KACA,IAAA8F,EAAAK,EAAAN,EAAAO,IACA,GAAAL,EAAAG,EAAAF,EAAAC,IACAmD,IAAA,EAAAnE,EAAAG,EAAApF,KACA,GAAA8F,EAAAM,EAAA,EAAAJ,EAAAE,GACAmD,GAAA,EAAArE,EAAAG,EAAAnF,IACA,GAAA6F,EAAAI,EAAA,EAAAF,EAAAI,GACAmD,GAAA,GAAApE,EAAAC,EAAAH,EAAAI,GAAApF,IACA,IAAA8F,EAAAG,EAAAJ,EAAAK,GACA,GAAAF,EAAAG,EAAAJ,EAAAK,IACAmD,GAAA,EAAArE,EAAAE,EAAApF,IACA,GAAA8F,EAAAI,EAAA,EAAAF,EAAAI,GACA2C,SAAAtD,EAAA+D,GACAR,SAAAvD,EAAAgE,GACAR,SAAAxD,EAAAiE,GACAhB,GAAAhD,EAAAY,EACAmC,IAAA,GAAAC,GAAAuB,GACAtB,GAAAD,GAAAuB,GACAzB,IAAA,GAAA/K,GAAAkL,GACAC,GAAA/C,EAAAE,EAAAD,EAAAE,EACA6C,GAAA/C,EAAAC,EAAAF,EAAAG,EACA8C,GAAAhD,EAAAE,EAAAH,EAAAE,EAGA,IAAAoE,KACA9C,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,EAAAmB,GACAlB,GAAAmB,GACAlB,GAAAmB,GACAlB,GAAAmB,GACAlB,GAAAmB,GACAlB,GAAAmB,GACAnD,EAAAE,EACAD,EAAAE,EACAK,EAAAE,EACAD,EAAAE,EACAP,EAAAE,EAAAiD,GAAAhD,EAAA+C,GACAjD,EAAAiD,GAAAhD,EAAAiD,GAAAhD,EACApB,EAnIA,aAwQA,OAlIA1K,KAAA,mBAAAnF,GAAAqU,IAAA7W,EAAAT,MACAqI,IAAA,qBAAApF,IAAAxC,EAAAT,MAGA6G,GAAA,EAAA4N,EAAAK,EACAhO,GAAA,EAAA2N,EAAAM,EACA3N,GAAA,EAAAsN,EAAAU,EACA/N,GAAA,EAAAqN,GAAAW,EAAAF,GACA7N,IAAA,EAAAqN,EAAAM,EACA1N,IAAA,EAAAoN,GAAAO,EAAAF,GACAxN,IAAA,EAAAmN,IAAA,KAAAvH,IAnJA,OAoJArG,GAAA,EAAA6N,EAAAc,GACA1O,GAAA,EAAA4N,GAAAe,GAAAF,IACAxO,IAAA,GAAA2N,EAtJA,OAuJA1N,IAAA,EAAAwN,EAAAa,GACApO,IAAA,EAAAuN,GAAAc,GAAAF,GAGA/O,GAAA,EAAAqP,GAAAK,GACA3P,GAAA,EAAAsP,GAAAM,GACAnO,GAAA,EAAA8N,GAAAU,GACAvO,GAAA,EAAA6N,IAAAW,GAAAF,IACArO,IAAA,EAAA6N,GAAAM,GACAlO,IAAA,EAAA4N,IAAAO,GAAAF,IACAhO,IAAA,EAAA2N,KAAA,KAAA1I,IAhKA,MAiKA1F,GAAA,EAAAqO,GAAAc,GACAlP,GAAA,EAAAoO,IAAAe,GAAAF,IACAhP,IAAA,GAAAmO,GAnKA,MAoKAlO,IAAA,EAAAgO,GAAAa,GACA5O,IAAA,EAAA+N,IAAAc,GAAAF,KAGAQ,SACAC,SACA9K,SACAD,SACAgL,UAEAC,UACAnU,OACAqD,MACAC,OACAsE,MAEAuC,QACAkK,OACA9Q,OACAC,QACAC,OAEAC,SACAC,OACAyQ,UACAxQ,OACAC,OAEAC,QACAC,QACAC,QACAC,OACAC,OAEAC,OACAC,OACAC,OACAC,OACAC,OAEAoO,MACAC,MACAC,MACAC,MACAC,MAEAC,MACAC,MACAzB,MACAC,MACAC,MAEAC,MACAC,MACAC,MACAC,MACAC,MAEAC,MACAC,MACAC,OACAC,OACAC,OAEAC,OACAC,QACAC,QACAC,QACAC,QAEAC,QACAjO,QACAC,QACAC,QACAC,OAEAC,OACAC,OACAC,OACAC,OACAC,OAEAC,OACAiD,MACA+K,MACAC,MACAC,MAEAC,OACAC,OACAC,OACAC,OACAC,OAEAC,OACAC,OACAC,OACAC,OACA1O,QAEAC,YAYA1d,EAAA,UACA,eACA,SACA8V,GAEA,YAEA,iBAAA+W,GAiFA,GAsFAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAA/V,EAAAkL,EAAA1F,EAAAwQ,EACAC,EAAAC,EAAAvM,EAAAwM,EAzFAlN,EAAAqL,EAAArL,MACAiB,EAAAoK,EAAApK,KACA/C,EAAAmN,EAAAnN,MAEAuL,EAAA4B,EAAA5B,GACAC,EAAA2B,EAAA3B,GACAC,EAAA0B,EAAA1B,GACAC,EAAAyB,EAAAzB,GACAC,EAAAwB,EAAAxB,GACA5J,EAAAoL,EAAApL,MAEAqI,EAAA+C,EAAA/C,IACAC,EAAA8C,EAAA9C,IACAC,EAAA6C,EAAA7C,IACAC,EAAA4C,EAAA5C,IACAC,EAAA2C,EAAA3C,IAEAG,EAAAwC,EAAAxC,IACAE,EAAAsC,EAAAtC,IACAC,EAAAqC,EAAArC,KACAE,EAAAmC,EAAAnC,KACAC,EAAAkC,EAAAlC,KACAE,GAAAgC,EAAAhC,KACAC,GAAA+B,EAAA/B,KACAE,GAAA6B,EAAA7B,KAEAlO,GAAA+P,EAAA/P,EACA8C,GAAAiN,EAAAjN,GACAC,GAAAgN,EAAAhN,KAEAkF,GAAA8H,EAAA9H,GACAC,GAAA6H,EAAA7H,KACAhF,GAAA6M,EAAA7M,GACAkF,GAAA2H,EAAA3H,MACAC,GAAA0H,EAAA1H,QAEAwJ,GAAA9B,EAAA8B,OAEAnD,GAAAqB,EAAArB,GACAE,GAAAmB,EAAAnB,GACAC,GAAAkB,EAAAlB,IACAE,GAAAgB,EAAAhB,IACAC,GAAAe,EAAAf,IACAE,GAAAa,EAAAb,IACAC,GAAAY,EAAAZ,IACAE,GAAAU,EAAAV,IAEA5F,GAAAsG,EAAAtG,KACAqI,GAAA/B,EAAA+B,MACA1O,GAAA2M,EAAA3M,GAEAC,GAAA0M,EAAA1M,MACAC,GAAAyM,EAAAzM,MACAE,GAAAuM,EAAAvM,GACAG,GAAAoM,EAAApM,GACAD,GAAAqM,EAAArM,MACAjC,GAAAsO,EAAAtO,KACA0B,GAAA4M,EAAA5M,MAEAzB,GAAAqO,EAAArO,MACAC,GAAAoO,EAAApO,MACAC,GAAAmO,EAAAnO,MACAC,GAAAkO,EAAAlO,MACAC,GAAAiO,EAAAjO,MACAC,GAAAgO,EAAAhO,MAEAC,GAAA+N,EAAA/N,MACAC,GAAA8N,EAAA9N,MACAC,GAAA6N,EAAA7N,MACAC,GAAA4N,EAAA5N,MAEAC,GAAA2N,EAAA3N,KACAI,GAAAuN,EAAAvN,KACAC,GAAAsN,EAAAtN,KACAC,GAAAqN,EAAArN,MACAC,GAAAoN,EAAApN,MAEAN,GAAA0N,EAAA1N,KACAC,GAAAyN,EAAAzN,KACAC,GAAAwN,EAAAxN,KAEAS,GAAA+M,EAAA/M,MACAC,GAAA8M,EAAA9M,MACAM,GAAAwM,EAAAxM,IACAE,GAAAsM,EAAAtM,IAaAsO,GAAA,kBAIAC,GAAA,aACAC,GAAA,UAIAxQ,IAAA,EACA,YAAAkC,GAAA,cACAlC,GAAA,GAEA,QAAAkC,IAAA,QAAAP,IAAA,KACA3B,GAAA,EAIA,IAAAjE,IAAAwP,EAAAiF,GAAA7E,EACAtP,GAAAmP,EAAAgF,IAAAvE,EAAAE,GACA5P,IAAAiU,GAAA/E,GAAAK,EAAAE,EAAA,KAAA9H,GACAjI,GAAAyP,EAAA8E,IAAAjE,GAAAE,GAAA,GACAvQ,IAAAsU,GAAAhF,GAAAY,EAAAE,KAGAzK,GAAA,YAAAA,GAAAtK,EAAAf,GAAA,cACA0F,GAAA,GAEA,IAAAgH,IACAhH,IAAAgH,EAEA,IAAAuN,IAAAxU,GAAAgH,EAAA/G,EAGAyE,IAAA5E,GAAA2Q,EAAA6D,GAAAzD,EACA/L,GAAA1E,GAAAsQ,EAAA4D,IAAAnD,GAAAE,IACAtM,GAAAzE,GAAAgU,GAAA3D,GAAAK,GAAAE,GAAA,KAAAjJ,EACA,IAAAlI,IAAA6Q,EAAA0D,IAAA7C,GAAAE,GAAA,GACAhR,IAAA2T,GAAA5D,GAAAY,GAAAE,GAiCA,KA/BA5L,GAAA,YAAAA,GAAAtK,EAAAf,GAAA,cACAoG,GAAA,GAEAsE,GAAAuP,GAAAzU,GACAiF,GAAA/E,GACA,IAAAgH,IACAhC,IAAA+B,EAAAC,EAAAtG,GACAqE,IAAArE,GAAAsG,GAMA1D,GAAA8B,GAAAD,GAAAiP,IAAA/Y,EAAAT,MACA6K,IAAAhB,GAAApC,GACAsD,IAAAd,GAAAxC,GACAqD,IAAAV,GAAA3C,GACA0D,IAAAhB,GAAA1C,GACAwD,IAAAf,GAAAzC,GAaA,IAAAyB,GAAA,CAGA,GAFAkQ,EAAAljB,KAAAE,IAAAgV,GAAA3K,EAAAb,IArEA,KAuEA,IAAAsJ,GAAA,CACA2D,EAAAV,GACA,IAAAyN,IAAA/O,EACAA,IAAAqG,EACA,IAAA2I,IAAAzM,CACAA,GAAAmM,GACAF,EAAAxO,GAAAuC,EACAkL,GAAA,UAAAzN,GAAA,KAEAA,IAAA,KACA0N,EAAA,aAAA1N,GAAA,MAAAuC,EACAqL,EAAA,OAAA5N,GAAA,eAAAuC,EAAA,QAAAiM,EACAX,EAAA,SAAA7N,GAAA,iBAAAuC,EAAA,SAAAiM,EACAV,EAAA,QAAA9N,GAAA,eAAAuC,EAAA,QAAAiM,EACAT,EAAA,OAAA/N,GAAA,iBAAAuC,EAAA,SAAAiM,EACAR,EAAA,SAAAhO,GAAA,iBAAAuC,EAAA,SAAAiM,IAGAd,EAAA,QAAA1N,GAAA,eAAAuC,EAAA,QAAAiM,EACAZ,EAAA,SAAA5N,GAAA,iBAAAuC,EAAA,SAAAiM,EACAX,EAAA,SAAA7N,GAAA,iBAAAuC,EAAA,SAAAiM,EACAV,EAAA,SAAA9N,GAAA,kBAAAuC,EAAA,SAAAiM,EACAT,EAAA,SAAA/N,GAAA,iBAAAuC,EAAA,SAAAiM,EAEAR,EADAhO,GAAA,KACA,SAAAA,GAAA,iBAAAuC,EAAA,SAAAiM,EAGA,gBAAAxO,GAAA,QAAAuC,GAGAvC,GAAA,IACAmO,EAAA,QAAAnO,GAAA,iBAAAuC,EAAA,QAAAiM,EACAP,EAAA,UAAAjO,GAAA,oBAAAuC,EAAA,SAAAiM,EACAN,EAAA,QAAAlO,GAAA,gBAAAuC,EAAA,OAAAiM,IAGAL,EAAA,UAAAnO,GAAA,kBAAAuC,EAAA,UAAAiM,EACAP,EAAA,UAAAjO,GAAA,oBAAAuC,EAAA,UAAAiM,EACAN,EAAA,UAAAlO,GAAA,mBAAAuC,EAAA,UAAAiM,GAEAJ,EAAA7M,IACAqL,EAAA,SAAAtL,EAAAU,GACA6K,EAAA,IAAAuB,EACArB,EAAA,MAAAxL,GAAA,IAAAD,EAAA,EAAAU,GACAgL,GAAA,MAAAzL,GAAA,IAAAD,EAAA,EAAAU,GACAkL,EAAA,GAAAkB,EAAAxB,EACAO,EAAA,OAAAiB,IACAhB,EAAA,QAAA7L,GAAA6M,GAAA,IAAA9M,EAAA,EAAAU,GACA,aAAAV,EAAA,IAAAU,IACAqL,EAAA9L,GAAA,WAAA6M,IAAA,IAAA9M,EACA,GAAAU,GAAA,gBAAAV,EAAA,EAAAU,IACAsL,EAAA,SAAA/L,GAAA,IAAAD,EAAAU,GACA,EAAAV,EAAA,MAAAU,IACAuL,EAAA,SAAAhM,IAAA,IAAAD,EAAAU,GACA,KAAAV,EAAA,GAAAU,IAEAqM,EAAA9N,MACA+N,EAAAC,IACAhL,EAAA,EAAA8K,EAAAC,EACAjW,EAxIA,aAwIAkL,EACAjF,GAAAjG,EAAAuU,EAAAa,EACAlP,GAAAlG,EAAAwU,EAAAa,EACAnK,GAAAgL,EACAlW,EAxIA,aAwIAkL,EACA/E,GAAAnG,EAAA0U,EAAAa,EACAnP,GAAApG,EAAA2U,EAAAa,EACAtK,GAAAgL,EACAlW,EAAA,EAAAkL,EA/IA,aAgJA7E,GAAArG,EAAA6U,EAAAY,EACAnP,GAAAtG,EAAA8U,EAAAY,EACAxK,GAAAgL,EACAlW,EA/IA,aA+IAkL,EACA3E,GAAAvG,EAAA+U,EAAAY,EACAnP,GAAAxG,EAAAgV,EAAAa,EACA7V,EAAA,EAAAkL,EArJA,aAsJAzE,GAAAzG,EAAAiV,EAAAW,EACAlP,GAAA1G,EAAAkV,EAAAY,EACAtO,IAAAgF,GAAAG,MAAAnH,KAAAjI,EAAAT,MACAyK,GAAAkF,GAAAzF,GAAA,GAAA4F,GAAA3F,GAAAqP,IAAA7O,GACAE,GAAA+O,GACAxM,EAAAyM,GAGA,IAAA3Q,KACAmP,EAAA,EAAAjL,GAAA,MAAAA,EAAA,KACAqL,EAAA,IAAArL,EACAoL,EAAA,EAAApL,GAAA,QAAAA,EAAA,GACAqK,EAAA,OAAAtL,IAAA,EAAAA,GACAwL,EAAA,MAAAvL,KAAA,IAAAD,GAAA,OAAAA,GACA2L,EAAA,EAAA3L,EACA2L,GAAA,MAAAA,IACAhO,GAAA,EAAAsB,MAAAgO,IACArP,GAAA,EAAAD,GAAA2N,EAAAY,EA5KA,aA6KArO,GAAA,EAAAF,GAAAgO,EAAAU,EA3KA,aA2KAY,EACAtP,MAAA6N,EAAAc,EA7KA,aA6KAW,EACA1O,IAAAgF,GAAAG,GAAAxF,EAAA3B,GAAAjI,EAAAT,MACAyK,GAAAkF,GAAA2J,GAAAE,GAAAtP,GAAAE,GAAAD,GAAAQ,IAGAK,GAAAN,GACAQ,GAAAP,GACAC,GAAA,EACAQ,GAAAT,GA5HA,EAqKA,OAtCAE,MACAC,SACAC,SACAE,MACAG,MACAD,SAEAjC,QACA0B,SAEAzB,SACAC,SACAC,SACAC,SACAC,SAEAC,SACAC,SACAC,SACAC,SACAC,SAEAC,QACAI,QACAC,QACAwB,KAxJA,EAyJAvB,SACAC,SAEAN,QACAC,QACAC,QAEAS,SACAC,SACAM,OACAE,WAYAvgB,EAAA,SACA,cACA,mBACA,SACA8V,EACAqZ,GAEA,YAEA,iBAAAC,GAuDA,GAOAC,GAAAC,EAAAC,EAAAC,EAAA3P,EAPA0G,EAAA6I,EAAA7I,KACA6F,EAAAgD,EAAAhD,MACA5F,EAAA4I,EAAA5I,MACAxG,EAAAoP,EAAApP,GACAyG,EAAA2I,EAAA3I,OACA/K,EAAA0T,EAAA1T,QAYAkT,EAAArI,IACAkJ,EAAA,EAAAb,EACAc,EAAAnkB,KAAAC,KAAAikB,GACAE,EAAApkB,KAAAgF,IAAAiW,GACAoJ,EAAAD,GAGAN,GAAA9jB,KAAAE,IAAAqK,EAAAb,IAAA+K,EAAAlK,EAAAD,MACAyZ,EAAA,IAAAxZ,EAAAX,IAAA,EAAAya,EAAA,IAAAF,EAAAD,EACA,IAAAI,GAAAP,GAAAD,IACAE,GAAAF,GAAA,EAAAQ,OACA,QAAAA,IAAA,KACAA,EAAAP,GAAAC,KACAvP,GAAA,EAAA6P,CAEA,IAAAC,GAAAvkB,KAAAE,IAAAqK,EAAAb,IAAA+K,EAAAlK,EAAAD,MACAka,EAAAxkB,KAAA+E,IAAAkW,EACAgJ,GAAAM,EAAAL,CACA,IAAAO,GAAA,IAAAJ,EACA5I,GAAAgJ,EAAAJ,IACAK,EAAA,EAAAH,EACAI,EAAAV,IACAW,EAAAL,GAAA,EAAAvJ,EAIA,IAHAE,EAAA,IAGA,MAAA/K,EAAA,CAGA,GAAA0U,GAAAhE,EAAA,KACAiE,EAAA9kB,KAAA4M,MAAAiY,EAAA,MACAE,EAAAF,EAAAC,EAEAE,EAAA,qBAIA1Q,GAHA,mBAGA0Q,EAAAF,GADAE,EAAAza,EAAAT,OACAib,EAAAF,IAFA,uBAEAta,EAAAT,OACA,IACAwK,GAAA/J,EAAAT,WAIAwK,GAAAsP,EAAA/C,EAAA,UAwBA,QApBApM,KAEAyG,SAEAwJ,OACAH,KACA9I,QACAgJ,QACAL,QAEAC,SACAhB,QACAa,SACAS,OAEAC,KACAT,SACAK,QACAlQ,WAYA7f,EAAA,YACA,cACA,UACA,UACA,WACA,UACA,UACA,SACA8V,EACAmL,EACAuP,EACAC,EACAC,EACArJ,GAEA,YAEA,iBAAApd,EAAA0mB,GAkFA,GAeAnP,GAAAC,EACAmP,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEA/Q,EAAAuC,EAAAyO,EAAAC,EACAhR,EAAAK,EAAAJ,EAAAE,EAAAG,EACA2Q,EAAAC,EAAAC,EAAAC,EACAtG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAmG,EACA1H,EAAAC,EAAAC,EAAAC,EAAAC,EACAG,EAAAE,EACAC,EAAAE,EAAAC,EAAAE,EAAAC,EAAAE,EACApL,EAAArH,EAAAkL,EAAAC,EAAA+N,EAAAC,EAAAC,GACAhD,GAAAiD,GACApG,GAAAE,GACAC,GAAAE,GAAAC,GAAAE,GAAAC,GAAAE,GA5BAzQ,GAAAiV,EAAAjV,QACAmW,GAAAlB,EAAAkB,KACAzF,GAAAuE,EAAAvE,MAEA0F,GAAAnB,EAAAmB,OACAC,GAAApB,EAAAoB,MACAC,GAAArB,EAAAqB,OAEAC,GAAAtB,EAAAsB,OACAC,GAAAvB,EAAAuB,IACAC,GAAAxB,EAAAwB,IAEAC,GAAAzB,EAAAyB,MAsBAV,GAAA,QAGAznB,EAAAwb,MAAA,EAA2Bxb,EAAAwc,OAAA,IAAuBxc,EAAA4c,MAAA,EAClD5c,EAAA+c,MAAA,EAA6B/c,EAAAob,IAAA,EAAqBpb,EAAAsb,IAAA,EAClDtb,EAAAic,IAAA,EAA6Bjc,EAAA8b,GAAA,EAAqB9b,EAAA+b,GAAA,EAClD/b,EAAAgc,GAAA,EAA6Bhc,EAAA6b,MAAA,EAAqB7b,EAAA2b,IAAA,EAClD3b,EAAA0V,QAAA,EAA6B1V,EAAAyb,OAAA,EAAqBzb,EAAAkc,OAAA,EAClDlc,EAAA6S,EAAA,EAA6B7S,EAAAub,MAAA,EAAqBvb,EAAAmc,MAAA,EAClDnc,EAAAoc,MAAA,EAA6Bpc,EAAAqc,MAAA,EAAqBrc,EAAAgd,OAAA,EAClDhd,EAAAid,OAAA,EAA6Bjd,EAAA+a,KAAA,EAAqB/a,EAAAkb,QAAA,EAClDlb,EAAA6c,MAAA,EAA6B7c,EAAA4b,MAAA,EAAqB5b,EAAAmb,OAAA,EAGlDnb,EAAAsU,KAAA,EAAyBtU,EAAAuU,MAAA,EAAsBvU,EAAAwU,MAAA,EAC/CxU,EAAAyU,MAAA,EAA2BzU,EAAA0U,MAAA,EAAoB1U,EAAA2U,MAAA,EAC/C3U,EAAA4U,MAAA,EAA2B5U,EAAA6U,MAAA,EAAoB7U,EAAA8U,MAAA,EAC/C9U,EAAA+U,MAAA,EAA2B/U,EAAAgV,MAAA,EAAoBhV,EAAAiV,KAAA,EAC/CjV,EAAAkV,KAAA,EAA2BlV,EAAAmV,KAAA,EAAoBnV,EAAAoV,KAAA,EAC/CpV,EAAAqV,KAAA,EAA2BrV,EAAAsV,KAAA,EAAoBtV,EAAAuV,MAAA,EAC/CvV,EAAAwV,MAAA,EAA2BxV,EAAA0R,GAAA,EAAoB1R,EAAA2R,IAAA,EAC/C3R,EAAA4R,IAAA,EAA2B5R,EAAA6R,KAAA,EAAoB7R,EAAA8R,IAAA,EAC/C9R,EAAA+R,MAAA,EAA2B/R,EAAAgS,IAAA,EAAoBhS,EAAAiS,IAAA,EAC/CjS,EAAAkS,IAAA,EAA2BlS,EAAAmS,KAAA,EAAoBnS,EAAAoS,KAAA,EAC/CpS,EAAAqS,KAAA,EAA2BrS,EAAAsS,IAAA,EAAoBtS,EAAAuS,IAAA,EAC/CvS,EAAAwS,IAAA,EAA2BxS,EAAAyS,IAAA,EAAoBzS,EAAA0S,IAAA,EAC/C1S,EAAA2S,IAAA,EAA2B3S,EAAA4S,IAAA,EAAoB5S,EAAA4V,KAAA,EAC/C5V,EAAA6V,MAAA,EAA2B7V,EAAA8S,KAAA,EAAoB9S,EAAA+S,KAAA,EAC/C/S,EAAAgT,KAAA,EAA2BhT,EAAAiT,IAAA,EAAoBjT,EAAAkT,IAAA,EAC/ClT,EAAAmT,IAAA,EAA2BnT,EAAAoT,IAAA,EAAoBpT,EAAAqT,IAAA,EAC/CrT,EAAAsT,IAAA,EAA2BtT,EAAAuT,IAAA,EAAoBvT,EAAA8V,MAAA,EAC/C9V,EAAAwT,KAAA,EAA2BxT,EAAAyT,KAAA,EAAoBzT,EAAAgW,MAAA,EAC/ChW,EAAAoW,IAAA,EAA2BpW,EAAAsW,IAAA,EAQ3BtW,EAAAqb,MAAAwM,GACA7nB,EAAAsc,KAAAwL,GACA9nB,EAAAyV,MAAAsS,GACA/nB,EAAAuc,MAAAyL,GACAhoB,EAAA8a,GAAAmN,GACAjoB,EAAA+V,GAAAmS,GACAloB,EAAAib,MAAAkN,GAGAnoB,EAAAooB,cAAA3W,EAMA,IAAA4W,IAAA,GAAAxc,EAAAZ,YAAA,EAEAqd,GAAA,GAAAzc,EAAAZ,YACAsd,GAAAD,WAGAtoB,GAAAmR,KAAA,IACAnR,EAAA6S,EAAA,CAEA,IAAAsS,KACAyC,QACAtL,KAAAtc,EAAAsc,KAEA6F,SACA5F,MAAAvc,EAAAuc,MACAxG,GAAA/V,EAAA+V,GAEAyG,OAAAxc,EAAAwc,OACA/K,QAAAzR,EAAAooB,eAGAI,GAAA/B,EAAAtB,GAEAnlB,GAAA+V,GAAAyS,GAAAzS,EAMA,IAAA8P,IAAA2C,GAAA3C,EACA7lB,GAAA+c,MAAAyL,GAAAzL,KACA,IAAAgJ,IAAAyC,GAAAzC,MACAL,GAAA8C,GAAA9C,MACAC,GAAA6C,GAAA7C,OACAhB,GAAA6D,GAAA7D,MACAa,GAAAgD,GAAAhD,OACAS,GAAAuC,GAAAvC,KACAC,GAAAsC,GAAAtC,GACAT,GAAA+C,GAAA/C,OACAK,GAAA0C,GAAA1C,KAeA,IAdA9lB,EAAA4V,KAAA4S,GAAA5S,KAEA5V,EAAAI,MAAA,EAYAolB,IAAA,GAAAxlB,EAAA+V,IAAA,GAUA,GATA/V,EAAAwb,MAAA,EACA0K,GAAA,IAAAra,EAAAZ,YAAA,IACAjL,EAAAwb,MAAA,GAEA+L,EAAAc,GACAf,EAAAiB,IACApB,GAAAjB,GAAA,GAAAra,EAAAZ,aAGA,KACAsc,EAAAJ,EAAA,GACAA,EAAA,KACAI,EAAA,GAGA,IAAAkB,KAAA,IAAAlB,GAAA1b,EAAAZ,WACAqc,GAAAmB,YACAlB,IAAA1b,EAAAZ,YAAA,EAEAmc,EAAA,EAAAnB,GAEAyB,GAAA,GAAA7B,GAAA0B,GACAvnB,EAAA2b,IAAAkK,GAAA7lB,EAAAsc,KAAAoL,GACAR,EAAAlnB,EAAA2b,IAAA3b,EAAA2b,IACAsL,EAAAjnB,EAAAsc,KAAAtc,EAAA2b,IACA0L,EAAA/lB,KAAAoS,IAAA,EAAAwT,GACAJ,EAAAQ,EAAAhmB,KAAAE,IAAAkmB,GAAA,GACAX,EAAAD,EAAAxlB,KAAAE,IAAA6lB,EAAA,KACAT,EAAAG,EAAA/mB,EAAA+V,IAAA8P,IAAA,MAAAqB,EAAAD,GACA,EAAAC,IAAA,KAAArb,EAAAX,GAAAwc,GAAAL,EAAArnB,EAAA+c,OACA,IAAAmK,GAAA,EAAAA,KACAlnB,EAAAob,IAAApb,EAAAqb,MAAAuL,EACAC,EAAA,EACA7mB,EAAAsc,KAAA,OACAuK,GAAA,EAAAC,EAAAY,GAAA7b,EAAAF,MAAA3L,EAAA+V,GAAA+P,GAAA9lB,EAAAsc,MAEAtc,EAAAgd,OAAA,EAAA2I,GACA3lB,EAAAsb,IAAA,EAAAtb,EAAA+V,GAAAgR,EAAAlB,GAAAL,IACAxlB,EAAA2b,KAAA,KAAAuL,GAAAlnB,EAAAsc,MACA,KAAA4K,GAAArb,EAAAX,GAAAwc,IAAA7B,GAAAwB,KACA,EAAArnB,EAAA+c,OAAA,IAAAkK,EAAAC,GACA,OAAAD,IAAA,IAAAjnB,EAAAgd,QACA,EAAAkK,EAAAD,GAAA,EAAAC,IAAA5lB,KAAAgF,IAAA,EAAAtG,EAAAyV,SACAzV,EAAAic,IAAA,EAAA8K,EAAAlB,GAAAL,IAAA,QACA0B,EAAAD,KAAAC,GACAF,EAAArB,MACAnM,EAAA,IAAA3N,EAAAX,GAAAkc,EAAApnB,EAAA+V,GACA0D,EAAA,GAAAD,EAAA3N,EAAAX,GAAAkc,EACAI,GAAA,OAAA3b,EAAAH,GAAA0b,IAAApnB,EAAA+V,GACA/V,EAAA+a,KAAA/a,EAAA+V,GAAA,GAAAyD,EAAAiM,GAAAzlB,EAAA+c,MAAA,MACAtD,EAAAgM,IAAA,MAAAE,GAAA,IAAAqB,GACAhnB,EAAA0V,SAAA,GAAA8D,EAAAuM,GAAA,MAAAtM,GACA,MAAAkM,GAAA,IAAAqB,GACAQ,GAAA,KAAA7B,GAAA,GAAAqB,GACAW,IAAAnO,EAAAkM,GACA1lB,EAAAkb,QAAAyM,IAAA,GAAAlO,GAAA,KAAAkM,IACA,EAAA6B,GAAA,IAAA7B,KAAAD,GACAhB,GAAA1kB,EAAA0V,QAAA1V,EAAAkb,QACAlb,EAAAyb,OAAAzb,EAAAqb,MAAAwL,EAAAvlB,KAAAgF,IAAAtG,EAAAyV,OACAzV,EAAA4b,MAAA,EACA5b,EAAAsc,KAAA,OACAtc,EAAA4b,OAhHA,IAgHAkL,EAAA9mB,EAAAqb,MAAA4L,GAEAjnB,EAAAmb,OAAA,IAAAqK,GAAAmC,GAAA3nB,EAAAob,IACApb,EAAAub,MAAA,IAAAvb,EAAAob,IAEA9Z,KAAAoS,IAAAgS,GAAA,WACA1lB,EAAA6c,OAAA,IAAAhR,EAAAF,MAAAma,IAAA,IAAAJ,KAAA,EAAAA,IAGA1lB,EAAA6c,OAAA,IAAAhR,EAAAF,MAAAma,IAAA,IAAAJ,IAAA+B,EAEAznB,EAAA4c,OAAA,GAAA/Q,EAAAF,MAAAma,EAEA,IAAA4C,IAAA,EAAA1oB,EAAA2b,IAAAra,KAAAgF,IAAAtG,EAAA8a,GAMA,IALA9a,EAAA6b,MAAA6M,SACA1oB,EAAAkc,OAAA5a,KAAA+E,IAAArG,EAAA8a,IACA9a,EAAAid,OAAA,EAAA0I,GAAA,EAGA,EAAA9Z,EAAAf,GAAA9K,EAAA+V,IAAA,KACA/V,EAAAwc,OAAA,IACAxc,EAAAwb,MAAA,EACA7F,EAAA,EACAQ,EAAAnW,EAAAuc,KAEA,IAAAe,KACA6E,SACA/Q,GAAApR,EAAAsc,KACA/K,MAAAvR,EAAAyV,MACAE,KACAtE,MAAArR,EAAAuc,MACAjL,MAAAtR,EAAAib,MAEAmH,GAAApiB,EAAA+V,GAEArE,GAAA1R,EAAA0R,GACAC,IAAA3R,EAAA2R,IAEAC,IAAA5R,EAAA4R,IACAC,KAAA7R,EAAA6R,KACAC,IAAA9R,EAAA8R,IACAC,MAAA/R,EAAA+R,MAEAC,IAAAhS,EAAAgS,IACAC,IAAAjS,EAAAiS,IACAC,IAAAlS,EAAAkS,IAEAC,KAAAnS,EAAAmS,KACAC,KAAApS,EAAAoS,KACAC,KAAArS,EAAAqS,KAEAC,IAAAtS,EAAAsS,IACAC,IAAAvS,EAAAuS,IACAC,IAAAxS,EAAAwS,IACAC,IAAAzS,EAAAyS,IAEAC,IAAA1S,EAAA0S,IACAC,IAAA3S,EAAA2S,IACAC,IAAA5S,EAAA4S,IAEAE,KAAA9S,EAAA8S,KACAC,KAAA/S,EAAA+S,KACAC,KAAAhT,EAAAgT,KACAC,IAAAjT,EAAAiT,IAEAC,IAAAlT,EAAAkT,IACAC,IAAAnT,EAAAmT,IACAC,IAAApT,EAAAoT,IACAC,IAAArT,EAAAqT,IAEAC,IAAAtT,EAAAsT,IACAC,IAAAvT,EAAAuT,IAEAC,KAAAxT,EAAAwT,KACAC,KAAAzT,EAAAyT,MAGAkV,GAAApC,EAAAjJ,GAEAqL,IAAAtG,MACAsG,GAAArG,MACA9K,EAAAmR,GAAAnR,MACAD,EAAAoR,GAAApR,MACAoR,GAAApG,OAEAoG,GAAAnG,OACAmG,GAAAta,IACArO,EAAA0R,GAAAiX,GAAAjX,GACA1R,EAAA2R,IAAAgX,GAAAhX,IACAsE,EAAA0S,GAAA1S,GAEAuC,EAAAmQ,GAAAnQ,KACAmQ,GAAAjG,IACA1iB,EAAA4R,IAAA+W,GAAA/W,IACA5R,EAAA6R,KAAA8W,GAAA9W,KACA7R,EAAA8R,IAAA6W,GAAA7W,IAEA9R,EAAA+R,MAAA4W,GAAA5W,MACA/R,EAAAgS,IAAA2W,GAAA3W,IACA2W,GAAAlG,OACAziB,EAAAiS,IAAA0W,GAAA1W,IACAjS,EAAAkS,IAAAyW,GAAAzW,IAEAlS,EAAAmS,KAAAwW,GAAAxW,KACAnS,EAAAoS,KAAAuW,GAAAvW,KACApS,EAAAqS,KAAAsW,GAAAtW,KACArS,EAAAsS,IAAAqW,GAAArW,IACAtS,EAAAuS,IAAAoW,GAAApW,IAEAvS,EAAAwS,IAAAmW,GAAAnW,IACAxS,EAAAyS,IAAAkW,GAAAlW,IACAzS,EAAA0S,IAAAiW,GAAAjW,IACA1S,EAAA2S,IAAAgW,GAAAhW,IACA3S,EAAA4S,IAAA+V,GAAA/V,IAEAoO,EAAA2H,GAAA3H,GACAC,EAAA0H,GAAA1H,GACAC,EAAAyH,GAAAzH,GACAC,EAAAwH,GAAAxH,GACAC,EAAAuH,GAAAvH,GAEAuH,GAAAtH,GACAsH,GAAArH,GACAzB,EAAA8I,GAAA9I,IACAC,EAAA6I,GAAA7I,IACAC,EAAA4I,GAAA5I,IAEAC,EAAA2I,GAAA3I,IACAC,EAAA0I,GAAA1I,IACA0I,GAAAzI,IACAyI,GAAAxI,IACAC,EAAAuI,GAAAvI,IAEAuI,GAAAtI,IACAC,EAAAqI,GAAArI,IACAC,EAAAoI,GAAApI,KACAoI,GAAAnI,KACAC,EAAAkI,GAAAlI,KAEAC,EAAAiI,GAAAjI,KACAiI,GAAAhI,KACAC,EAAA+H,GAAA/H,KACAC,EAAA8H,GAAA9H,KACA8H,GAAA7H,KAEAC,EAAA4H,GAAA5H,KACA/gB,EAAA8S,KAAA6V,GAAA7V,KACA9S,EAAA+S,KAAA4V,GAAA5V,KACA/S,EAAAgT,KAAA2V,GAAA3V,KACAhT,EAAAiT,IAAA0V,GAAA1V,IAEAjT,EAAAkT,IAAAyV,GAAAzV,IACAlT,EAAAmT,IAAAwV,GAAAxV,IACAnT,EAAAoT,IAAAuV,GAAAvV,IACApT,EAAAqT,IAAAsV,GAAAtV,IACArT,EAAAsT,IAAAqV,GAAArV,IAEAtT,EAAAuT,IAAAoV,GAAApV,IACAiD,EAAAmS,GAAAnS,GACA+K,GAAAoH,GAAApH,GACAoH,GAAAnH,GACAC,GAAAkH,GAAAlH,GAEAC,GAAAiH,GAAAjH,IACAiH,GAAAhH,IACAC,GAAA+G,GAAA/G,IACAC,GAAA8G,GAAA9G,IACA8G,GAAA7G,IAEAC,GAAA4G,GAAA5G,IACAC,GAAA2G,GAAA3G,IACA2G,GAAA1G,IACAC,GAAAyG,GAAAzG,IACAliB,EAAAwT,KAAAmV,GAAAnV,KACAxT,EAAAyT,KAAAkV,GAAAlV,IAEA,IAAAtE,KACAoN,MAAApG,EACAhF,KAAAnR,EAAAmR,KACAC,GAAApR,EAAAsc,KACAjL,MAAArR,EAAAuc,MACAjL,MAAAtR,EAAAib,MACA1J,MAAAvR,EAAAyV,MACAjE,GAAAxR,EAAA8a,GACArJ,QAAAzR,EAAAooB,eAGAzL,GAAA3F,EAAAhX,EAAAmP,GAEAnP,GAAAsc,KAAAK,GAAAvL,GACApR,EAAAuc,MAAAI,GAAAtL,MACArR,EAAAib,MAAA0B,GAAArL,MACAtR,EAAAyV,MAAAkH,GAAApL,MACAvR,EAAA8a,GAAA6B,GAAAnL,GAEA0E,EAAA,EACAK,EAAA,EACAF,EAAA,CAEA,IAAAuM,KACArL,QACAiB,OACA/C,MAAAzV,EAAAyV,MACAuL,KACAC,KACAC,KACAC,KACAC,KACA5J,QACAqI,MACAC,MACAC,MACAC,MACAC,MACAG,MACAE,MACAC,OACAE,OACAC,OACAE,OACAC,OACAE,OACAlO,EAAA7S,EAAA6S,EACA8C,KACAC,KAAA5V,EAAA4V,KACAkF,GAAA9a,EAAA8a,GACAC,KAAA/a,EAAA+a,KACAhF,GAAA/V,EAAA+V,GACAkF,MAAAjb,EAAAib,MACAC,QAAAlb,EAAAkb,QACAwJ,UACAnD,MACAE,MACAC,OACAE,OACAC,OACAE,OACAC,OACAE,OACA5F,KAAAtc,EAAAsc,KACAqI,SACA1O,KACAC,QACAC,QACAE,KACAG,KACAD,QACAjC,KAAAtU,EAAAsU,KACA0B,MAAAhW,EAAAgW,MACAzB,MAAAvU,EAAAuU,MACAC,MAAAxU,EAAAwU,MACAC,MAAAzU,EAAAyU,MACAC,MAAA1U,EAAA0U,MACAC,MAAA3U,EAAA2U,MACAC,MAAA5U,EAAA4U,MACAC,MAAA7U,EAAA6U,MACAC,MAAA9U,EAAA8U,MACAC,MAAA/U,EAAA+U,MACAC,MAAAhV,EAAAgV,MACAC,KAAAjV,EAAAiV,KACAI,KAAArV,EAAAqV,KACAC,KAAAtV,EAAAsV,KACAC,MAAAvV,EAAAuV,MACAC,MAAAxV,EAAAwV,MACAN,KAAAlV,EAAAkV,KACAC,KAAAnV,EAAAmV,KACAC,KAAApV,EAAAoV,KACAS,MAAA7V,EAAA6V,MACAC,MAAA9V,EAAA8V,MACAM,IAAApW,EAAAoW,IACAE,IAAAtW,EAAAsW,KAGAsS,GAAApC,EAAA5D,GAEA3M,GAAA2S,GAAA3S,GACAC,EAAA0S,GAAA1S,MACAC,EAAAyS,GAAAzS,MACAE,EAAAuS,GAAAvS,GACAG,EAAAoS,GAAApS,GAEAD,EAAAqS,GAAArS,MACAvW,EAAAsU,KAAAsU,GAAAtU,KACAtU,EAAAgW,MAAA4S,GAAA5S,MACAhW,EAAAuU,MAAAqU,GAAArU,MACAvU,EAAAwU,MAAAoU,GAAApU,MAEAxU,EAAAyU,MAAAmU,GAAAnU,MACAzU,EAAA0U,MAAAkU,GAAAlU,MACA1U,EAAA2U,MAAAiU,GAAAjU,MACA3U,EAAA4U,MAAAgU,GAAAhU,MACA5U,EAAA6U,MAAA+T,GAAA/T,MAEA7U,EAAA8U,MAAA8T,GAAA9T,MACA9U,EAAA+U,MAAA6T,GAAA7T,MACA/U,EAAAgV,MAAA4T,GAAA5T,MACAhV,EAAAiV,KAAA2T,GAAA3T,KACAjV,EAAAqV,KAAAuT,GAAAvT,KAEArV,EAAAsV,KAAAsT,GAAAtT,KACAsT,GAAA9R,KACA9W,EAAAuV,MAAAqT,GAAArT,MACAvV,EAAAwV,MAAAoT,GAAApT,MACAxV,EAAAkV,KAAA0T,GAAA1T,KAEAlV,EAAAmV,KAAAyT,GAAAzT,KACAnV,EAAAoV,KAAAwT,GAAAxT,KACApV,EAAA6V,MAAA+S,GAAA/S,MACA7V,EAAA8V,MAAA8S,GAAA9S,MACA9V,EAAAoW,IAAAwS,GAAAxS,IAEApW,EAAAsW,IAAAsS,GAAAtS,IAIA,IAAAtW,EAAAwb,QACAmL,EAAA3mB,EAAAob,IAAApb,EAAAob,IACApb,EAAA8b,GAAA,EAAA+J,GAAA6B,GAAAf,EACArY,EAAAtO,EAAA8b,GAAA4L,GAAA1nB,EAAAob,IAAA,EACApb,EAAA+b,IAAA,GAAA8J,GAAA0B,GAAAjZ,EACAtO,EAAAgc,GAAA,GAAA1N,EAAAuX,GAAA6B,IAAA,IAAA7B,GAAA,GAAA0B,GAAAvnB,EAAAob,IACApb,EAAAmc,MAAAnc,EAAA8b,GAAA,EAAA6K,EACA3mB,EAAAoc,MAAA,OAAApc,EAAA+b,GAAA/b,EAAAob,KACA,GAAApb,EAAA8b,GAAA,GAAA6K,IACA3mB,EAAAqc,MAAA,MAAArc,EAAAgc,GACA,GAAAhc,EAAAob,IAAApb,EAAA+b,GACA,EAAA/b,EAAA8b,GAAA9b,EAAA8b,GACA,GAAA6K,GAAA,EAAA3mB,EAAA8b,GAAA6K,KAaA,MALAvJ,GAAApd,EAAA,GAEAA,EAAAmR,KAAA,KAGA,KAUApb,EAAA,4BACA,eACA,uBACA,iBACA,eACA,SACA8V,EACAgd,EACA1L,EACA2L,GAEA,YAEA,iBAAAC,EAAAC,GAeA,GACAC,GAAA,QAAApd,EAAAf,IAGAgD,EAAA,EAEA9N,IACAA,GAAAI,MAAA,EAKAJ,EAAAkpB,OAAAH,EAAAxgB,UAAA,KAMAvI,EAAAmpB,QAAA3rB,SAAAurB,EAAAxgB,UAAA,WACAvI,EAAAopB,UAAA1qB,WAAAqqB,EAAAxgB,UAAA,QACAvI,EAAAqpB,KAAA3qB,WAAAqqB,EAAAxgB,UAAA,QACAvI,EAAAspB,MAAA5qB,WACA,IAAAlB,SAAAurB,EAAAxgB,UAAA,WACA,IAAAwgB,EAAAxgB,UAAA,QAEAvI,EAAAqb,MAAA3c,WACAqqB,EAAAxgB,UAAA,OACA,IAAA/K,SAAAurB,EAAAxgB,UAAA,WACA,IAAAwgB,EAAAxgB,UAAA,QAMA/K,SAAAurB,EAAAxgB,UAAA,WAGAvI,EAAAuc,MAAA7d,WAAAsqB,EAAAzgB,UAAA,OACAvI,EAAAib,MAAAvc,WAAAsqB,EAAAzgB,UAAA,QACAvI,EAAAsc,KAAA5d,WAAA,IAAAsqB,EAAAzgB,UAAA,QACAvI,EAAAyV,MAAA/W,WAAAsqB,EAAAzgB,UAAA,QACAvI,EAAA8a,GAAApc,WAAAsqB,EAAAzgB,UAAA,QACAvI,EAAA+V,GAAArX,WAAAsqB,EAAAzgB,UAAA,QACA7J,WAAAsqB,EAAAzgB,UAAA,QAIAvI,EAAA+V,GAAA/V,EAAA+V,GAAAkT,EAKAjpB,EAAAiM,EAAA3K,KAAAE,IAAAxB,EAAA+V,GAAAlK,EAAAJ,OAAA,KACAzL,EAAAqpB,KAAArpB,EAAAqpB,MAAA,KAAAJ,GACAjpB,EAAAspB,MAAAtpB,EAAAspB,OAAA,KAAAL,EAAA,MAGAjpB,EAAAuc,MAAAvc,EAAAuc,MAAA1Q,EAAAR,QACArL,EAAAib,MAAAjb,EAAAib,MAAApP,EAAAR,QACArL,EAAAyV,MAAAzV,EAAAyV,MAAA5J,EAAAR,QACArL,EAAA8a,GAAA9a,EAAA8a,GAAAjP,EAAAR,QAEArL,EAAAupB,KAAAvpB,EAAAiM,GAAA,EAAAjM,EAAAsc,MAAA,EACAtc,EAAAwpB,KAAAxpB,EAAAiM,GAAA,EAAAjM,EAAAsc,MAAA,EAaAxO,EADA9N,EAAAmpB,QAAA,GACAnpB,EAAAmpB,QAAA,IAGAnpB,EAAAmpB,QAAA,IAIA,IAAAM,GAAAZ,EAAA/a,EAAA9N,EAAAopB,WACAhb,EAAAqb,EAAArb,IACAC,EAAAob,EAAApb,IACAE,EAAAkb,EAAAlb,GACAC,EAAAib,EAAAjb,OACAC,EAAAgb,EAAAhb,GACAzO,GAAAqd,WAAAF,EAAArP,EAAAM,EAAAC,EAAAE,EAAAC,EAAAC,EAGA,IAAAiY,IACAjV,QA7FA,IA8FAmW,KAAA5nB,EAAAkpB,OACA/G,MAAAniB,EAAAqd,WAAA,UACAwK,OAAA7nB,EAAAqb,MAEAyM,MAAA9nB,EAAAsc,KACAyL,OAAA/nB,EAAAyV,MACAuS,OAAAhoB,EAAAuc,MACA0L,IAAAjoB,EAAA8a,GACAoN,IAAAloB,EAAA+V,GAEAoS,OAAAnoB,EAAAib,MAKA,OAFA6N,GAAA9oB,EAAA0mB,GAEA1mB,KAGAjK,EAAA,aACA,cACA,sCACA,uCACA,qCACA,6CACA,qCACA,0CACA,0CACA,sCACA,qDACA,mBACA,sBACA,kBACA,gBACA,wBACA,6BACA,UACA,SACA8V,EACA/J,EACAD,EACA6nB,EACAtoB,EACAJ,EACAE,EACAkL,EACAU,EACAG,EACA0c,EACAd,EACA3D,EACA/H,EACAhd,EACAxF,EACAyiB,GAEA,YAEA,QACAwM,QAAA,QACA/d,YAGA/J,aACAD,cACAb,WACA0oB,WACAxoB,gBACAE,kBACAgL,gBAEAud,gBACAE,eAAA3E,EACApkB,eAAA,WACA,MAAAokB,GAAA/H,EAAAllB,MAAA,KAAAmK,aAEA+a,OACAhd,YACAxF,iBACAyiB,UAGAvW,EAAA,gBJ0sBM,SAAU/Q,EAAQD,EAASM,GAEjC,GAAIyB,GAAgCC,EAA8BC,GAA8B,SAAWC,EAAQnC,GAE7GiC,GAAgChC,EAASM,EAAoB,IAAKyB,EAAiC,MAGnEI,MAFlCF,EAA2E,kBAAnCF,GACvCA,EAA+BK,MAAMpC,EAASgC,GAAiCD,KAChC9B,EAAOD,QAAUiC,IAUlE7B,EAAM,SAAUJ,EAASsD,GAC1B,YAEApC,QAAOC,eAAenB,EAAS,cAC7BqC,OAAO,IAETrC,EAAQkO,EAAuBlO,EAAQ8K,EAAoB9K,EAAQmM,EAAoBnM,EAAQyI,EAAezI,EAAQmJ,EAAwBnJ,EAAQ8I,EAA0B9I,EAAQi0B,EAAoBj0B,EAAQk0B,EAAiBl0B,EAAQm0B,MAAchyB,EKx3ItP,IAAMgyB,OAAc,SAAAC,GAAA,MAAOA,IAAO,GAU5BF,MAAiB,SAACE,GAE7B,MADe3oB,MAAKoS,IAAIuW,GACVC,WAAWjwB,QAUd6vB,MAAoB,SAACG,GAChC,GAAME,GAAYJ,EAAeE,GAC3BG,EAAS,IAAIC,OAAOF,EAAY,EACtC,OAAOzrB,YAAWurB,wBAAwCG,EAAxC,MAWPzrB,KAA0B,SAAC2rB,GACtC,GAAMC,GAA+BD,EAAI9uB,OAAO,EAAG8uB,EAAIrwB,OAAS,GAC1DgwB,EAAMH,EAAkBS,GACxBC,EAAuBhtB,SAAS8sB,EAAI9uB,OAAO8uB,EAAIrwB,OAAS,EAAG,GAAI,GAErE,QADcgwB,EAAM3oB,KAAKE,IAAI,GAAIgpB,IACpBC,YAAY,IAMdzrB,IAAwB,SAAC0rB,GAAiD,GAAtC5c,GAAsC1L,UAAAnI,OAAA,OAAAjC,KAAAoK,UAAA,GAAAA,UAAA,IAA9B,GAAI9C,OAAQqrB,cAC7DC,EAAY,GAAItrB,MAAJ,OAAA5D,OAAgBoS,EAAhB,aAEZ+c,EAAcD,EAAUE,SAE9B,OAAOxpB,MAAK4M,MAAM2c,GAAgBH,EAAY,GAAbvxB,EAAAhB,IAYtBmG,IAAe,SAACgsB,GAAuB,GAAlBS,GAAkB3oB,UAAAnI,OAAA,OAAAjC,KAAAoK,UAAA,GAAAA,UAAA,GAAR,IACpC4oB,EAAOV,EAAIxuB,MAAMivB,GAEjBxsB,IAENA,GAAO2F,KAAK8mB,EAAK,GAEjB,KAAK,GAAI10B,GAAI,EAAG20B,EAAMD,EAAK/wB,OAAQ3D,EAAI20B,EAAK30B,IAC1CiI,EAAO2F,KAAK8mB,EAAK10B,GAAGkF,OAAO,EAAG,GAAG0vB,cAAgBF,EAAK10B,GAAGkF,OAAO,EAAGwvB,EAAK10B,GAAG2D,OAAS,GAGtF,OAAOsE,GAAOjD,KAAK,KAMR0G,IAAoB,SAAA8J,GAAA,MAAWA,IAAW,IAAMxK,KAAKyJ,KAKrDpK,IAAoB,SAAA4F,GAAA,MAAWA,IAAWjF,KAAKyJ,GAAK,MAMpDhH,IAAuB,SAAConB,EAAYC,GAC/C,SAAKD,IAAeC,IAEIpB,EAAYmB,KACZnB,EAAYoB,IAOT9pB,KAAKoS,IAAIyX,GAAc,QLm5I9C,SAAUr1B,EAAQD,EAASM,GAEjC,GAAIyB,GAAgCC,EAA8BC,GAA8B,SAAWC,EAAQnC,GAE7GiC,GAAgC/B,EAAQD,EAASM,EAAoB,IAAKyB,EAAiC,MAG3EI,MAFlCF,EAA2E,kBAAnCF,GACvCA,EAA+BK,MAAMpC,EAASgC,GAAiCD,KAChC9B,EAAOD,QAAUiC,IAUlE7B,EAAM,SAAUH,EAAQD,EAASsD,GAClC,YAEApC,QAAOC,eAAenB,EAAS,cAC7BqC,OAAO,GMlhJX,IAAMmzB,IAEJC,aACE9sB,MAAO,EACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GASpBkzB,iBACE/sB,MAAO,EACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GAWpBmzB,gBACEhtB,MAAO,EACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYI,GAUpBizB,mBACEjtB,MAAO,EACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GAUpBqzB,2BACEltB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GAUpBszB,4BACEntB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYI,GASpBsG,WACEN,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GASpBuG,UACEJ,MAAO,GACPvE,OAAQ,GACRwE,KAAMtF,EAAAf,EAAYG,GAWpBqzB,qBACEptB,MAAO,GACPvE,OAAQ,GACRwE,KAAMtF,EAAAf,EAAYG,GAapBszB,sBACErtB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYM,GAUpBozB,WACEttB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYM,GAUpBqzB,YACEvtB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GAUpB2zB,cACExtB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GASpB4zB,WACEztB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,IAIhB6zB,GAEJC,aACE3tB,MAAO,EACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GAUpB+zB,kBACE5tB,MAAO,EACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GAWpBg0B,aACE7tB,MAAO,EACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYG,GAYpB+zB,gBACE9tB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYG,GAUpBg0B,cACE/tB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYK,GASpB+zB,SACEhuB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYG,GAYpBk0B,aACEjuB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYG,GAUpBm0B,YACEluB,MAAO,GACPvE,OAAQ,GACRwE,KAAMtF,EAAAf,EAAYG,GAUpBo0B,kBACEnuB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GASpBu0B,WACEpuB,MAAO,GACPvE,OAAQ,EACRwE,KAAMtF,EAAAf,EAAYC,GN4hJpBxC,GAAQyD,SMnhJO+xB,QAAOa,SNuhJtBp2B,EAAOD,QAAUA,EAAiB","file":"tle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tle\"] = factory();\n\telse\n\t\troot[\"tle\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tle\"] = factory();\n\telse\n\t\troot[\"tle\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.undefined = mod.exports;\n  }\n})(this, function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _MS_IN_A_DAY = exports._MS_IN_A_DAY = 1000 * 60 * 60 * 24; // Data formats for TLE orbital elements.\n\n\n  var _DATA_TYPES = exports._DATA_TYPES = {\n    _INT: Symbol(),\n    _FLOAT: Symbol(),\n    _CHAR: Symbol(),\n    _DECIMAL_ASSUMED: Symbol(),\n    // 12345   -> 0.12345\n    _DECIMAL_ASSUMED_E: Symbol() // 12345-2 -> 0.0012345\n\n  };\n\n  var _ACCEPTABLE_TLE_INPUT_TYPES = exports._ACCEPTABLE_TLE_INPUT_TYPES = {\n    _STRING: 'string',\n    _ARRAY: 'array',\n    _OBJECT: 'object'\n  };\n\n  var _LEADING_ZERO_ASSUMED_PREFIX = exports._LEADING_ZERO_ASSUMED_PREFIX = '0.';\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(4), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, exports, require(\"satellite.js\"), require(\"./utils\"), require(\"./line-defs\"), require(\"./constants\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, mod.exports, global.satellite, global.utils, global.lineDefs, global.constants);\n    global.undefined = mod.exports;\n  }\n})(this, function (module, exports, _satellite, _utils, _lineDefs, _constants) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = undefined;\n\n  var _satellite2 = _interopRequireDefault(_satellite);\n\n  var _lineDefs2 = _interopRequireDefault(_lineDefs);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  // TODO: fix this ugliness\n  var satellitejs = _satellite2.default.twoline2satrec ? _satellite2.default : _satellite2.default.satellite;\n\n  var TLEJS = function () {\n    function TLEJS() {\n      _classCallCheck(this, TLEJS);\n\n      this.createAllTLEGetters(_lineDefs2.default); // TODO: use Set to store cache vals.\n\n      this.cache = {\n        antemeridianCrossings: {}\n      };\n    }\n    /**\n     * Parses a TLE from a string or array input.  Both two and three-line variants are acceptable.\n     */\n\n\n    _createClass(TLEJS, [{\n      key: \"parseTLE\",\n      value: function parseTLE(inputTLE) {\n        var fnName = 'parseTLE'; // Check if already an instance of a TLE object.\n\n        if (_typeof(inputTLE) === _constants._ACCEPTABLE_TLE_INPUT_TYPES._OBJECT && inputTLE.arr) return inputTLE;\n        var tleStrLong = Array.isArray(inputTLE) ? inputTLE.join('') : inputTLE;\n        var tleStr = tleStrLong.substr && tleStrLong.substr(0, 30);\n        var cacheKey = \"\".concat(fnName, \"-\").concat(tleStr);\n        if (this.cache[cacheKey]) return this.cache[cacheKey];\n        var outputObj = {};\n        var tleType = Array.isArray(inputTLE) ? _constants._ACCEPTABLE_TLE_INPUT_TYPES._ARRAY : _typeof(inputTLE);\n        var tleArr = [];\n\n        switch (tleType) {\n          case _constants._ACCEPTABLE_TLE_INPUT_TYPES._ARRAY:\n            // Make a copy.\n            tleArr = inputTLE.concat();\n            break;\n\n          case _constants._ACCEPTABLE_TLE_INPUT_TYPES._STRING:\n            // Convert string to array.\n            tleArr = inputTLE.split('\\n');\n            break;\n\n          default:\n            throw new Error('TLE input is invalid');\n        } // Handle 2 and 3 line variants.\n\n\n        if (tleArr.length > 2) {\n          // 3-line TLE with satellite name as the first line.\n          // Keep track of satellite name.\n          outputObj.name = tleArr[0]; // Remove name from array.\n\n          tleArr.splice(0, 1);\n        } else {\n          // 2-line TLE with no satellite name.\n          outputObj.name = 'Unknown';\n        } // Trim spaces\n\n\n        tleArr = tleArr.map(function (line) {\n          return line.trim();\n        });\n        outputObj.arr = tleArr;\n        this.cache[cacheKey] = outputObj;\n        return outputObj;\n      }\n    }, {\n      key: \"isValidTLE\",\n      value: function isValidTLE(tle) {\n        var _this = this;\n\n        var fnName = 'isValidTLE';\n        var parsedTLE = this.parseTLE(tle);\n        var tleStr = parsedTLE.arr.join('').substr(0, 30);\n        var cacheKey = \"\".concat(fnName, \"-\").concat(tleStr);\n        if (this.cache[cacheKey]) return this.cache[cacheKey];\n        var isValid = true;\n        if (parsedTLE.arr.length !== 2) return false; // Check line numbers and checksums at the same time.\n\n        parsedTLE.arr.forEach(function (line, index) {\n          // Noop if already invalid.\n          if (!isValid) return;\n          var lineNumber = index + 1; // Check line number.\n\n          var parsedLineNumber = _this[\"getLineNumber\".concat(lineNumber)](parsedTLE);\n\n          var lineNumberIsValid = parsedLineNumber === lineNumber; // Checksum.\n\n          var calculatedLineChecksum = _this.tleLineChecksum(parsedTLE.arr[index]);\n\n          var parsedChecksum = _this[\"getChecksum\".concat(lineNumber)](parsedTLE);\n\n          var checksumIsValid = parsedChecksum === calculatedLineChecksum;\n\n          if (!lineNumberIsValid || !checksumIsValid) {\n            isValid = false;\n          }\n        });\n        this.cache[cacheKey] = isValid;\n        return isValid;\n      }\n    }, {\n      key: \"tleLineChecksum\",\n      value: function tleLineChecksum(tleLineStr) {\n        var charArr = tleLineStr.split(''); // Remove trailing checksum.\n\n        charArr.splice(charArr.length - 1, 1);\n\n        if (charArr.length === 0) {\n          throw new Error('Character array empty!', tleLineStr);\n        }\n\n        var checksum = charArr.reduce(function (sum, val) {\n          var parsedVal = parseInt(val, 10);\n          var parsedSum = parseInt(sum, 10);\n\n          if (Number.isInteger(parsedVal)) {\n            return parsedSum + parsedVal;\n          } else if (val === '-') {\n            return parsedSum + 1;\n          }\n\n          return parsedSum;\n        });\n        return checksum % 10;\n      }\n    }, {\n      key: \"createAllTLEGetters\",\n      value: function createAllTLEGetters(lines) {\n        var boundCreateTLELineGetters = this.createTLELineGetters.bind(this, lines);\n        Object.keys(lines).forEach(boundCreateTLELineGetters);\n      }\n    }, {\n      key: \"createTLELineGetters\",\n      value: function createTLELineGetters(lines, line) {\n        var boundCreateTLEValGetter = this.createTLEValGetter.bind(this, line);\n        Object.keys(lines[line]).forEach(boundCreateTLEValGetter);\n      }\n    }, {\n      key: \"createTLEValGetter\",\n      value: function createTLEValGetter(tleLine, prop) {\n        var _this2 = this;\n\n        this[(0, _utils._toCamelCase)(\"get-\".concat(prop))] = function (tle) {\n          var parsedTLE = _this2.parseTLE(tle);\n\n          var tleArr = parsedTLE.arr;\n          var line = tleLine === 'line1' ? tleArr[0] : tleArr[1];\n          var start = _lineDefs2.default[tleLine][prop].start;\n          var length = _lineDefs2.default[tleLine][prop].length;\n          var substr = line.substr(start, length);\n          var output;\n\n          switch (_lineDefs2.default[tleLine][prop].type) {\n            case _constants._DATA_TYPES._INT:\n              output = parseInt(substr, 10);\n              break;\n\n            case _constants._DATA_TYPES._FLOAT:\n              output = parseFloat(substr);\n              break;\n\n            case _constants._DATA_TYPES._DECIMAL_ASSUMED:\n              output = parseFloat(\"\".concat(_constants._LEADING_ZERO_ASSUMED_PREFIX).concat(substr));\n              break;\n\n            case _constants._DATA_TYPES._DECIMAL_ASSUMED_E:\n              output = (0, _utils._decimalAssumedEToFloat)(substr);\n              break;\n\n            case _constants._DATA_TYPES._CHAR:\n            default:\n              output = substr.trim();\n              break;\n          }\n\n          return output;\n        };\n      }\n    }, {\n      key: \"getEpochTimestamp\",\n      value: function getEpochTimestamp(tle) {\n        var epochDay = this.getEpochDay(tle);\n        var epochYear = this.getEpochYear(tle);\n        return (0, _utils._dayOfYearToTimeStamp)(epochDay, epochYear);\n      }\n    }, {\n      key: \"getSatelliteName\",\n      value: function getSatelliteName(tle) {\n        var parsedTLE = this.parseTLE(tle);\n        return parsedTLE.name;\n      }\n    }, {\n      key: \"getSatelliteInfo\",\n      value: function getSatelliteInfo(tle, timestamp, observerLat, observerLng, observerHeight) {\n        var fnName = 'getSatelliteInfo';\n        var timestampCopy = timestamp || Date.now();\n        var tleArr = this.parseTLE(tle).arr;\n        var tleStrShort = tleArr.join('').substr(0, 30);\n        var defaultObserverPosition = {\n          lat: 36.9613422,\n          lng: -122.0308,\n          height: 0.370\n        };\n        var obsLat = observerLat || defaultObserverPosition.lat;\n        var obsLng = observerLng || defaultObserverPosition.lng;\n        var obsHeight = observerHeight || defaultObserverPosition.height; // Memoization\n\n        var cacheKey = \"\".concat(fnName, \"-\").concat(tleStrShort, \"-\").concat(timestampCopy, \"-\").concat(observerLat, \"-\").concat(observerLng, \"\\n-\").concat(observerHeight);\n        if (this.cache[cacheKey]) return this.cache[cacheKey]; // Sanity check\n\n        if (!satellitejs) {\n          throw new Error('satellite.js not found');\n        } // Initialize a satellite record\n\n\n        var satrec = satellitejs.twoline2satrec(tleArr[0], tleArr[1]);\n        var time = new Date(timestampCopy); // Propagate SGP4.\n\n        var positionAndVelocity = satellitejs.propagate(satrec, time);\n\n        if (satellitejs.error) {\n          throw new Error('Error: problematic TLE with unexpected eccentricity');\n        } // The position_velocity result is a key-value pair of ECI coordinates.\n        // These are the base results from which all other coordinates are derived.\n\n\n        var positionEci = positionAndVelocity.position;\n        var velocityEci = positionAndVelocity.velocity; // Set the observer position (in radians).\n\n        var observerGd = {\n          latitude: (0, _utils._degreesToRadians)(obsLat),\n          longitude: (0, _utils._degreesToRadians)(obsLng),\n          height: obsHeight\n        }; // Get GMST for some coordinate transforms.\n        // http://en.wikipedia.org/wiki/Sidereal_time#Definition\n\n        var gmst = satellitejs.gstimeFromDate(time); // Get ECF, Geodetic, Look Angles, and Doppler Factor.\n\n        var positionEcf = satellitejs.eciToEcf(positionEci, gmst);\n        var positionGd = satellitejs.eciToGeodetic(positionEci, gmst);\n        var lookAngles = satellitejs.ecfToLookAngles(observerGd, positionEcf);\n        var velocityKmS = Math.sqrt(Math.pow(velocityEci.x, 2) + Math.pow(velocityEci.y, 2) + Math.pow(velocityEci.z, 2)); // Azimuth: is simply the compass heading from the observer's position.\n\n        var azimuth = lookAngles.azimuth; // Geodetic coords are accessed via `longitude`, `latitude`, `height`.\n\n        var longitude = positionGd.longitude;\n        var latitude = positionGd.latitude;\n        var height = positionGd.height;\n        var output = {\n          lng: satellitejs.degreesLong(longitude),\n          lat: satellitejs.degreesLat(latitude),\n          elevation: (0, _utils._radiansToDegrees)(lookAngles.elevation),\n          azimuth: (0, _utils._radiansToDegrees)(azimuth),\n          range: lookAngles.rangeSat,\n          height: height,\n          velocity: velocityKmS\n        };\n        this.cache[cacheKey] = output;\n        return output;\n      }\n    }, {\n      key: \"getLatLon\",\n      value: function getLatLon(tle) {\n        var optionalTimestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n        var tleObj = this.parseTLE(tle); // Validation.\n\n        if (!this.isValidTLE(tleObj)) {\n          throw new Error('TLE could not be parsed:', tle);\n        }\n\n        var satInfo = this.getSatelliteInfo(tleObj.arr, optionalTimestamp);\n        return {\n          lat: satInfo.lat,\n          lng: satInfo.lng\n        };\n      }\n    }, {\n      key: \"getLatLonArr\",\n      value: function getLatLonArr(tle) {\n        var optionalTimestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n        var ll = this.getLatLon(tle, optionalTimestamp);\n        return [ll.lat, ll.lng];\n      }\n    }, {\n      key: \"getLatLonAtEpoch\",\n      value: function getLatLonAtEpoch(tle) {\n        return this.getLatLon(tle, this.getEpochTimestamp(tle));\n      }\n    }, {\n      key: \"getAverageOrbitLengthMins\",\n      value: function getAverageOrbitLengthMins(tle) {\n        var fnName = 'getAverageOrbitLengthMins';\n        var tleStr = tle.join('').substr(0, 30);\n        var cacheKey = \"\".concat(fnName, \"-\").concat(tleStr);\n        if (this.cache[cacheKey]) return this.cache[cacheKey];\n        var meanMotionSeconds = 24 * 60 / this.getMeanMotion(tle);\n        this.cache[cacheKey] = meanMotionSeconds;\n        return meanMotionSeconds;\n      }\n    }, {\n      key: \"getTLEEpochTimestamp\",\n      value: function getTLEEpochTimestamp(tle) {\n        var epochYear = this.getEpochYear(tle);\n        var epochDayOfYear = this.getEpochDay(tle);\n        var timestamp = (0, _utils._dayOfYearToTimeStamp)(epochDayOfYear, epochYear);\n        return timestamp;\n      }\n    }, {\n      key: \"getCachedLastAntemeridianCrossingTimeMS\",\n      value: function getCachedLastAntemeridianCrossingTimeMS(tle, timeMS) {\n        var orbitLengthMS = this.getAverageOrbitLengthMins(tle.arr) * 60 * 1000;\n        var tleStr = tle.arr.join('').substr(0, 30);\n        var cachedCrossingTimes = this.cache.antemeridianCrossings[tleStr];\n        if (!cachedCrossingTimes) return false;\n        if (cachedCrossingTimes === -1) return cachedCrossingTimes;\n        var cachedTime = cachedCrossingTimes.filter(function (val) {\n          if (_typeof(val) === 'object' && val.tle === tle) return -1;\n          var diff = timeMS - val;\n          var isDiffPositive = diff > 0;\n          var isWithinOrbit = isDiffPositive && diff < orbitLengthMS;\n          return isWithinOrbit;\n        });\n        return cachedTime[0] || false;\n      }\n    }, {\n      key: \"getLastAntemeridianCrossingTimeMS\",\n      value: function getLastAntemeridianCrossingTimeMS(tle, timeMS) {\n        var parsedTLE = this.parseTLE(tle);\n        var cachedVal = this.getCachedLastAntemeridianCrossingTimeMS(parsedTLE, timeMS);\n        if (cachedVal) return cachedVal;\n        var time = timeMS || Date.now();\n        var step = 1000 * 60 * 10;\n        var curLatLon = [];\n        var lastLatLon = [];\n        var curTimeMS = time;\n        var didCrossAntemeridian = false;\n        var tries = 0;\n        var isDone = false;\n        var maxTries = 1000;\n\n        while (!isDone) {\n          curLatLon = this.getLatLonArr(parsedTLE.arr, curTimeMS);\n          didCrossAntemeridian = (0, _utils._crossesAntemeridian)(lastLatLon[1], curLatLon[1]);\n\n          if (didCrossAntemeridian) {\n            // back up\n            curTimeMS += step;\n            step = step > 20000 ? 20000 : step / 2;\n          } else {\n            curTimeMS -= step;\n            lastLatLon = curLatLon;\n          }\n\n          isDone = step < 500 || tries >= maxTries;\n          tries++;\n        }\n\n        var couldNotFindCrossing = tries - 1 === maxTries;\n        var crossingTime = couldNotFindCrossing ? -1 : parseInt(curTimeMS, 10);\n        var tleStr = parsedTLE.arr.join('').substr(0, 30);\n        if (!this.cache.antemeridianCrossings[tleStr]) this.cache.antemeridianCrossings[tleStr] = [];\n\n        if (couldNotFindCrossing) {\n          this.cache.antemeridianCrossings[tleStr] = -1;\n        } else {\n          this.cache.antemeridianCrossings[tleStr].push(crossingTime);\n        }\n\n        return crossingTime;\n      }\n    }, {\n      key: \"getOrbitTimeMS\",\n      value: function getOrbitTimeMS(tle) {\n        return parseInt(_constants._MS_IN_A_DAY / this.getMeanMotion(tle), 10);\n      }\n    }, {\n      key: \"getGroundTrackLatLng\",\n      value: function getGroundTrackLatLng(tle, stepMS, optionalTimeMS) {\n        var _this3 = this;\n\n        var fnName = 'getGroundTrackLatLng';\n        var timeMS = optionalTimeMS || Date.now();\n        var timeS = (timeMS / 1000).toFixed();\n        var parsedTLE = this.parseTLE(tle);\n        var tleStrTrimmed = parsedTLE.arr[1].substr(0, 30);\n        var orbitTimeMS = this.getOrbitTimeMS(tle);\n        var curOrbitStartMS = this.getLastAntemeridianCrossingTimeMS(parsedTLE, timeMS);\n        var foundCrossing = curOrbitStartMS !== -1;\n        var cacheKey;\n\n        if (foundCrossing) {\n          var curOrbitStartS = (curOrbitStartMS / 1000).toFixed(); // Check for memoized values.\n\n          cacheKey = \"\".concat(fnName, \"-\").concat(tleStrTrimmed, \"-\").concat(stepMS, \"-\").concat(curOrbitStartS);\n          if (this.cache[cacheKey]) return this.cache[cacheKey];\n        } else {\n          // Geosync or unusual orbit.\n          cacheKey = \"\".concat(fnName, \"-\").concat(tleStrTrimmed, \"-\").concat(stepMS, \"-\").concat(timeS);\n          if (this.cache[cacheKey]) return this.cache[cacheKey];\n          this.cache[cacheKey] = [this.getOrbitTrack(parsedTLE.arr, timeMS, 600000, 86400000)];\n          return this.cache[cacheKey];\n        }\n\n        var lastOrbitStartMS = this.getLastAntemeridianCrossingTimeMS(tle, curOrbitStartMS - 10000);\n        var nextOrbitStartMS = this.getLastAntemeridianCrossingTimeMS(tle, curOrbitStartMS + orbitTimeMS + 1000 * 60 * 30);\n        var orbitStartTimes = [lastOrbitStartMS, curOrbitStartMS, nextOrbitStartMS];\n        var orbitLatLons = orbitStartTimes.map(function (orbitStartMS) {\n          return _this3.getOrbitTrack(parsedTLE.arr, orbitStartMS, stepMS, false);\n        });\n        this.cache[cacheKey] = orbitLatLons;\n        return orbitLatLons;\n      }\n    }, {\n      key: \"getOrbitTrack\",\n      value: function getOrbitTrack(TLEArr, startTimeMS, stepMS) {\n        var maxTimeMS = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 6000000;\n        var fnName = 'getOrbitTrack';\n        if (!startTimeMS) return []; // Memoization.\n\n        var tleStr = TLEArr.join('');\n        var tleStrTrimmed = tleStr.substr(0, 30);\n        var startTime = (startTimeMS / 10000).toFixed();\n        var cacheKey = \"\".concat(fnName, \"-\").concat(tleStrTrimmed, \"-\").concat(startTime, \"-\").concat(stepMS);\n        if (this.cache[cacheKey]) return this.cache[cacheKey]; // default to 1 minute intervals\n\n        var defaultStepMS = 1000 * 60 * 1;\n        var stepMSCopy = stepMS || defaultStepMS;\n        var latLons = [];\n        var curTimeMS = startTimeMS;\n        var lastLatLon = [];\n        var curLatLon = [];\n        var isDone = false;\n        var doesCrossAntemeridian = false;\n\n        while (!isDone) {\n          curLatLon = this.getLatLonArr(TLEArr, curTimeMS);\n          doesCrossAntemeridian = (0, _utils._crossesAntemeridian)(lastLatLon[1], curLatLon[1]);\n\n          if (doesCrossAntemeridian) {\n            if (stepMSCopy === 500) isDone = true; // Go back a bit.\n\n            curTimeMS -= stepMSCopy;\n            stepMSCopy = 500;\n          } else {\n            latLons.push(curLatLon);\n            curTimeMS += stepMSCopy;\n            lastLatLon = curLatLon;\n          }\n\n          if (maxTimeMS && curTimeMS - startTimeMS > maxTimeMS) isDone = true;\n        }\n\n        this.cache[cacheKey] = latLons;\n        return latLons;\n      }\n    }, {\n      key: \"getSatBearing\",\n      value: function getSatBearing(tle, customTimeMS) {\n        var parsedTLE = this.parseTLE(tle);\n        var timeMS = customTimeMS || Date.now();\n        var latLon1 = this.getLatLonArr(parsedTLE.arr, timeMS);\n        var latLon2 = this.getLatLonArr(parsedTLE.arr, timeMS + 10000);\n        var doesCrossAntemeridian = (0, _utils._crossesAntemeridian)(latLon1[1], latLon2[1]);\n\n        if (doesCrossAntemeridian) {\n          // TODO: fix\n          return {}; // return this.getSatBearing(tle, customTimeMS + 10000);\n        }\n\n        var lat1 = (0, _utils._degreesToRadians)(latLon1[0]);\n        var lat2 = (0, _utils._degreesToRadians)(latLon2[0]);\n        var lon1 = (0, _utils._degreesToRadians)(latLon1[1]);\n        var lon2 = (0, _utils._degreesToRadians)(latLon2[1]);\n        var NS = lat1 >= lat2 ? 'S' : 'N';\n        var EW = lon1 >= lon2 ? 'W' : 'E';\n        var y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n        var x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n        var degrees = (0, _utils._radiansToDegrees)(Math.atan2(y, x));\n        return {\n          degrees: degrees,\n          compass: \"\".concat(NS).concat(EW)\n        };\n      }\n    }, {\n      key: \"getGroundTrackLngLat\",\n      value: function getGroundTrackLngLat(tle, stepMS, optionalTimeMS) {\n        var latLngArr = this.getGroundTrackLatLng(tle, stepMS, optionalTimeMS);\n        var lngLatArr = latLngArr.map(function (line) {\n          return line.map(function (latLng) {\n            return [latLng[1], latLng[0]];\n          });\n        });\n        return lngLatArr;\n      }\n    }]);\n\n    return TLEJS;\n  }();\n\n  exports.default = TLEJS;\n  module.exports = exports[\"default\"];\n});\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;(function (root, factory) {\n    if (true) {\n        //Allow using this built library as an AMD module\n        //in another project. That other project will only\n        //see this AMD call, not the internal modules in\n        //the closure below.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        //Browser globals case. Just assign the\n        //result to a property on the global.\n        root.satellite = factory();\n    }\n}(this, function () {/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"almond\", function(){});\n\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('constants',[], function() {\n    'use strict';\n\n    var pi = Math.PI,\n        mu = 398600.5,                  // in km3 / s2\n        earthRadius =  6378.137,        // in km\n        xke = 60.0 / Math.sqrt(earthRadius * earthRadius * earthRadius / mu),\n        j2 = 0.00108262998905,\n        j3 = -0.00000253215306;\n\n    return {\n        pi: pi,\n        twoPi: pi * 2,\n        deg2rad: pi / 180.0,\n        rad2deg: 180 / pi,\n        minutesPerDay: 1440.0,\n        mu: mu,\n        earthRadius: earthRadius,\n        xke: xke,\n        tumin: 1.0 / xke,\n        j2: j2,\n        j3: j3,\n        j4: -0.00000161098761,\n        j3oj2: j3 / j2,\n        x2o3: 2.0 / 3.0\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/degrees-lat',[\n    '../constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(radians) {\n        if (radians > constants.pi/2 || radians < (-constants.pi/2)){\n            return 'Err';\n        }\n        var degrees = (radians/constants.pi*180);\n        if (degrees < 0){\n            degrees = degrees;\n        }\n        else{\n            degrees = degrees;\n        }\n        return degrees;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/degrees-long',[\n    '../constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function (radians) {\n        var degrees = (radians/constants.pi*180) % (360);\n        if (degrees > 180){\n            degrees = 360 - degrees;\n        }\n        else if (degrees < -180){\n            degrees = 360 + degrees;\n        }\n        return degrees;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/ecf-to-eci',[], function() {\n    'use strict';\n\n    return function ecfToEci (ecfCoords, gmst){\n        // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n        //\n        // [X]     [C -S  0][X]\n        // [Y]  =  [S  C  0][Y]\n        // [Z]eci  [0  0  1][Z]ecf\n        //\n        var X = (ecfCoords.x * Math.cos(gmst))    - (ecfCoords.y * Math.sin(gmst));\n        var Y = (ecfCoords.x * (Math.sin(gmst)))  + (ecfCoords.y * Math.cos(gmst));\n        var Z =  ecfCoords.z;\n        return { x : X, y : Y, z : Z };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/geodetic-to-ecf',[], function() {\n    'use strict';\n\n    return function (geodeticCoords) {\n        var longitude   = geodeticCoords.longitude;\n        var latitude    = geodeticCoords.latitude;\n        var height      = geodeticCoords.height;\n        var a           = 6378.137;\n        var b           = 6356.7523142;\n        var f           = (a - b)/a;\n        var e2          = ((2*f) - (f*f));\n        var normal      = a / Math.sqrt( 1 - (e2*(Math.sin(latitude)*Math.sin(latitude))));\n\n        var X           = (normal + height) * Math.cos (latitude) * Math.cos (longitude);\n        var Y           = (normal + height) * Math.cos (latitude) * Math.sin (longitude);\n        var Z           = ((normal*(1-e2)) + height) * Math.sin (latitude);\n        return { x : X, y : Y, z : Z };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/topocentric',[\n    './geodetic-to-ecf'\n], function(\n    geodeticToEcf\n) {\n    'use strict';\n\n    return function(observerCoords, satelliteCoords) {\n        // http://www.celestrak.com/columns/v02n02/\n        // TS Kelso's method, except I'm using ECF frame\n        // and he uses ECI.\n\n        var longitude   = observerCoords.longitude;\n        var latitude    = observerCoords.latitude;\n\n        // TODO: defined but never used\n        //var height      = observerCoords.height;\n\n        var observerEcf = geodeticToEcf (observerCoords);\n\n        var rx      = satelliteCoords.x - observerEcf.x;\n        var ry      = satelliteCoords.y - observerEcf.y;\n        var rz      = satelliteCoords.z - observerEcf.z;\n\n        var topS   = ( (Math.sin(latitude) * Math.cos(longitude) * rx) +\n        (Math.sin(latitude) * Math.sin(longitude) * ry) -\n        (Math.cos(latitude) * rz));\n        var topE   = ( -Math.sin(longitude) * rx) + (Math.cos(longitude) * ry);\n        var topZ   = ( (Math.cos(latitude)*Math.cos(longitude)*rx) +\n        (Math.cos(latitude)*Math.sin(longitude)*ry) +\n        (Math.sin(latitude)*rz));\n        return { topS : topS, topE : topE, topZ : topZ };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/topocentric-to-look-angles',[\n    '../constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    /**\n     * @param {Object} topocentric\n     * @param {Number} topocentric.topS Positive horizontal vector S due south.\n     * @param {Number} topocentric.topE Positive horizontal vector E due east.\n     * @param {Number} topocentric.topZ Vector Z normal to the surface of the earth (up).\n     * @returns {Object}\n     */\n    return function(topocentric) {\n        var topS = topocentric.topS;\n        var topE = topocentric.topE;\n        var topZ = topocentric.topZ;\n        var rangeSat    = Math.sqrt((topS*topS) + (topE*topE) + (topZ*topZ));\n        var El      = Math.asin (topZ/rangeSat);\n        var Az      = Math.atan2 (-topE, topS) + constants.pi;\n\n        return {\n            azimuth : Az,\n            elevation : El,\n            rangeSat : rangeSat  // Range in km.\n        };\n    };\n});\n\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/ecf-to-look-angles',[\n    './topocentric',\n    './topocentric-to-look-angles'\n], function(\n    topocentric,\n    topocentricToLookAngles\n) {\n    'use strict';\n\n    return function (observerCoordsEcf, satelliteCoordsEcf) {\n        var topocentricCoords = topocentric(observerCoordsEcf, satelliteCoordsEcf);\n        return topocentricToLookAngles(topocentricCoords);\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/eci-to-ecf',[], function() {\n    'use strict';\n\n    return function(eciCoords, gmst){\n        // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n        //\n        // [X]     [C -S  0][X]\n        // [Y]  =  [S  C  0][Y]\n        // [Z]eci  [0  0  1][Z]ecf\n        //\n        //\n        // Inverse:\n        // [X]     [C  S  0][X]\n        // [Y]  =  [-S C  0][Y]\n        // [Z]ecf  [0  0  1][Z]eci\n\n        var X = (eciCoords.x * Math.cos(gmst))    + (eciCoords.y * Math.sin(gmst));\n        var Y = (eciCoords.x * (-Math.sin(gmst))) + (eciCoords.y * Math.cos(gmst));\n        var Z =  eciCoords.z;\n        return { x : X, y : Y, z : Z };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/eci-to-geodetic',[], function() {\n    'use strict';\n\n    return function (eciCoords, gmst) {\n        // http://www.celestrak.com/columns/v02n03/\n        var a   = 6378.137;\n        var b   = 6356.7523142;\n        var R   = Math.sqrt( (eciCoords.x * eciCoords.x) + (eciCoords.y * eciCoords.y) );\n        var f   = (a - b)/a;\n        var e2  = ((2*f) - (f*f));\n        var longitude = Math.atan2(eciCoords.y, eciCoords.x) - gmst;\n        var kmax = 20;\n        var k = 0;\n        var latitude = Math.atan2(eciCoords.z,\n            Math.sqrt(eciCoords.x * eciCoords.x +\n            eciCoords.y * eciCoords.y));\n        var C;\n        while (k < kmax){\n            C = 1 / Math.sqrt( 1 - e2*(Math.sin(latitude)*Math.sin(latitude)) );\n            latitude = Math.atan2 (eciCoords.z + (a*C*e2*Math.sin(latitude)), R);\n            k += 1;\n        }\n        var height = (R/Math.cos(latitude)) - (a*C);\n        return { longitude : longitude, latitude : latitude, height : height };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('doppler-factor',[], function() {\n    'use strict';\n\n    return function (myLocation, position, velocity) {\n        var currentRange = Math.sqrt(\n            Math.pow(position.x - myLocation.x, 2) +\n            Math.pow(position.y - myLocation.y, 2) +\n            Math.pow(position.z - myLocation.z, 2));\n        var nextPos   = {\n            x : position.x + velocity.x,\n            y : position.y + velocity.y,\n            z : position.z + velocity.z\n        };\n        var nextRange =  Math.sqrt(\n            Math.pow(nextPos.x - myLocation.x, 2) +\n            Math.pow(nextPos.y - myLocation.y, 2) +\n            Math.pow(nextPos.z - myLocation.z, 2));\n        var rangeRate =  nextRange - currentRange;\n\n        function sign(value) {\n            return value >= 0 ? 1 : -1;\n        }\n\n        rangeRate *= sign(rangeRate);\n        var c = 299792.458; // Speed of light in km/s\n        var factor = (1 + rangeRate/c);\n        return factor;\n    };\n});\ndefine('gstime/days2mdhms',[], function() {\n    'use strict';\n\n    return function(year, days){\n        /* -----------------------------------------------------------------------------\n         *\n         *                           procedure days2mdhms\n         *\n         *  this procedure converts the day of the year, days, to the equivalent month\n         *    day, hour, minute and second.\n         *\n         *  algorithm     : set up array for the number of days per month\n         *                  find leap year - use 1900 because 2000 is a leap year\n         *                  loop through a temp value while the value is < the days\n         *                  perform int conversions to the correct day and month\n         *                  convert remainder into h m s using type conversions\n         *\n         *  author        : david vallado                  719-573-2600    1 mar 2001\n         *\n         *  inputs          description                    range / units\n         *    year        - year                           1900 .. 2100\n         *    days        - julian day of the year         0.0  .. 366.0\n         *\n         *  outputs       :\n         *    mon         - month                          1 .. 12\n         *    day         - day                            1 .. 28,29,30,31\n         *    hr          - hour                           0 .. 23\n         *    min         - minute                         0 .. 59\n         *    sec         - second                         0.0 .. 59.999\n         *\n         *  locals        :\n         *    dayofyr     - day of year\n         *    temp        - temporary extended values\n         *    inttemp     - temporary int value\n         *    i           - index\n         *    lmonth[12]  - int array containing the number of days per month\n         *\n         *  coupling      :\n         *    none.\n         * --------------------------------------------------------------------------- */\n\n        var lmonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        var dayofyr = Math.floor(days);\n        //  ----------------- find month and day of month ----------------\n        if ((year % 4) === 0){\n            lmonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n        }\n\n        var i = 1;\n        var inttemp = 0;\n        while ((dayofyr > (inttemp + lmonth[i-1])) && i < 12) {\n            inttemp = inttemp + lmonth[i-1];\n            i += 1;\n        }\n        var mon = i;\n        var day = dayofyr - inttemp;\n\n        //  ----------------- find hours minutes and seconds -------------\n        var temp = (days - dayofyr) * 24.0;\n        var hr   = Math.floor(temp);\n        temp = (temp - hr) * 60.0;\n        var minute  = Math.floor(temp);\n        var sec  = (temp - minute) * 60.0;\n\n        var mdhmsResult = {\n            mon : mon,\n            day : day,\n            hr : hr,\n            minute : minute,\n            sec : sec\n        };\n\n        return mdhmsResult;\n    };\n});\ndefine('gstime/gstime',[\n    '../constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(jdut1) {\n        /* -----------------------------------------------------------------------------\n         *\n         *                           function gstime\n         *\n         *  this function finds the greenwich sidereal time.\n         *\n         *  author        : david vallado                  719-573-2600    1 mar 2001\n         *\n         *  inputs          description                    range / units\n         *    jdut1       - julian date in ut1             days from 4713 bc\n         *\n         *  outputs       :\n         *    gstime      - greenwich sidereal time        0 to 2pi rad\n         *\n         *  locals        :\n         *    temp        - temporary variable for doubles   rad\n         *    tut1        - julian centuries from the\n         *                  jan 1, 2000 12 h epoch (ut1)\n         *\n         *  coupling      :\n         *    none\n         *\n         *  references    :\n         *    vallado       2004, 191, eq 3-45\n         * --------------------------------------------------------------------------- */\n\n        var tut1 = (jdut1 - 2451545.0) / 36525.0;\n        var temp = -6.2e-6* tut1 * tut1 * tut1 + 0.093104 * tut1 * tut1 +\n            (876600.0*3600 + 8640184.812866) * tut1 + 67310.54841;  //#  sec\n        temp = (temp * constants.deg2rad / 240.0) % constants.twoPi; // 360/86400 = 1/240, to deg, to rad\n\n        //  ------------------------ check quadrants ---------------------\n        if (temp < 0.0){\n            temp += constants.twoPi;\n        }\n        return temp;\n    };\n});\ndefine('gstime/jday',[], function() {\n    'use strict';\n\n    return function(year, mon, day, hr, minute, sec) {\n        if (year instanceof Date) {\n            var date = year;\n            year = date.getUTCFullYear();\n            mon = date.getUTCMonth() + 1;   // Note, this function requires months in range 1-12.\n            day = date.getUTCDate();\n            hr = date.getUTCHours();\n            minute = date.getUTCMinutes();\n            sec = date.getUTCSeconds();\n        }\n\n        return (367.0 * year -\n        Math.floor((7 * (year + Math.floor((mon + 9) / 12.0))) * 0.25) +\n        Math.floor( 275 * mon / 9.0 ) +\n        day + 1721013.5 +\n        ((sec / 60.0 + minute) / 60.0 + hr) / 24.0  //  ut in days\n            //#  - 0.5*sgn(100.0*year + mon - 190002.5) + 0.5;\n        );\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('dpper',[\n    './constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(satrec, dpperParameters) {\n        /* -----------------------------------------------------------------------------\n         *\n         *                           procedure dpper\n         *\n         *  this procedure provides deep space long period periodic contributions\n         *    to the mean elements.  by design, these periodics are zero at epoch.\n         *    this used to be dscom which included initialization, but it's really a\n         *    recurring function.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    e3          -\n         *    ee2         -\n         *    peo         -\n         *    pgho        -\n         *    pho         -\n         *    pinco       -\n         *    plo         -\n         *    se2 , se3 , sgh2, sgh3, sgh4, sh2, sh3, si2, si3, sl2, sl3, sl4 -\n         *    t           -\n         *    xh2, xh3, xi2, xi3, xl2, xl3, xl4 -\n         *    zmol        -\n         *    zmos        -\n         *    ep          - eccentricity                           0.0 - 1.0\n         *    inclo       - inclination - needed for lyddane modification\n         *    nodep       - right ascension of ascending node\n         *    argpp       - argument of perigee\n         *    mp          - mean anomaly\n         *\n         *  outputs       :\n         *    ep          - eccentricity                           0.0 - 1.0\n         *    inclp       - inclination\n         *    nodep        - right ascension of ascending node\n         *    argpp       - argument of perigee\n         *    mp          - mean anomaly\n         *\n         *  locals        :\n         *    alfdp       -\n         *    betdp       -\n         *    cosip  , sinip  , cosop  , sinop  ,\n         *    dalf        -\n         *    dbet        -\n         *    dls         -\n         *    f2, f3      -\n         *    pe          -\n         *    pgh         -\n         *    ph          -\n         *    pinc        -\n         *    pl          -\n         *    sel   , ses   , sghl  , sghs  , shl   , shs   , sil   , sinzf , sis   ,\n         *    sll   , sls\n         *    xls         -\n         *    xnoh        -\n         *    zf          -\n         *    zm          -\n         *\n         *  coupling      :\n         *    none.\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        // TODO: defined but never used\n        //var inclo   = dpperParameters.inclo;\n\n        var init    = dpperParameters.init,\n            ep      = dpperParameters.ep,\n            inclp   = dpperParameters.inclp,\n            nodep   = dpperParameters.nodep,\n            argpp   = dpperParameters.argpp,\n            mp      = dpperParameters.mp,\n            opsmode = dpperParameters.opsmode;\n\n\n        // Copy satellite attributes into local variables for convenience\n        // and symmetry in writing formulae.\n\n        var alfdp, betdp,\n            cosip, sinip, cosop, sinop,\n            dalf, dbet, dls,\n            f2, f3,\n            pe, pgh, ph, pinc, pl,\n            sel, ses, sghl, sghs, shs, sil, sinzf, sis,  sll, sls,\n            xls, xnoh, zf, zm, shll;\n\n        // TODO: defined but never used\n        //var shl;\n\n        var e3      = satrec.e3;\n        var ee2     = satrec.ee2;\n        var peo     = satrec.peo;\n        var pgho    = satrec.pgho;\n        var pho     = satrec.pho;\n        var pinco   = satrec.pinco;\n        var plo     = satrec.plo;\n        var se2     = satrec.se2;\n        var se3     = satrec.se3;\n        var sgh2    = satrec.sgh2;\n        var sgh3    = satrec.sgh3;\n        var sgh4    = satrec.sgh4;\n        var sh2     = satrec.sh2;\n        var sh3     = satrec.sh3;\n        var si2     = satrec.si2;\n        var si3     = satrec.si3;\n        var sl2     = satrec.sl2;\n        var sl3     = satrec.sl3;\n        var sl4     = satrec.sl4;\n        var t       = satrec.t;\n        var xgh2    = satrec.xgh2;\n        var xgh3    = satrec.xgh3;\n        var xgh4    = satrec.xgh4;\n        var xh2     = satrec.xh2;\n        var xh3     = satrec.xh3;\n        var xi2     = satrec.xi2;\n        var xi3     = satrec.xi3;\n        var xl2     = satrec.xl2;\n        var xl3     = satrec.xl3;\n        var xl4     = satrec.xl4;\n        var zmol    = satrec.zmol;\n        var zmos    = satrec.zmos;\n\n        //  ---------------------- constants -----------------------------\n        var zns     = 1.19459e-5;\n        var zes     = 0.01675;\n        var znl     = 1.5835218e-4;\n        var zel     = 0.05490;\n\n        //  --------------- calculate time varying periodics -----------\n        zm      = zmos + zns * t;\n        // be sure that the initial call has time set to zero\n        if (init === 'y') {\n            zm      = zmos;\n        }\n        zf      = zm    + 2.0   * zes   * Math.sin(zm);\n        sinzf   = Math.sin(zf);\n        f2      =  0.5  * sinzf * sinzf - 0.25;\n        f3      = -0.5  * sinzf * Math.cos(zf);\n        ses     = se2   * f2    + se3   * f3;\n        sis     = si2   * f2    + si3   * f3;\n        sls     = sl2   * f2    + sl3   * f3    + sl4   * sinzf;\n        sghs    = sgh2  * f2    + sgh3  * f3    + sgh4  * sinzf;\n        shs     = sh2   * f2    + sh3   * f3;\n        zm          = zmol  + znl   * t;\n        if (init === 'y') {\n            zm      = zmol;\n        }\n\n        zf          = zm    + 2.0   * zel   * Math.sin(zm);\n        sinzf       = Math.sin(zf);\n        f2          =  0.5  * sinzf * sinzf - 0.25;\n        f3          = -0.5  * sinzf * Math.cos(zf);\n        sel     = ee2   * f2    + e3    * f3;\n        sil     = xi2   * f2    + xi3   * f3;\n        sll     = xl2   * f2    + xl3   * f3    + xl4 * sinzf;\n        sghl    = xgh2  * f2    + xgh3  * f3    + xgh4 * sinzf;\n        shll    = xh2   * f2    + xh3   * f3;\n        pe      = ses   + sel;\n        pinc    = sis   + sil;\n        pl      = sls   + sll;\n        pgh     = sghs  + sghl;\n        ph      = shs   + shll;\n\n        if (init === 'n'){\n            pe      = pe    - peo;\n            pinc    = pinc  - pinco;\n            pl      = pl    - plo;\n            pgh     = pgh   - pgho;\n            ph      = ph    - pho;\n            inclp   = inclp + pinc;\n            ep      = ep    + pe;\n            sinip = Math.sin(inclp);\n            cosip = Math.cos(inclp);\n\n            /* ----------------- apply periodics directly ------------ */\n            //  sgp4fix for lyddane choice\n            //  strn3 used original inclination - this is technically feasible\n            //  gsfc used perturbed inclination - also technically feasible\n            //  probably best to readjust the 0.2 limit value and limit discontinuity\n            //  0.2 rad = 11.45916 deg\n            //  use next line for original strn3 approach and original inclination\n            //  if (inclo >= 0.2)\n            //  use next line for gsfc version and perturbed inclination\n            if (inclp >= 0.2) {\n                ph      = ph    / sinip;\n                pgh     = pgh   - cosip     * ph;\n                argpp   = argpp + pgh;\n                nodep   = nodep + ph;\n                mp      = mp    + pl;\n            }\n            else {\n                //  ---- apply periodics with lyddane modification ----\n                sinop   = Math.sin(nodep);\n                cosop   = Math.cos(nodep);\n                alfdp   = sinip * sinop;\n                betdp   = sinip * cosop;\n                dalf    =  ph   * cosop + pinc * cosip * sinop;\n                dbet    = -ph   * sinop + pinc * cosip * cosop;\n                alfdp       = alfdp + dalf;\n                betdp       = betdp + dbet;\n                nodep       = nodep % constants.twoPi;\n                //  sgp4fix for afspc written intrinsic functions\n                //  nodep used without a trigonometric function ahead\n                if (nodep < 0.0 && opsmode === 'a') {\n                    nodep   = nodep + constants.twoPi;\n                }\n                xls     = mp    + argpp + cosip * nodep;\n                dls     = pl    + pgh   - pinc  * nodep * sinip;\n                xls         = xls   + dls;\n                xnoh    = nodep;\n                nodep       = Math.atan2(alfdp, betdp);\n                //  sgp4fix for afspc written intrinsic functions\n                //  nodep used without a trigonometric function ahead\n                if (nodep < 0.0 && opsmode === 'a'){\n                    nodep = nodep + constants.twoPi;\n                }\n                if (Math.abs(xnoh - nodep) > constants.pi) {\n                    if (nodep < xnoh){\n                        nodep = nodep + constants.twoPi;\n                    }\n                    else{\n                        nodep = nodep - constants.twoPi;\n                    }\n                }\n                mp    = mp  + pl;\n                argpp = xls - mp - cosip * nodep;\n            }\n        }\n        var dpperResult = {\n            ep : ep,\n            inclp : inclp,\n            nodep : nodep,\n            argpp : argpp,\n            mp : mp\n        };\n        return dpperResult;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('dspace',[\n    './constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(dspaceParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                           procedure dspace\n         *\n         *  this procedure provides deep space contributions to mean elements for\n         *    perturbing third body.  these effects have been averaged over one\n         *    revolution of the sun and moon.  for earth resonance effects, the\n         *    effects have been averaged over no revolutions of the satellite.\n         *    (mean motion)\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433 -\n         *    dedt        -\n         *    del1, del2, del3  -\n         *    didt        -\n         *    dmdt        -\n         *    dnodt       -\n         *    domdt       -\n         *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n         *    argpo       - argument of perigee\n         *    argpdot     - argument of perigee dot (rate)\n         *    t           - time\n         *    tc          -\n         *    gsto        - gst\n         *    xfact       -\n         *    xlamo       -\n         *    no          - mean motion\n         *    atime       -\n         *    em          - eccentricity\n         *    ft          -\n         *    argpm       - argument of perigee\n         *    inclm       - inclination\n         *    xli         -\n         *    mm          - mean anomaly\n         *    xni         - mean motion\n         *    nodem       - right ascension of ascending node\n         *\n         *  outputs       :\n         *    atime       -\n         *    em          - eccentricity\n         *    argpm       - argument of perigee\n         *    inclm       - inclination\n         *    xli         -\n         *    mm          - mean anomaly\n         *    xni         -\n         *    nodem       - right ascension of ascending node\n         *    dndt        -\n         *    nm          - mean motion\n         *\n         *  locals        :\n         *    delt        -\n         *    ft          -\n         *    theta       -\n         *    x2li        -\n         *    x2omi       -\n         *    xl          -\n         *    xldot       -\n         *    xnddt       -\n         *    xndt        -\n         *    xomi        -\n         *\n         *  coupling      :\n         *    none        -\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var delt,   ft,     theta,  x2li,   x2omi,\n            xl,     xldot,  xnddt,  xndt,   xomi;\n\n        var irez    = dspaceParameters.irez,\n            d2201   = dspaceParameters.d2201,\n            d2211   = dspaceParameters.d2211,\n            d3210   = dspaceParameters.d3210,\n            d3222   = dspaceParameters.d3222,\n            d4410   = dspaceParameters.d4410,\n            d4422   = dspaceParameters.d4422,\n            d5220   = dspaceParameters.d5220,\n            d5232   = dspaceParameters.d5232,\n            d5421   = dspaceParameters.d5421,\n            d5433   = dspaceParameters.d5433,\n            dedt    = dspaceParameters.dedt,\n            del1    = dspaceParameters.del1,\n            del2    = dspaceParameters.del2,\n            del3    = dspaceParameters.del3,\n            didt    = dspaceParameters.didt,\n            dmdt    = dspaceParameters.dmdt,\n            dnodt   = dspaceParameters.dnodt,\n            domdt   = dspaceParameters.domdt,\n            argpo   = dspaceParameters.argpo,\n            argpdot = dspaceParameters.argpdot,\n            t       = dspaceParameters.t,\n            tc      = dspaceParameters.tc,\n            gsto    = dspaceParameters.gsto,\n            xfact   = dspaceParameters.xfact,\n            xlamo   = dspaceParameters.xlamo,\n            no      = dspaceParameters.no,\n            atime   = dspaceParameters.atime,\n            em      = dspaceParameters.em,\n            argpm   = dspaceParameters.argpm,\n            inclm   = dspaceParameters.inclm,\n            xli     = dspaceParameters.xli,\n            mm      = dspaceParameters.mm,\n            xni     = dspaceParameters.xni,\n            nodem   = dspaceParameters.nodem,\n            nm      = dspaceParameters.nm;\n\n\n        var fasx2 = 0.13130908;\n        var fasx4 = 2.8843198;\n        var fasx6 = 0.37448087;\n        var g22   = 5.7686396;\n        var g32   = 0.95240898;\n        var g44   = 1.8014998;\n        var g52   = 1.0508330;\n        var g54   = 4.4108898;\n        var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n        var stepp =    720.0;\n        var stepn =   -720.0;\n        var step2 = 259200.0;\n\n        //  ----------- calculate deep space resonance effects -----------\n        var dndt   = 0.0;\n        theta  = (gsto + tc * rptim) % constants.twoPi;\n        em         = em + dedt * t;\n\n        inclm  = inclm + didt * t;\n        argpm  = argpm + domdt * t;\n        nodem  = nodem + dnodt * t;\n        mm     = mm + dmdt * t;\n\n\n        //   sgp4fix for negative inclinations\n        //   the following if statement should be commented out\n        //  if (inclm < 0.0)\n        // {\n        //    inclm = -inclm;\n        //    argpm = argpm - pi;\n        //    nodem = nodem + pi;\n        //  }\n\n        /* - update resonances : numerical (euler-maclaurin) integration - */\n        /* ------------------------- epoch restart ----------------------  */\n        //   sgp4fix for propagator problems\n        //   the following integration works for negative time steps and periods\n        //   the specific changes are unknown because the original code was so convoluted\n\n        // sgp4fix take out atime = 0.0 and fix for faster operation\n\n        ft    = 0.0;\n        if (irez !== 0){\n            //  sgp4fix streamline check\n            if (atime === 0.0 || t * atime <= 0.0 || Math.abs(t) < Math.abs(atime)){\n                atime  = 0.0;\n                xni    = no;\n                xli    = xlamo;\n            }\n\n            // sgp4fix move check outside loop\n            if (t > 0.0){\n                delt = stepp;\n            }\n            else {\n                delt = stepn;\n            }\n            var iretn = 381; // added for do loop\n            var iret  =   0; // added for loop\n            while (iretn === 381){\n                //  ------------------- dot terms calculated -------------\n                //  ----------- near - synchronous resonance terms -------\n                if (irez !== 2){\n                    xndt  = del1 * Math.sin(xli - fasx2) + del2 * Math.sin(2.0 * (xli - fasx4)) +\n                    del3 * Math.sin(3.0 * (xli - fasx6));\n                    xldot = xni  + xfact;\n                    xnddt = del1 * Math.cos(xli - fasx2) +\n                    2.0 * del2 * Math.cos(2.0 * (xli - fasx4)) +\n                    3.0 * del3 * Math.cos(3.0 * (xli - fasx6));\n                    xnddt = xnddt * xldot;\n                }\n                else{\n                    // --------- near - half-day resonance terms --------\n                    xomi  = argpo + argpdot * atime;\n                    x2omi = xomi + xomi;\n                    x2li  = xli + xli;\n                    xndt  = (d2201 * Math.sin(x2omi + xli  - g22) + d2211 * Math.sin( xli  - g22) +\n                    d3210 * Math.sin(xomi  + xli  - g32) + d3222 * Math.sin(-xomi + xli - g32) +\n                    d4410 * Math.sin(x2omi + x2li - g44) + d4422 * Math.sin( x2li - g44) +\n                    d5220 * Math.sin(xomi  + xli  - g52) + d5232 * Math.sin(-xomi + xli - g52) +\n                    d5421 * Math.sin(xomi  + x2li - g54) + d5433 * Math.sin(-xomi + x2li - g54));\n                    xldot = xni + xfact;\n                    xnddt = (d2201 * Math.cos(x2omi + xli  - g22)   + d2211 * Math.cos(xli - g22) +\n                    d3210 * Math.cos( xomi + xli  - g32)   + d3222 * Math.cos(-xomi + xli - g32) +\n                    d5220 * Math.cos( xomi + xli  - g52)   + d5232 * Math.cos(-xomi + xli - g52) +\n                    2.0 * (d4410 * Math.cos(x2omi + x2li - g44)  +\n                    d4422 * Math.cos( x2li - g44) + d5421  * Math.cos(xomi + x2li - g54) +\n                    d5433 * Math.cos(-xomi + x2li - g54)));\n                    xnddt = xnddt * xldot;\n                }\n                //  ----------------------- integrator -------------------\n                //  sgp4fix move end checks to end of routine\n                if (Math.abs(t - atime) >= stepp){\n                    iret  = 0;\n                    iretn = 381;\n                }\n                else{\n                    ft    = t - atime;\n                    iretn = 0;\n                }\n                if (iretn === 381){\n                    xli   = xli + xldot * delt + xndt * step2;\n                    xni   = xni + xndt * delt + xnddt * step2;\n                    atime = atime + delt;\n                }\n            }\n            nm  = xni + xndt  * ft + xnddt * ft * ft * 0.5;\n            xl  = xli + xldot * ft + xndt  * ft * ft * 0.5;\n            if (irez !== 1){\n                mm   = xl - 2.0 * nodem + 2.0 * theta;\n                dndt = nm - no;\n            }\n            else{\n                mm   = xl - nodem - argpm + theta;\n                dndt = nm - no;\n            }\n            nm = no + dndt;\n        }\n        var dspaceResults = {\n            atime : atime,\n            em : em,\n            argpm : argpm,\n            inclm : inclm,\n            xli : xli,\n            mm : mm,\n            xni : xni,\n            nodem : nodem,\n            dndt : dndt,\n            nm : nm\n        };\n        return dspaceResults;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('sgp4',[\n    './constants',\n    './dpper',\n    './dspace'\n], function(\n    constants,\n    dpper,\n    dspace\n) {\n    'use strict';\n\n    return function (satrec, tsince) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                             procedure sgp4\n         *\n         *  this procedure is the sgp4 prediction model from space command. this is an\n         *    updated and combined version of sgp4 and sdp4, which were originally\n         *    published separately in spacetrack report //3. this version follows the\n         *    methodology from the aiaa paper (2006) describing the history and\n         *    development of the code.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    satrec  - initialised structure from sgp4init() call.\n         *    tsince  - time since epoch (minutes)\n         *\n         *  outputs       :\n         *    r           - position vector                     km\n         *    v           - velocity                            km/sec\n         *  return code - non-zero on error.\n         *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n         *                   2 - mean motion less than 0.0\n         *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n         *                   4 - semi-latus rectum < 0.0\n         *                   5 - epoch elements are sub-orbital\n         *                   6 - satellite has decayed\n         *\n         *  locals        :\n         *    am          -\n         *    axnl, aynl        -\n         *    betal       -\n         *    cosim   , sinim   , cosomm  , sinomm  , cnod    , snod    , cos2u   ,\n         *    sin2u   , coseo1  , sineo1  , cosi    , sini    , cosip   , sinip   ,\n         *    cosisq  , cossu   , sinsu   , cosu    , sinu\n         *    delm        -\n         *    delomg      -\n         *    dndt        -\n         *    eccm        -\n         *    emsq        -\n         *    ecose       -\n         *    el2         -\n         *    eo1         -\n         *    eccp        -\n         *    esine       -\n         *    argpm       -\n         *    argpp       -\n         *    omgadf      -\n         *    pl          -\n         *    r           -\n         *    rtemsq      -\n         *    rdotl       -\n         *    rl          -\n         *    rvdot       -\n         *    rvdotl      -\n         *    su          -\n         *    t2  , t3   , t4    , tc\n         *    tem5, temp , temp1 , temp2  , tempa  , tempe  , templ\n         *    u   , ux   , uy    , uz     , vx     , vy     , vz\n         *    inclm       - inclination\n         *    mm          - mean anomaly\n         *    nm          - mean motion\n         *    nodem       - right asc of ascending node\n         *    xinc        -\n         *    xincp       -\n         *    xl          -\n         *    xlm         -\n         *    mp          -\n         *    xmdf        -\n         *    xmx         -\n         *    xmy         -\n         *    nodedf      -\n         *    xnode       -\n         *    nodep       -\n         *    np          -\n         *\n         *  coupling      :\n         *    getgravconst-\n         *    dpper\n         *    dspace\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report //3 1980\n         *    hoots, norad spacetrack report //6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var am, axnl, aynl, betal,\n            cosim, sinim, cnod, snod, cos2u,\n            sin2u, coseo1, sineo1, cosi, sini, cosip, sinip,\n            cosisq, cossu, sinsu, cosu, sinu,\n            delm, delomg, dndt,\n            emsq, ecose, el2, eo1, esine,\n            argpm, argpp, pl,\n            r, v, rdotl, rl, rvdot, rvdotl, su,\n            t2, t3, t4, tc,\n            tem5, temp, temp1, temp2, tempa, tempe, templ,\n            u, ux, uy, uz, vx, vy, vz,\n            inclm, mm, nm, nodem,\n            xinc, xincp, xl, xlm, mp, xmdf, xmx, xmy,\n            nodedf, xnode, nodep;\n\n        // TODO: defined but never used\n        //var cosomm, sinomm, eccm, eccp, omgadf, rtemsq, np;\n\n        var mrt = 0.0;\n\n        /* ------------------ set mathematical constants --------------- */\n        // sgp4fix divisor for divide by zero check on inclination\n        // the old check used 1.0 + cos(pi-1.0e-9), but then compared it to\n        // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n        var temp4 = 1.5e-12;\n\n        var vkmpersec = constants.earthRadius * constants.xke / 60.0;\n\n        //  --------------------- clear sgp4 error flag -----------------\n        satrec.t = tsince;\n        satrec.error = 0;\n\n        //  ------- update for secular gravity and atmospheric drag -----\n        xmdf = satrec.mo + satrec.mdot * satrec.t;\n        var argpdf = satrec.argpo + satrec.argpdot * satrec.t;\n        nodedf = satrec.nodeo + satrec.nodedot * satrec.t;\n        argpm = argpdf;\n        mm = xmdf;\n        t2 = satrec.t * satrec.t;\n        nodem = nodedf + satrec.nodecf * t2;\n        tempa = 1.0 - satrec.cc1 * satrec.t;\n        tempe = satrec.bstar * satrec.cc4 * satrec.t;\n        templ = satrec.t2cof * t2;\n\n        if (satrec.isimp !== 1) {\n            delomg = satrec.omgcof * satrec.t;\n            //  sgp4fix use mutliply for speed instead of pow\n            var delmtemp = 1.0 + satrec.eta * Math.cos(xmdf);\n            delm = satrec.xmcof *\n            (delmtemp * delmtemp * delmtemp -\n            satrec.delmo);\n            temp = delomg + delm;\n            mm = xmdf + temp;\n            argpm = argpdf - temp;\n            t3 = t2 * satrec.t;\n            t4 = t3 * satrec.t;\n            tempa = tempa - satrec.d2 * t2 - satrec.d3 * t3 -\n            satrec.d4 * t4;\n            tempe = tempe + satrec.bstar * satrec.cc5 * (Math.sin(mm) -\n            satrec.sinmao);\n            templ = templ + satrec.t3cof * t3 + t4 * (satrec.t4cof +\n            satrec.t * satrec.t5cof);\n        }\n        nm = satrec.no;\n        var em = satrec.ecco;\n        inclm = satrec.inclo;\n        if (satrec.method === 'd') {\n            tc = satrec.t;\n\n            var dspaceParameters = {\n                irez: satrec.irez,\n                d2201: satrec.d2201,\n                d2211: satrec.d2211,\n                d3210: satrec.d3210,\n                d3222: satrec.d3222,\n                d4410: satrec.d4410,\n                d4422: satrec.d4422,\n                d5220: satrec.d5220,\n                d5232: satrec.d5232,\n                d5421: satrec.d5421,\n                d5433: satrec.d5433,\n                dedt: satrec.dedt,\n                del1: satrec.del1,\n                del2: satrec.del2,\n                del3: satrec.del3,\n                didt: satrec.didt,\n                dmdt: satrec.dmdt,\n                dnodt: satrec.dnodt,\n                domdt: satrec.domdt,\n                argpo: satrec.argpo,\n                argpdot: satrec.argpdot,\n                t: satrec.t,\n                tc: tc,\n                gsto: satrec.gsto,\n                xfact: satrec.xfact,\n                xlamo: satrec.xlamo,\n                no: satrec.no,\n                atime: satrec.atime,\n                em: em,\n                argpm: argpm,\n                inclm: inclm,\n                xli: satrec.xli,\n                mm: mm,\n                xni: satrec.xni,\n                nodem: nodem,\n                nm: nm\n            };\n\n            var dspaceResult = dspace(dspaceParameters);\n\n            // TODO: defined but never used\n            //var atime = dspaceResult.atime;\n\n            em = dspaceResult.em;\n            argpm = dspaceResult.argpm;\n            inclm = dspaceResult.inclm;\n\n            // TODO: defined but never used\n            //var xli = dspaceResult.xli;\n\n            mm = dspaceResult.mm;\n\n            // TODO: defined but never used\n            //var xni = dspaceResult.xni;\n\n            nodem = dspaceResult.nodem;\n            dndt = dspaceResult.dndt;\n            nm = dspaceResult.nm;\n        }\n\n        if (nm <= 0.0) {\n            //  printf(\"// error nm %f\\n\", nm);\n            satrec.error = 2;\n            //  sgp4fix add return\n            return [false, false];\n        }\n        am = Math.pow((constants.xke / nm), constants.x2o3) * tempa * tempa;\n        nm = constants.xke / Math.pow(am, 1.5);\n        em = em - tempe;\n\n        //  fix tolerance for error recognition\n        //  sgp4fix am is fixed from the previous nm check\n        if (em >= 1.0 || em < -0.001) {  // || (am < 0.95)\n            //  printf(\"// error em %f\\n\", em);\n            satrec.error = 1;\n            //  sgp4fix to return if there is an error in eccentricity\n            return [false, false];\n        }\n        //  sgp4fix fix tolerance to avoid a divide by zero\n        if (em < 1.0e-6) {\n            em = 1.0e-6;\n        }\n        mm = mm + satrec.no * templ;\n        xlm = mm + argpm + nodem;\n        emsq = em * em;\n        temp = 1.0 - emsq;\n\n        nodem = (nodem) % constants.twoPi;\n        argpm = (argpm) % constants.twoPi;\n        xlm = (xlm) % constants.twoPi;\n        mm = (xlm - argpm - nodem) % constants.twoPi;\n\n        //  ----------------- compute extra mean quantities -------------\n        sinim = Math.sin(inclm);\n        cosim = Math.cos(inclm);\n\n        //  -------------------- add lunar-solar periodics --------------\n        var ep = em;\n        xincp = inclm;\n        argpp = argpm;\n        nodep = nodem;\n        mp = mm;\n        sinip = sinim;\n        cosip = cosim;\n        if (satrec.method === 'd') {\n\n            var dpperParameters = {\n                inclo: satrec.inclo,\n                init: 'n',\n                ep: ep,\n                inclp: xincp,\n                nodep: nodep,\n                argpp: argpp,\n                mp: mp,\n                opsmode: satrec.operationmod\n            };\n\n            var dpperResult = dpper(satrec, dpperParameters);\n            ep = dpperResult.ep;\n            xincp = dpperResult.inclp;\n            nodep = dpperResult.nodep;\n            argpp = dpperResult.argpp;\n            mp = dpperResult.mp;\n\n            if (xincp < 0.0) {\n                xincp = -xincp;\n                nodep = nodep + constants.pi;\n                argpp = argpp - constants.pi;\n            }\n            if (ep < 0.0 || ep > 1.0) {\n                //  printf(\"// error ep %f\\n\", ep);\n                satrec.error = 3;\n                //  sgp4fix add return\n                return [false, false];\n            }\n        }\n        //  -------------------- long period periodics ------------------\n        if (satrec.method === 'd') {\n            sinip = Math.sin(xincp);\n            cosip = Math.cos(xincp);\n            satrec.aycof = -0.5 * constants.j3oj2 * sinip;\n            //  sgp4fix for divide by zero for xincp = 180 deg\n            if (Math.abs(cosip + 1.0) > 1.5e-12) {\n                satrec.xlcof = -0.25 * constants.j3oj2 * sinip * (3.0 + 5.0 * cosip) / (1.0 + cosip);\n            }\n            else {\n                satrec.xlcof = -0.25 * constants.j3oj2 * sinip * (3.0 + 5.0 * cosip) / temp4;\n            }\n        }\n        axnl = ep * Math.cos(argpp);\n        temp = 1.0 / (am * (1.0 - ep * ep));\n        aynl = ep * Math.sin(argpp) + temp * satrec.aycof;\n        xl = mp + argpp + nodep + temp * satrec.xlcof * axnl;\n\n        //  --------------------- solve kepler's equation ---------------\n        u = (xl - nodep) % constants.twoPi;\n        eo1 = u;\n        tem5 = 9999.9;\n        var ktr = 1;\n        //    sgp4fix for kepler iteration\n        //    the following iteration needs better limits on corrections\n        while (Math.abs(tem5) >= 1.0e-12 && ktr <= 10) {\n            sineo1 = Math.sin(eo1);\n            coseo1 = Math.cos(eo1);\n            tem5 = 1.0 - coseo1 * axnl - sineo1 * aynl;\n            tem5 = (u - aynl * coseo1 + axnl * sineo1 - eo1) / tem5;\n            if (Math.abs(tem5) >= 0.95) {\n                if (tem5 > 0.0) {\n                    tem5 = 0.95;\n                }\n                else {\n                    tem5 = -0.95;\n                }\n            }\n            eo1 = eo1 + tem5;\n            ktr = ktr + 1;\n        }\n        //  ------------- short period preliminary quantities -----------\n        ecose = axnl * coseo1 + aynl * sineo1;\n        esine = axnl * sineo1 - aynl * coseo1;\n        el2 = axnl * axnl + aynl * aynl;\n        pl = am * (1.0 - el2);\n        if (pl < 0.0) {\n\n            //  printf(\"// error pl %f\\n\", pl);\n            satrec.error = 4;\n            //  sgp4fix add return\n            return [false, false];\n        }\n        else {\n            rl = am * (1.0 - ecose);\n            rdotl = Math.sqrt(am) * esine / rl;\n            rvdotl = Math.sqrt(pl) / rl;\n            betal = Math.sqrt(1.0 - el2);\n            temp = esine / (1.0 + betal);\n            sinu = am / rl * (sineo1 - aynl - axnl * temp);\n            cosu = am / rl * (coseo1 - axnl + aynl * temp);\n            su = Math.atan2(sinu, cosu);\n            sin2u = (cosu + cosu) * sinu;\n            cos2u = 1.0 - 2.0 * sinu * sinu;\n            temp = 1.0 / pl;\n            temp1 = 0.5 * constants.j2 * temp;\n            temp2 = temp1 * temp;\n\n            //  -------------- update for short period periodics ------------\n            if (satrec.method === 'd') {\n                cosisq = cosip * cosip;\n                satrec.con41 = 3.0 * cosisq - 1.0;\n                satrec.x1mth2 = 1.0 - cosisq;\n                satrec.x7thm1 = 7.0 * cosisq - 1.0;\n            }\n            mrt = rl * (1.0 - 1.5 * temp2 * betal * satrec.con41) +\n            0.5 * temp1 * satrec.x1mth2 * cos2u;\n            su = su - 0.25 * temp2 * satrec.x7thm1 * sin2u;\n            xnode = nodep + 1.5 * temp2 * cosip * sin2u;\n            xinc = xincp + 1.5 * temp2 * cosip * sinip * cos2u;\n            var mvt = rdotl - nm * temp1 * satrec.x1mth2 * sin2u / constants.xke;\n            rvdot = rvdotl + nm * temp1 * (satrec.x1mth2 * cos2u +\n            1.5 * satrec.con41) / constants.xke;\n\n            //  --------------------- orientation vectors -------------------\n            sinsu = Math.sin(su);\n            cossu = Math.cos(su);\n            snod = Math.sin(xnode);\n            cnod = Math.cos(xnode);\n            sini = Math.sin(xinc);\n            cosi = Math.cos(xinc);\n            xmx = -snod * cosi;\n            xmy = cnod * cosi;\n            ux = xmx * sinsu + cnod * cossu;\n            uy = xmy * sinsu + snod * cossu;\n            uz = sini * sinsu;\n            vx = xmx * cossu - cnod * sinsu;\n            vy = xmy * cossu - snod * sinsu;\n            vz = sini * cossu;\n\n            //  --------- position and velocity (in km and km/sec) ----------\n            r = {x: 0.0, y: 0.0, z: 0.0};\n            r.x = (mrt * ux) * constants.earthRadius;\n            r.y = (mrt * uy) * constants.earthRadius;\n            r.z = (mrt * uz) * constants.earthRadius;\n            v = {x: 0.0, y: 0.0, z: 0.0};\n            v.x = (mvt * ux + rvdot * vx) * vkmpersec;\n            v.y = (mvt * uy + rvdot * vy) * vkmpersec;\n            v.z = (mvt * uz + rvdot * vz) * vkmpersec;\n        }\n        //  sgp4fix for decaying satellites\n        if (mrt < 1.0) {\n            // printf(\"// decay condition %11.6f \\n\",mrt);\n            satrec.error = 6;\n            return {position: false, velocity: false};\n        }\n        return {position: r, velocity: v};\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('propagate/propagate',[\n    '../constants',\n    '../gstime/jday',\n    '../sgp4'\n], function(\n    constants,\n    jday,\n    sgp4\n) {\n    'use strict';\n\n    return function propagate() {\n        //Return a position and velocity vector for a given date and time.\n        var satrec = arguments[0],\n            date = Array.prototype.slice.call(arguments, 1),\n            j = jday.apply(null, date),\n            m = (j - satrec.jdsatepoch) * constants.minutesPerDay;\n        return sgp4(satrec, m);\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('dscom',[\n    './constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(dscomParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                           procedure dscom\n         *\n         *  this procedure provides deep space common items used by both the secular\n         *    and periodics subroutines.  input is provided as shown. this routine\n         *    used to be called dpper, but the functions inside weren't well organized.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    epoch       -\n         *    ep          - eccentricity\n         *    argpp       - argument of perigee\n         *    tc          -\n         *    inclp       - inclination\n         *    nodep       - right ascension of ascending node\n         *    np          - mean motion\n         *\n         *  outputs       :\n         *    sinim  , cosim  , sinomm , cosomm , snodm  , cnodm\n         *    day         -\n         *    e3          -\n         *    ee2         -\n         *    em          - eccentricity\n         *    emsq        - eccentricity squared\n         *    gam         -\n         *    peo         -\n         *    pgho        -\n         *    pho         -\n         *    pinco       -\n         *    plo         -\n         *    rtemsq      -\n         *    se2, se3         -\n         *    sgh2, sgh3, sgh4        -\n         *    sh2, sh3, si2, si3, sl2, sl3, sl4         -\n         *    s1, s2, s3, s4, s5, s6, s7          -\n         *    ss1, ss2, ss3, ss4, ss5, ss6, ss7, sz1, sz2, sz3         -\n         *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n         *    xgh2, xgh3, xgh4, xh2, xh3, xi2, xi3, xl2, xl3, xl4         -\n         *    nm          - mean motion\n         *    z1, z2, z3, z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n         *    zmol        -\n         *    zmos        -\n         *\n         *  locals        :\n         *    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10         -\n         *    betasq      -\n         *    cc          -\n         *    ctem, stem        -\n         *    x1, x2, x3, x4, x5, x6, x7, x8          -\n         *    xnodce      -\n         *    xnoi        -\n         *    zcosg  , zsing  , zcosgl , zsingl , zcosh  , zsinh  , zcoshl , zsinhl ,\n         *    zcosi  , zsini  , zcosil , zsinil ,\n         *    zx          -\n         *    zy          -\n         *\n         *  coupling      :\n         *    none.\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var epoch   = dscomParameters.epoch,\n            ep      = dscomParameters.ep,\n            argpp   = dscomParameters.argpp,\n            tc      = dscomParameters.tc,\n            inclp   = dscomParameters.inclp,\n            nodep   = dscomParameters.nodep,\n            np      = dscomParameters.np,\n            e3      = dscomParameters.e3,\n            ee2     = dscomParameters.ee2,\n            peo     = dscomParameters.peo,\n            pgho    = dscomParameters.pgho,\n            pho     = dscomParameters.pho,\n            pinco   = dscomParameters.pinco,\n            plo     = dscomParameters.plo,\n            se2     = dscomParameters.se2,\n            se3     = dscomParameters.se3,\n            sgh2    = dscomParameters.sgh2,\n            sgh3    = dscomParameters.sgh3,\n            sgh4    = dscomParameters.sgh4,\n            sh2     = dscomParameters.sh2,\n            sh3     = dscomParameters.sh3,\n            si2     = dscomParameters.si2,\n            si3     = dscomParameters.si3,\n            sl2     = dscomParameters.sl2,\n            sl3     = dscomParameters.sl3,\n            sl4     = dscomParameters.sl4,\n            xgh2    = dscomParameters.xgh2,\n            xgh3    = dscomParameters.xgh3,\n            xgh4    = dscomParameters.xgh4,\n            xh2     = dscomParameters.xh2,\n            xh3     = dscomParameters.xh3,\n            xi2     = dscomParameters.xi2,\n            xi3     = dscomParameters.xi3,\n            xl2     = dscomParameters.xl2,\n            xl3     = dscomParameters.xl3,\n            xl4     = dscomParameters.xl4,\n            zmol    = dscomParameters.zmol,\n            zmos    = dscomParameters.zmos;\n\n\n        var a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,\n            betasq, cc,  ctem, stem,\n            x1, x2, x3, x4, x5, x6, x7, x8,\n            xnodce, xnoi,\n            zcosg, zsing, zcosgl, zsingl,\n            zcosh, zsinh, zcoshl, zsinhl,\n            zcosi, zsini, zcosil, zsinil,\n            zx, zy;\n\n        var ss1,  ss2,  ss3,  ss4,  ss5,  ss6,  ss7,\n            sz1,  sz2,  sz3,\n            sz11, sz12, sz13,\n            sz21, sz22, sz23,\n            sz31, sz32, sz33;\n        var s1, s2, s3, s4, s5, s6, s7;\n        var z1, z2, z3,\n            z11,z12,z13,\n            z21,z22,z23,\n            z31,z32,z33;\n\n        //  -------------------------- constants -------------------------\n        var zes     =  0.01675;\n        var zel     =  0.05490;\n        var c1ss    =  2.9864797e-6;\n        var c1l     =  4.7968065e-7;\n        var zsinis  =  0.39785416;\n        var zcosis  =  0.91744867;\n        var zcosgs  =  0.1945905;\n        var zsings  = -0.98088458;\n        //  --------------------- local variables ------------------------\n        var nm     = np;\n        var em     = ep;\n        var snodm  = Math.sin(nodep);\n        var cnodm  = Math.cos(nodep);\n        var sinomm = Math.sin(argpp);\n        var cosomm = Math.cos(argpp);\n        var sinim  = Math.sin(inclp);\n        var cosim  = Math.cos(inclp);\n        var emsq   = em * em;\n        betasq = 1.0 - emsq;\n        var rtemsq = Math.sqrt(betasq);\n\n        //  ----------------- initialize lunar solar terms ---------------\n        peo        = 0.0;\n        pinco      = 0.0;\n        plo        = 0.0;\n        pgho       = 0.0;\n        pho        = 0.0;\n        var day    = epoch + 18261.5 + tc / 1440.0;\n        xnodce = (4.5236020 - 9.2422029e-4 * day) % constants.twoPi;\n        stem   = Math.sin(xnodce);\n        ctem   = Math.cos(xnodce);\n        zcosil = 0.91375164 - 0.03568096 * ctem;\n        zsinil = Math.sqrt(1.0 - zcosil * zcosil);\n        zsinhl = 0.089683511 * stem / zsinil;\n        zcoshl = Math.sqrt(1.0 - zsinhl * zsinhl);\n        var gam    = 5.8351514 + 0.0019443680 * day;\n        zx     = 0.39785416 * stem / zsinil;\n        zy     = zcoshl * ctem + 0.91744867 * zsinhl * stem;\n        zx         = Math.atan2(zx, zy);\n        zx         = gam + zx - xnodce;\n        zcosgl = Math.cos(zx);\n        zsingl = Math.sin(zx);\n\n        //  ------------------------- do solar terms ---------------------\n        zcosg = zcosgs;\n        zsing = zsings;\n        zcosi = zcosis;\n        zsini = zsinis;\n        zcosh = cnodm;\n        zsinh = snodm;\n        cc    = c1ss;\n        xnoi  = 1.0 / nm;\n\n        var lsflg = 0;\n        while (lsflg < 2) {\n            lsflg += 1;\n            a1     =   zcosg   * zcosh + zsing * zcosi * zsinh;\n            a3     =  -zsing   * zcosh + zcosg * zcosi * zsinh;\n            a7     =  -zcosg   * zsinh + zsing * zcosi * zcosh;\n            a8     =   zsing   * zsini;\n            a9     =   zsing   * zsinh + zcosg * zcosi * zcosh;\n            a10    =   zcosg   * zsini;\n            a2     =   cosim   * a7    + sinim * a8;\n            a4     =   cosim   * a9    + sinim * a10;\n            a5     =  -sinim   * a7    + cosim * a8;\n            a6     =  -sinim   * a9    + cosim * a10;\n\n            x1     =  a1   * cosomm    + a2    * sinomm;\n            x2     =  a3   * cosomm    + a4    * sinomm;\n            x3     = -a1   * sinomm    + a2    * cosomm;\n            x4     = -a3   * sinomm    + a4    * cosomm;\n            x5     =  a5   * sinomm;\n            x6     =  a6   * sinomm;\n            x7     =  a5   * cosomm;\n            x8     =  a6   * cosomm;\n\n            z31    = 12.0  *  x1 * x1 - 3.0 * x3 * x3;\n            z32    = 24.0  *  x1 * x2 - 6.0 * x3 * x4;\n            z33    = 12.0  *  x2 * x2 - 3.0 * x4 * x4;\n            z1     =  3.0  * (a1 * a1 + a2 * a2) + z31 * emsq;\n            z2     =  6.0  * (a1 * a3 + a2 * a4) + z32 * emsq;\n            z3     =  3.0  * (a3 * a3 + a4 * a4) + z33 * emsq;\n            z11    = -6.0  *  a1 * a5 + emsq *\n            (-24.0  *  x1 * x7-6.0  * x3 * x5);\n            z12    = -6.0  * (a1 * a6 + a3 * a5) + emsq *\n            (-24.0  * (x2 * x7 + x1 * x8) +\n            -6.0  * (x3 * x6 + x4 * x5));\n            z13    = -6.0  *  a3 * a6 + emsq *\n            (-24.0  *  x2 * x8 - 6.0 * x4 * x6);\n            z21    =  6.0  *  a2 * a5 + emsq *\n            ( 24.0  *  x1 * x5 - 6.0 * x3 * x7);\n            z22    =  6.0  * (a4 * a5 + a2 * a6) + emsq *\n            ( 24.0  * (x2 * x5 + x1 * x6) -\n            6.0  * (x4 * x7 + x3 * x8));\n            z23    =  6.0  *  a4 * a6 + emsq *\n            ( 24.0  *  x2 * x6 - 6.0 * x4 * x8);\n            z1         =   z1  + z1 + betasq * z31;\n            z2         =   z2  + z2 + betasq * z32;\n            z3         =   z3  + z3 + betasq * z33;\n            s3     =   cc  * xnoi;\n            s2     =  -0.5 * s3 / rtemsq;\n            s4     =   s3  * rtemsq;\n            s1     = -15.0 * em * s4;\n            s5     =   x1  * x3 + x2 * x4;\n            s6     =   x2  * x3 + x1 * x4;\n            s7     =   x2  * x4 - x1 * x3;\n\n            //  ----------------------- do lunar terms -------------------\n            if (lsflg === 1) {\n                ss1    = s1;\n                ss2    = s2;\n                ss3    = s3;\n                ss4    = s4;\n                ss5    = s5;\n                ss6    = s6;\n                ss7    = s7;\n                sz1    = z1;\n                sz2    = z2;\n                sz3    = z3;\n                sz11   = z11;\n                sz12   = z12;\n                sz13   = z13;\n                sz21   = z21;\n                sz22   = z22;\n                sz23   = z23;\n                sz31   = z31;\n                sz32   = z32;\n                sz33   = z33;\n                zcosg      = zcosgl;\n                zsing      = zsingl;\n                zcosi      = zcosil;\n                zsini      = zsinil;\n                zcosh      = zcoshl * cnodm + zsinhl * snodm;\n                zsinh      = snodm * zcoshl - cnodm * zsinhl;\n                cc         = c1l;\n            }\n        }\n        zmol = (4.7199672 + 0.22997150  * day - gam)   % constants.twoPi;\n        zmos = (6.2565837 + 0.017201977 * day)         % constants.twoPi;\n\n        //  ------------------------ do solar terms ----------------------\n        se2  =   2.0 * ss1 * ss6;\n        se3  =   2.0 * ss1 * ss7;\n        si2  =   2.0 * ss2 * sz12;\n        si3  =   2.0 * ss2 * (sz13 - sz11);\n        sl2  =  -2.0 * ss3 * sz2;\n        sl3  =  -2.0 * ss3 * (sz3 - sz1);\n        sl4  =  -2.0 * ss3 * (-21.0 - 9.0 * emsq) * zes;\n        sgh2 =   2.0 * ss4 * sz32;\n        sgh3 =   2.0 * ss4 * (sz33 - sz31);\n        sgh4 = -18.0 * ss4 * zes;\n        sh2  =  -2.0 * ss2 * sz22;\n        sh3  =  -2.0 * ss2 * (sz23 - sz21);\n\n        //  ------------------------ do lunar terms ----------------------\n        ee2  =   2.0 * s1 * s6;\n        e3   =   2.0 * s1 * s7;\n        xi2  =   2.0 * s2 * z12;\n        xi3  =   2.0 * s2 * (z13 - z11);\n        xl2  =  -2.0 * s3 * z2;\n        xl3  =  -2.0 * s3 * (z3 - z1);\n        xl4  =  -2.0 * s3 * (-21.0 - 9.0 * emsq) * zel;\n        xgh2 =   2.0 * s4 * z32;\n        xgh3 =   2.0 * s4 * (z33 - z31);\n        xgh4 = -18.0 * s4 * zel;\n        xh2  =  -2.0 * s2 * z22;\n        xh3  =  -2.0 * s2 * (z23 - z21);\n\n        var dscomResults =  {\n            snodm : snodm,\n            cnodm : cnodm,\n            sinim : sinim,\n            cosim : cosim,\n            sinomm : sinomm,\n\n            cosomm : cosomm,\n            day : day,\n            e3 : e3,\n            ee2 : ee2,\n            em : em,\n\n            emsq : emsq,\n            gam : gam,\n            peo : peo,\n            pgho : pgho,\n            pho : pho,\n\n            pinco : pinco,\n            plo : plo,\n            rtemsq : rtemsq,\n            se2 : se2,\n            se3 : se3,\n\n            sgh2 : sgh2,\n            sgh3 : sgh3,\n            sgh4 : sgh4,\n            sh2 : sh2,\n            sh3 : sh3,\n\n            si2 : si2,\n            si3 : si3,\n            sl2 : sl2,\n            sl3 : sl3,\n            sl4 : sl4,\n\n            s1 : s1,\n            s2 : s2,\n            s3 : s3,\n            s4 : s4,\n            s5 : s5,\n\n            s6 : s6,\n            s7 : s7,\n            ss1 : ss1,\n            ss2 : ss2,\n            ss3 : ss3,\n\n            ss4 : ss4,\n            ss5 : ss5,\n            ss6 : ss6,\n            ss7 : ss7,\n            sz1 : sz1,\n\n            sz2 : sz2,\n            sz3 : sz3,\n            sz11 : sz11,\n            sz12 : sz12,\n            sz13 : sz13,\n\n            sz21 : sz21,\n            sz22 : sz22,\n            sz23 : sz23,\n            sz31 : sz31,\n            sz32 : sz32,\n\n            sz33 : sz33,\n            xgh2 : xgh2,\n            xgh3 : xgh3,\n            xgh4 : xgh4,\n            xh2 : xh2,\n\n            xh3 : xh3,\n            xi2 : xi2,\n            xi3 : xi3,\n            xl2 : xl2,\n            xl3 : xl3,\n\n            xl4 : xl4,\n            nm : nm,\n            z1 : z1,\n            z2 : z2,\n            z3 : z3,\n\n            z11 : z11,\n            z12 : z12,\n            z13 : z13,\n            z21 : z21,\n            z22 : z22,\n\n            z23 : z23,\n            z31 : z31,\n            z32 : z32,\n            z33 : z33,\n            zmol : zmol,\n\n            zmos : zmos\n        };\n        return dscomResults;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('dsinit',[\n    './constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(dsinitParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                           procedure dsinit\n         *\n         *  this procedure provides deep space contributions to mean motion dot due\n         *    to geopotential resonance with half day and one day orbits.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    cosim, sinim-\n         *    emsq        - eccentricity squared\n         *    argpo       - argument of perigee\n         *    s1, s2, s3, s4, s5      -\n         *    ss1, ss2, ss3, ss4, ss5 -\n         *    sz1, sz3, sz11, sz13, sz21, sz23, sz31, sz33 -\n         *    t           - time\n         *    tc          -\n         *    gsto        - greenwich sidereal time                   rad\n         *    mo          - mean anomaly\n         *    mdot        - mean anomaly dot (rate)\n         *    no          - mean motion\n         *    nodeo       - right ascension of ascending node\n         *    nodedot     - right ascension of ascending node dot (rate)\n         *    xpidot      -\n         *    z1, z3, z11, z13, z21, z23, z31, z33 -\n         *    eccm        - eccentricity\n         *    argpm       - argument of perigee\n         *    inclm       - inclination\n         *    mm          - mean anomaly\n         *    xn          - mean motion\n         *    nodem       - right ascension of ascending node\n         *\n         *  outputs       :\n         *    em          - eccentricity\n         *    argpm       - argument of perigee\n         *    inclm       - inclination\n         *    mm          - mean anomaly\n         *    nm          - mean motion\n         *    nodem       - right ascension of ascending node\n         *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n         *    atime       -\n         *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433    -\n         *    dedt        -\n         *    didt        -\n         *    dmdt        -\n         *    dndt        -\n         *    dnodt       -\n         *    domdt       -\n         *    del1, del2, del3        -\n         *    ses  , sghl , sghs , sgs  , shl  , shs  , sis  , sls\n         *    theta       -\n         *    xfact       -\n         *    xlamo       -\n         *    xli         -\n         *    xni\n         *\n         *  locals        :\n         *    ainv2       -\n         *    aonv        -\n         *    cosisq      -\n         *    eoc         -\n         *    f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543  -\n         *    g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533  -\n         *    sini2       -\n         *    temp        -\n         *    temp1       -\n         *    theta       -\n         *    xno2        -\n         *\n         *  coupling      :\n         *    getgravconst\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var cosim   = dsinitParameters.cosim,\n            emsq    = dsinitParameters.emsq,\n            argpo   = dsinitParameters.argpo,\n\n            s1      = dsinitParameters.s1,\n            s2      = dsinitParameters.s2,\n            s3      = dsinitParameters.s3,\n            s4      = dsinitParameters.s4,\n            s5      = dsinitParameters.s5,\n            sinim   = dsinitParameters.sinim,\n\n            ss1     = dsinitParameters.ss1,\n            ss2     = dsinitParameters.ss2,\n            ss3     = dsinitParameters.ss3,\n            ss4     = dsinitParameters.ss4,\n            ss5     = dsinitParameters.ss5,\n\n            sz1     = dsinitParameters.sz1,\n            sz3     = dsinitParameters.sz3,\n            sz11    = dsinitParameters.sz11,\n            sz13    = dsinitParameters.sz13,\n            sz21    = dsinitParameters.sz21,\n            sz23    = dsinitParameters.sz23,\n            sz31    = dsinitParameters.sz31,\n            sz33    = dsinitParameters.sz33,\n\n            t       = dsinitParameters.t,\n            tc      = dsinitParameters.tc,\n            gsto    = dsinitParameters.gsto,\n\n            mo      = dsinitParameters.mo,\n            mdot    = dsinitParameters.mdot,\n            no      = dsinitParameters.no,\n            nodeo   = dsinitParameters.nodeo,\n            nodedot = dsinitParameters.nodedot,\n\n            xpidot  = dsinitParameters.xpidot,\n\n            z1      = dsinitParameters.z1,\n            z3      = dsinitParameters.z3,\n            z11     = dsinitParameters.z11,\n            z13     = dsinitParameters.z13,\n            z21     = dsinitParameters.z21,\n            z23     = dsinitParameters.z23,\n            z31     = dsinitParameters.z31,\n            z33     = dsinitParameters.z33,\n\n            ecco    = dsinitParameters.ecco,\n            eccsq   = dsinitParameters.eccsq,\n            em      = dsinitParameters.em,\n\n            argpm   = dsinitParameters.argpm,\n            inclm   = dsinitParameters.inclm,\n            mm      = dsinitParameters.mm,\n            nm      = dsinitParameters.nm,\n            nodem   = dsinitParameters.nodem,\n            irez    = dsinitParameters.irez,\n            atime   = dsinitParameters.atime,\n\n            d2201   = dsinitParameters.d2201,\n            d2211   = dsinitParameters.d2211,\n            d3210   = dsinitParameters.d3210,\n            d3222   = dsinitParameters.d3222,\n            d4410   = dsinitParameters.d4410,\n            d4422   = dsinitParameters.d4422,\n\n            d5220   = dsinitParameters.d5220,\n            d5232   = dsinitParameters.d5232,\n            d5421   = dsinitParameters.d5421,\n            d5433   = dsinitParameters.d5433,\n\n            dedt    = dsinitParameters.dedt,\n            didt    = dsinitParameters.didt,\n            dmdt    = dsinitParameters.dmdt,\n            dnodt   = dsinitParameters.dnodt,\n            domdt   = dsinitParameters.domdt,\n\n            del1    = dsinitParameters.del1,\n            del2    = dsinitParameters.del2,\n            del3    = dsinitParameters.del3,\n\n            xfact   = dsinitParameters.xfact,\n            xlamo   = dsinitParameters.xlamo,\n            xli     = dsinitParameters.xli,\n            xni     = dsinitParameters.xni;\n\n        var f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543;\n        var g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533;\n        var sini2,  temp,   temp1,    theta,    xno2,\n            ainv2,  aonv,   cosisq, eoc;\n\n        var q22     = 1.7891679e-6;\n        var q31     = 2.1460748e-6;\n        var q33     = 2.2123015e-7;\n        var root22  = 1.7891679e-6;\n        var root44  = 7.3636953e-9;\n        var root54  = 2.1765803e-9;\n        var rptim   = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n        var root32  = 3.7393792e-7;\n        var root52  = 1.1428639e-7;\n        var x2o3    = 2.0 / 3.0;\n        var znl     = 1.5835218e-4;\n        var zns     = 1.19459e-5;\n\n\n        //  -------------------- deep space initialization ------------\n        irez    = 0;\n        if (0.0034906585 < nm < 0.0052359877){\n            irez = 1;\n        }\n        if (8.26e-3 <= nm <= 9.24e-3 && em >= 0.5){\n            irez = 2;\n        }\n\n        //  ------------------------ do solar terms -------------------\n        var ses =  ss1 * zns *  ss5;\n        var sis =  ss2 * zns * (sz11 + sz13);\n        var sls = -zns * ss3 * (sz1  + sz3  - 14.0 - 6.0 * emsq);\n        var sghs=  ss4 * zns * (sz31 + sz33 -  6.0);\n        var shs = -zns * ss2 * (sz21 + sz23);\n\n        //  sgp4fix for 180 deg incl\n        if (inclm < 5.2359877e-2 || inclm > constants.pi - 5.2359877e-2){\n            shs = 0.0;\n        }\n        if (sinim !== 0.0){\n            shs = shs / sinim;\n        }\n        var sgs  = sghs - cosim * shs;\n\n        //  ------------------------- do lunar terms ------------------\n        dedt =  ses + s1  *  znl *  s5;\n        didt =  sis + s2  *  znl * (z11 + z13);\n        dmdt =  sls - znl *  s3  * (z1  + z3 - 14.0 - 6.0 * emsq);\n        var sghl =  s4  * znl * (z31 +  z33 - 6.0);\n        var shll = -znl * s2  * (z21 +  z23);\n        //  sgp4fix for 180 deg incl\n        if ((inclm < 5.2359877e-2) || (inclm > (constants.pi - 5.2359877e-2))){\n            shll = 0.0;\n        }\n        domdt = sgs + sghl;\n        dnodt = shs;\n        if (sinim !== 0.0){\n            domdt = domdt - cosim / sinim * shll;\n            dnodt = dnodt + shll / sinim;\n        }\n\n\n        //  ----------- calculate deep space resonance effects --------\n        var dndt    = 0.0;\n        theta   = (gsto + tc * rptim) % constants.twoPi;\n        em          = em + dedt * t;\n        inclm       = inclm + didt * t;\n        argpm       = argpm + domdt * t;\n        nodem       = nodem + dnodt * t;\n        mm          = mm + dmdt * t;\n\n        //   sgp4fix for negative inclinations\n        //   the following if statement should be commented out\n        //if (inclm < 0.0)\n        //  {\n        //    inclm  = -inclm;\n        //    argpm  = argpm - pi;\n        //    nodem = nodem + pi;\n        //  }\n\n\n        //  -------------- initialize the resonance terms -------------\n        if (irez !== 0) {\n            aonv = Math.pow(nm / constants.xke, x2o3);\n            //  ---------- geopotential resonance for 12 hour orbits ------\n            if (irez === 2) {\n                cosisq = cosim * cosim;\n                var emo= em;\n                em     = ecco;\n                var emsqo  = emsq;\n                emsq   = eccsq;\n                eoc    = em * emsq;\n                g201   = -0.306 - (em - 0.64) * 0.440;\n\n                if (em <= 0.65){\n                    g211 =    3.616  -  13.2470 * em +  16.2900 * emsq;\n                    g310 =  -19.302  + 117.3900 * em - 228.4190 * emsq +  156.5910 * eoc;\n                    g322 =  -18.9068 + 109.7927 * em - 214.6334 * emsq +  146.5816 * eoc;\n                    g410 =  -41.122  + 242.6940 * em - 471.0940 * emsq +  313.9530 * eoc;\n                    g422 = -146.407  + 841.8800 * em - 1629.014 * emsq + 1083.4350 * eoc;\n                    g520 = -532.114  + 3017.977 * em - 5740.032 * emsq + 3708.2760 * eoc;\n                }\n                else {\n                    g211 =   -72.099 +   331.819 * em -   508.738 * emsq +   266.724 * eoc;\n                    g310 =  -346.844 +  1582.851 * em -  2415.925 * emsq +  1246.113 * eoc;\n                    g322 =  -342.585 +  1554.908 * em -  2366.899 * emsq +  1215.972 * eoc;\n                    g410 = -1052.797 +  4758.686 * em -  7193.992 * emsq +  3651.957 * eoc;\n                    g422 = -3581.690 + 16178.110 * em - 24462.770 * emsq + 12422.520 * eoc;\n                    if (em > 0.715) {\n                        g520 =-5149.66 + 29936.92 * em - 54087.36 * emsq + 31324.56 * eoc;\n                    }\n                    else {\n                        g520 = 1464.74 -  4664.75 * em +  3763.64 * emsq;\n                    }\n                }\n                if (em < 0.7) {\n                    g533 = -919.22770 + 4988.6100 * em - 9064.7700 * emsq + 5542.21  * eoc;\n                    g521 = -822.71072 + 4568.6173 * em - 8491.4146 * emsq + 5337.524 * eoc;\n                    g532 = -853.66600 + 4690.2500 * em - 8624.7700 * emsq + 5341.4  * eoc;\n                }\n                else{\n                    g533 =-37995.780 + 161616.52 * em - 229838.20 * emsq + 109377.94 * eoc;\n                    g521 =-51752.104 + 218913.95 * em - 309468.16 * emsq + 146349.42 * eoc;\n                    g532 =-40023.880 + 170470.89 * em - 242699.48 * emsq + 115605.82 * eoc;\n                }\n                sini2 =  sinim * sinim;\n                f220  =  0.75 * (1.0 + 2.0 * cosim+cosisq);\n                f221  =  1.5 * sini2;\n                f321  =  1.875 * sinim  *  (1.0 - 2.0 * cosim - 3.0 * cosisq);\n                f322  = -1.875 * sinim  *  (1.0 + 2.0 * cosim - 3.0 * cosisq);\n                f441  = 35.0 * sini2 * f220;\n                f442  = 39.3750 * sini2 * sini2;\n                f522  =  9.84375 * sinim * (sini2 * (1.0 - 2.0 * cosim- 5.0 * cosisq) +\n                0.33333333 * (-2.0 + 4.0 * cosim + 6.0 * cosisq) );\n                f523  = sinim * (4.92187512 * sini2 * (-2.0 - 4.0 * cosim +\n                10.0 * cosisq) + 6.56250012 * (1.0+2.0 * cosim - 3.0 * cosisq));\n                f542  = 29.53125 * sinim * (2.0 - 8.0 * cosim + cosisq *\n                (-12.0    + 8.0   *  cosim + 10.0 * cosisq));\n                f543  = 29.53125 * sinim * (-2.0 - 8.0   * cosim+cosisq *\n                ( 12.0    + 8.0   * cosim - 10.0  * cosisq));\n\n                xno2  =  nm     * nm;\n                ainv2 =  aonv   * aonv;\n                temp1 =  3.0    * xno2  * ainv2;\n                temp  =  temp1  * root22;\n                d2201 =  temp   * f220  * g201;\n                d2211 =  temp   * f221  * g211;\n                temp1 =  temp1  * aonv;\n                temp  =  temp1  * root32;\n                d3210 =  temp   * f321  * g310;\n                d3222 =  temp   * f322  * g322;\n                temp1 =  temp1  * aonv;\n                temp  =  2.0    * temp1 * root44;\n                d4410 =  temp   * f441  * g410;\n                d4422 =  temp   * f442  * g422;\n                temp1 =  temp1  * aonv;\n                temp  =  temp1  * root52;\n                d5220 =  temp   * f522  * g520;\n                d5232 =  temp   * f523  * g532;\n                temp  =  2.0    * temp1 * root54;\n                d5421 =  temp   * f542  * g521;\n                d5433 =  temp   * f543  * g533;\n                xlamo = (mo     + nodeo + nodeo -  theta    - theta) % constants.twoPi;\n                xfact =  mdot   + dmdt  + 2.0   * (nodedot  + dnodt  - rptim) - no;\n                em    =  emo;\n                emsq  =  emsqo;\n            }\n            //  ---------------- synchronous resonance terms --------------\n            if (irez === 1) {\n                g200  = 1.0 + emsq * (-2.5 + 0.8125 * emsq);\n                g310  = 1.0 + 2.0 * emsq;\n                g300  = 1.0 + emsq * (-6.0 + 6.60937 * emsq);\n                f220  = 0.75 * (1.0 + cosim) * (1.0 + cosim);\n                f311  = 0.9375 * sinim * sinim * (1.0 + 3.0 * cosim) - 0.75 * (1.0 + cosim);\n                f330  = 1.0 + cosim;\n                f330  = 1.875 * f330 * f330 * f330;\n                del1  = 3.0 * nm * nm * aonv * aonv;\n                del2  = 2.0 * del1 * f220 * g200 * q22;\n                del3  = 3.0 * del1 * f330 * g300 * q33 * aonv;\n                del1  = del1 * f311 * g310 * q31 * aonv;\n                xlamo = (mo + nodeo + argpo - theta) % constants.twoPi;\n                xfact = mdot + xpidot - rptim + dmdt + domdt + dnodt - no;\n            }\n            //  ------------ for sgp4, initialize the integrator ----------\n            xli   = xlamo;\n            xni   = no;\n            atime = 0.0;\n            nm    = no + dndt;\n        }\n        var dsinitResults = {\n            em : em,\n            argpm : argpm,\n            inclm : inclm,\n            mm : mm,\n            nm : nm,\n            nodem : nodem,\n\n            irez : irez,\n            atime : atime,\n\n            d2201 : d2201,\n            d2211 : d2211,\n            d3210 : d3210,\n            d3222 : d3222,\n            d4410 : d4410,\n\n            d4422 : d4422,\n            d5220 : d5220,\n            d5232 : d5232,\n            d5421 : d5421,\n            d5433 : d5433,\n\n            dedt : dedt,\n            didt : didt,\n            dmdt : dmdt,\n            dndt : dndt,\n            dnodt : dnodt,\n            domdt : domdt,\n\n            del1 : del1,\n            del2 : del2,\n            del3 : del3,\n\n            xfact : xfact,\n            xlamo : xlamo,\n            xli : xli,\n            xni : xni\n        };\n        return dsinitResults;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('initl',[\n    './constants',\n    './gstime/gstime'\n], function(\n    constants,\n    gstime\n) {\n    'use strict';\n\n    return function (initlParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                           procedure initl\n         *\n         *  this procedure initializes the spg4 propagator. all the initialization is\n         *    consolidated here instead of having multiple loops inside other routines.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    ecco        - eccentricity                           0.0 - 1.0\n         *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n         *    inclo       - inclination of satellite\n         *    no          - mean motion of satellite\n         *    satn        - satellite number\n         *\n         *  outputs       :\n         *    ainv        - 1.0 / a\n         *    ao          - semi major axis\n         *    con41       -\n         *    con42       - 1.0 - 5.0 cos(i)\n         *    cosio       - cosine of inclination\n         *    cosio2      - cosio squared\n         *    eccsq       - eccentricity squared\n         *    method      - flag for deep space                    'd', 'n'\n         *    omeosq      - 1.0 - ecco * ecco\n         *    posq        - semi-parameter squared\n         *    rp          - radius of perigee\n         *    rteosq      - square root of (1.0 - ecco*ecco)\n         *    sinio       - sine of inclination\n         *    gsto        - gst at time of observation               rad\n         *    no          - mean motion of satellite\n         *\n         *  locals        :\n         *    ak          -\n         *    d1          -\n         *    del         -\n         *    adel        -\n         *    po          -\n         *\n         *  coupling      :\n         *    getgravconst\n         *    gstime      - find greenwich sidereal time from the julian date\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        // TODO: defined but never used\n        //var satn = initlParameters.satn;\n\n        var ecco = initlParameters.ecco,\n            epoch = initlParameters.epoch,\n            inclo = initlParameters.inclo,\n            no = initlParameters.no,\n            method = initlParameters.method,\n            opsmode = initlParameters.opsmode;\n\n        var ak, d1, adel, po, gsto;\n\n        // TODO: defined but never used\n        // var del;\n\n        // sgp4fix use old way of finding gst\n        //  ----------------------- earth constants ----------------------\n        //  sgp4fix identify constants and allow alternate values\n\n        //  ------------- calculate auxillary epoch quantities ----------\n        var eccsq = ecco * ecco;\n        var omeosq = 1.0 - eccsq;\n        var rteosq = Math.sqrt(omeosq);\n        var cosio = Math.cos(inclo);\n        var cosio2 = cosio * cosio;\n\n        //  ------------------ un-kozai the mean motion -----------------\n        ak = Math.pow(constants.xke / no, constants.x2o3);\n        d1 = 0.75 * constants.j2 * (3.0 * cosio2 - 1.0) / (rteosq * omeosq);\n        var delPrime = d1 / (ak * ak);\n        adel = ak * (1.0 - delPrime * delPrime - delPrime *\n        (1.0 / 3.0 + 134.0 * delPrime * delPrime / 81.0));\n        delPrime = d1 / (adel * adel);\n        no = no / (1.0 + delPrime);\n\n        var ao = Math.pow(constants.xke / no, constants.x2o3);\n        var sinio = Math.sin(inclo);\n        po = ao * omeosq;\n        var con42 = 1.0 - 5.0 * cosio2;\n        var con41 = -con42 - cosio2 - cosio2;\n        var ainv = 1.0 / ao;\n        var posq = po * po;\n        var rp = ao * (1.0 - ecco);\n        method = 'n';\n\n        //  sgp4fix modern approach to finding sidereal time\n        if (opsmode === 'a') {\n            //  sgp4fix use old way of finding gst\n            //  count integer number of days from 0 jan 1970\n            var ts70 = epoch - 7305.0;\n            var ds70 = Math.floor(ts70 + 1.0e-8);\n            var tfrac = ts70 - ds70;\n            //  find greenwich location at epoch\n            var c1 = 1.72027916940703639e-2;\n            var thgr70 = 1.7321343856509374;\n            var fk5r = 5.07551419432269442e-15;\n            var c1p2p = c1 + constants.twoPi;\n            gsto = ( thgr70 + c1 * ds70 + c1p2p * tfrac + ts70 * ts70 * fk5r) % constants.twoPi;\n            if (gsto < 0.0) {\n                gsto = gsto + constants.twoPi;\n            }\n        }\n        else {\n            gsto = gstime(epoch + 2433281.5);\n        }\n\n        var initlResults = {\n            no: no,\n\n            method: method,\n\n            ainv: ainv,\n            ao: ao,\n            con41: con41,\n            con42: con42,\n            cosio: cosio,\n\n            cosio2: cosio2,\n            eccsq: eccsq,\n            omeosq: omeosq,\n            posq: posq,\n\n            rp: rp,\n            rteosq: rteosq,\n            sinio: sinio,\n            gsto: gsto\n        };\n        return initlResults;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('sgp4init',[\n    './constants',\n    './dpper',\n    './dscom',\n    './dsinit',\n    './initl',\n    './sgp4'\n], function(\n    constants,\n    dpper,\n    dscom,\n    dsinit,\n    initl,\n    sgp4\n) {\n    'use strict';\n\n    return function(satrec, sgp4initParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                             procedure sgp4init\n         *\n         *  this procedure initializes variables for sgp4.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    opsmode     - mode of operation afspc or improved 'a', 'i'\n         *    satn        - satellite number\n         *    bstar       - sgp4 type drag coefficient              kg/m2er\n         *    ecco        - eccentricity\n         *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n         *    argpo       - argument of perigee (output if ds)\n         *    inclo       - inclination\n         *    mo          - mean anomaly (output if ds)\n         *    no          - mean motion\n         *    nodeo       - right ascension of ascending node\n         *\n         *  outputs       :\n         *    satrec      - common values for subsequent calls\n         *    return code - non-zero on error.\n         *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n         *                   2 - mean motion less than 0.0\n         *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n         *                   4 - semi-latus rectum < 0.0\n         *                   5 - epoch elements are sub-orbital\n         *                   6 - satellite has decayed\n         *\n         *  locals        :\n         *    cnodm  , snodm  , cosim  , sinim  , cosomm , sinomm\n         *    cc1sq  , cc2    , cc3\n         *    coef   , coef1\n         *    cosio4      -\n         *    day         -\n         *    dndt        -\n         *    em          - eccentricity\n         *    emsq        - eccentricity squared\n         *    eeta        -\n         *    etasq       -\n         *    gam         -\n         *    argpm       - argument of perigee\n         *    nodem       -\n         *    inclm       - inclination\n         *    mm          - mean anomaly\n         *    nm          - mean motion\n         *    perige      - perigee\n         *    pinvsq      -\n         *    psisq       -\n         *    qzms24      -\n         *    rtemsq      -\n         *    s1, s2, s3, s4, s5, s6, s7          -\n         *    sfour       -\n         *    ss1, ss2, ss3, ss4, ss5, ss6, ss7         -\n         *    sz1, sz2, sz3\n         *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n         *    tc          -\n         *    temp        -\n         *    temp1, temp2, temp3       -\n         *    tsi         -\n         *    xpidot      -\n         *    xhdot1      -\n         *    z1, z2, z3          -\n         *    z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n         *\n         *  coupling      :\n         *    getgravconst-\n         *    initl       -\n         *    dscom       -\n         *    dpper       -\n         *    dsinit      -\n         *    sgp4        -\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var opsmode = sgp4initParameters.opsmode,\n            satn    = sgp4initParameters.satn,\n            epoch   = sgp4initParameters.epoch,\n\n            xbstar  = sgp4initParameters.xbstar,\n            xecco   = sgp4initParameters.xecco,\n            xargpo  = sgp4initParameters.xargpo,\n\n            xinclo  = sgp4initParameters.xinclo,\n            xmo     = sgp4initParameters.xmo,\n            xno     = sgp4initParameters.xno,\n\n            xnodeo  = sgp4initParameters.xnodeo;\n\n\n        var cnodm,  snodm,  cosim,  sinim,  cosomm, sinomm,\n            cc1sq,  cc2,    cc3,    coef,   coef1,  cosio4,\n            day,    dndt,\n            em, emsq, eeta, etasq,  gam,\n            argpm,  nodem,  inclm,  mm,     nm,\n            perige, pinvsq, psisq,  qzms24, rtemsq,\n            s1,  s2,  s3,  s4,  s5,  s6,  s7,   sfour,\n            ss1,ss2,    ss3,    ss4,    ss5,    ss6,    ss7,\n            sz1, sz2, sz3,\n            sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33,\n            tc, temp,   temp1,  temp2,  temp3,  temp4, tsi,\n            xpidot, xhdot1,\n            z1, z2, z3,\n            z11, z12, z13, z21, z22, z23, z31, z32, z33;\n        /* ------------------------ initialization --------------------- */\n        // sgp4fix divisor for divide by zero check on inclination\n        // the old check used 1.0 + Math.cos(pi-1.0e-9), but then compared it to\n        // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n        temp4    =   1.5e-12;\n\n        //  ----------- set all near earth variables to zero ------------\n        satrec.isimp   = 0;   satrec.method = 'n'; satrec.aycof    = 0.0;\n        satrec.con41   = 0.0; satrec.cc1    = 0.0; satrec.cc4      = 0.0;\n        satrec.cc5     = 0.0; satrec.d2     = 0.0; satrec.d3       = 0.0;\n        satrec.d4      = 0.0; satrec.delmo  = 0.0; satrec.eta      = 0.0;\n        satrec.argpdot = 0.0; satrec.omgcof = 0.0; satrec.sinmao   = 0.0;\n        satrec.t       = 0.0; satrec.t2cof  = 0.0; satrec.t3cof    = 0.0;\n        satrec.t4cof   = 0.0; satrec.t5cof  = 0.0; satrec.x1mth2   = 0.0;\n        satrec.x7thm1  = 0.0; satrec.mdot   = 0.0; satrec.nodedot  = 0.0;\n        satrec.xlcof   = 0.0; satrec.xmcof  = 0.0; satrec.nodecf   = 0.0;\n\n        //  ----------- set all deep space variables to zero ------------\n        satrec.irez  = 0;   satrec.d2201 = 0.0; satrec.d2211 = 0.0;\n        satrec.d3210 = 0.0; satrec.d3222 = 0.0; satrec.d4410 = 0.0;\n        satrec.d4422 = 0.0; satrec.d5220 = 0.0; satrec.d5232 = 0.0;\n        satrec.d5421 = 0.0; satrec.d5433 = 0.0; satrec.dedt  = 0.0;\n        satrec.del1  = 0.0; satrec.del2  = 0.0; satrec.del3  = 0.0;\n        satrec.didt  = 0.0; satrec.dmdt  = 0.0; satrec.dnodt = 0.0;\n        satrec.domdt = 0.0; satrec.e3    = 0.0; satrec.ee2   = 0.0;\n        satrec.peo   = 0.0; satrec.pgho  = 0.0; satrec.pho   = 0.0;\n        satrec.pinco = 0.0; satrec.plo   = 0.0; satrec.se2   = 0.0;\n        satrec.se3   = 0.0; satrec.sgh2  = 0.0; satrec.sgh3  = 0.0;\n        satrec.sgh4  = 0.0; satrec.sh2   = 0.0; satrec.sh3   = 0.0;\n        satrec.si2   = 0.0; satrec.si3   = 0.0; satrec.sl2   = 0.0;\n        satrec.sl3   = 0.0; satrec.sl4   = 0.0; satrec.gsto  = 0.0;\n        satrec.xfact = 0.0; satrec.xgh2  = 0.0; satrec.xgh3  = 0.0;\n        satrec.xgh4  = 0.0; satrec.xh2   = 0.0; satrec.xh3   = 0.0;\n        satrec.xi2   = 0.0; satrec.xi3   = 0.0; satrec.xl2   = 0.0;\n        satrec.xl3   = 0.0; satrec.xl4   = 0.0; satrec.xlamo = 0.0;\n        satrec.zmol  = 0.0; satrec.zmos  = 0.0; satrec.atime = 0.0;\n        satrec.xli   = 0.0; satrec.xni   = 0.0;\n\n\n        // sgp4fix - note the following variables are also passed directly via satrec.\n        // it is possible to streamline the sgp4init call by deleting the \"x\"\n        // variables, but the user would need to set the satrec.* values first. we\n        // include the additional assignments in case twoline2rv is not used.\n\n        satrec.bstar   = xbstar;\n        satrec.ecco    = xecco;\n        satrec.argpo   = xargpo;\n        satrec.inclo   = xinclo;\n        satrec.mo      = xmo;\n        satrec.no      = xno;\n        satrec.nodeo   = xnodeo;\n\n        //  sgp4fix add opsmode\n        satrec.operationmode = opsmode;\n\n        //  ------------------------ earth constants -----------------------\n        //  sgp4fix identify constants and allow alternate values\n\n\n        var ss     = 78.0 / constants.earthRadius + 1.0;\n        //  sgp4fix use multiply for speed instead of pow\n        var qzms2ttemp = (120.0 - 78.0) / constants.earthRadius;\n        var qzms2t = qzms2ttemp * qzms2ttemp * qzms2ttemp * qzms2ttemp;\n        var x2o3   =  2.0 / 3.0;\n\n        satrec.init = 'y';\n        satrec.t    = 0.0;\n\n        var initlParameters = {\n            satn : satn,\n            ecco : satrec.ecco,\n\n            epoch : epoch,\n            inclo : satrec.inclo,\n            no : satrec.no,\n\n            method : satrec.method,\n            opsmode : satrec.operationmode\n        };\n\n        var initlResult= initl(initlParameters);\n\n        satrec.no       = initlResult.no;\n\n        // TODO: defined but never used\n        //var method      = initlResult.method;\n        //var ainv        = initlResult.ainv;\n\n        var ao          = initlResult.ao;\n        satrec.con41    = initlResult.con41;\n        var con42       = initlResult.con42;\n        var cosio       = initlResult.cosio;\n        var cosio2      = initlResult.cosio2;\n        var eccsq       = initlResult.eccsq;\n        var omeosq      = initlResult.omeosq;\n        var posq        = initlResult.posq;\n        var rp          = initlResult.rp;\n        var rteosq      = initlResult.rteosq;\n        var sinio       = initlResult.sinio;\n        satrec.gsto     = initlResult.gsto;\n\n        satrec.error = 0;\n\n        // sgp4fix remove this check as it is unnecessary\n        // the mrt check in sgp4 handles decaying satellite cases even if the starting\n        // condition is below the surface of te earth\n        //     if (rp < 1.0)\n        //       {\n        //         printf(\"// *** satn%d epoch elts sub-orbital ***\\n\", satn);\n        //         satrec.error = 5;\n        //       }\n\n\n        if (omeosq >= 0.0 || satrec.no >= 0.0){\n            satrec.isimp = 0;\n            if (rp < 220.0 / constants.earthRadius + 1.0){\n                satrec.isimp = 1;\n            }\n            sfour  = ss;\n            qzms24 = qzms2t;\n            perige = (rp - 1.0) * constants.earthRadius;\n\n            //  - for perigees below 156 km, s and qoms2t are altered -\n            if (perige < 156.0){\n                sfour = perige - 78.0;\n                if (perige < 98.0){\n                    sfour = 20.0;\n                }\n                //  sgp4fix use multiply for speed instead of pow\n                var qzms24temp =  (120.0 - sfour) / constants.earthRadius;\n                qzms24 = qzms24temp * qzms24temp * qzms24temp * qzms24temp;\n                sfour  = sfour / constants.earthRadius + 1.0;\n            }\n            pinvsq = 1.0 / posq;\n\n            tsi  = 1.0 / (ao - sfour);\n            satrec.eta  = ao * satrec.ecco * tsi;\n            etasq = satrec.eta * satrec.eta;\n            eeta  = satrec.ecco * satrec.eta;\n            psisq = Math.abs(1.0 - etasq);\n            coef  = qzms24 * Math.pow(tsi, 4.0);\n            coef1 = coef / Math.pow(psisq, 3.5);\n            cc2   = coef1 * satrec.no * (ao * (1.0 + 1.5 * etasq + eeta *\n                    (4.0 + etasq)) + 0.375 * constants.j2 * tsi / psisq * satrec.con41 *\n                    (8.0 + 3.0 * etasq * (8.0 + etasq)));\n            satrec.cc1   = satrec.bstar * cc2;\n            cc3   = 0.0;\n            if (satrec.ecco > 1.0e-4) {\n                cc3 = -2.0 * coef * tsi * constants.j3oj2 * satrec.no * sinio / satrec.ecco;\n            }\n            satrec.x1mth2 = 1.0 - cosio2;\n            satrec.cc4    = 2.0 * satrec.no * coef1 * ao * omeosq *\n                            (satrec.eta * (2.0 + 0.5 * etasq) + satrec.ecco *\n                            (0.5 + 2.0 * etasq) - constants.j2 * tsi / (ao * psisq) *\n                            (-3.0 * satrec.con41 * (1.0 - 2.0 * eeta + etasq *\n                            (1.5 - 0.5 * eeta)) + 0.75 * satrec.x1mth2 *\n                            (2.0 * etasq - eeta * (1.0 + etasq)) * Math.cos(2.0 * satrec.argpo)));\n            satrec.cc5 =    2.0 * coef1 * ao * omeosq * (1.0 + 2.75 *\n                            (etasq + eeta) + eeta * etasq);\n            cosio4 = cosio2 * cosio2;\n            temp1 = 1.5 * constants.j2 * pinvsq * satrec.no;\n            temp2 = 0.5 * temp1 * constants.j2 * pinvsq;\n            temp3 = -0.46875 * constants.j4 * pinvsq * pinvsq * satrec.no;\n            satrec.mdot   = satrec.no + 0.5 * temp1 * rteosq * satrec.con41 + 0.0625 *\n                            temp2 * rteosq * (13.0 - 78.0 * cosio2 + 137.0 * cosio4);\n            satrec.argpdot = (-0.5 * temp1 * con42 + 0.0625 * temp2 *\n                            (7.0 - 114.0 * cosio2 + 395.0 * cosio4) +\n            temp3 * (3.0 - 36.0 * cosio2 + 49.0 * cosio4));\n            xhdot1 = -temp1 * cosio;\n            satrec.nodedot = xhdot1 + (0.5 * temp2 * (4.0 - 19.0 * cosio2) +\n                            2.0 * temp3 * (3.0 - 7.0 * cosio2)) * cosio;\n            xpidot =  satrec.argpdot+ satrec.nodedot;\n            satrec.omgcof   = satrec.bstar * cc3 * Math.cos(satrec.argpo);\n            satrec.xmcof    = 0.0;\n            if (satrec.ecco > 1.0e-4) {\n                satrec.xmcof = -x2o3 * coef * satrec.bstar / eeta;\n            }\n            satrec.nodecf = 3.5 * omeosq * xhdot1 * satrec.cc1;\n            satrec.t2cof   = 1.5 * satrec.cc1;\n            //  sgp4fix for divide by zero with xinco = 180 deg\n            if (Math.abs(cosio+1.0) > 1.5e-12){\n                satrec.xlcof = -0.25 * constants.j3oj2 * sinio * (3.0 + 5.0 * cosio) / (1.0 + cosio);\n            }\n            else{\n                satrec.xlcof = -0.25 * constants.j3oj2 * sinio * (3.0 + 5.0 * cosio) / temp4;\n            }\n            satrec.aycof   = -0.5 * constants.j3oj2 * sinio;\n            //  sgp4fix use multiply for speed instead of pow\n            var delmotemp = 1.0 + satrec.eta * Math.cos(satrec.mo);\n            satrec.delmo   = delmotemp * delmotemp * delmotemp;\n            satrec.sinmao  = Math.sin(satrec.mo);\n            satrec.x7thm1  = 7.0 * cosio2 - 1.0;\n\n            //  --------------- deep space initialization -------------\n            if (2*constants.pi / satrec.no >= 225.0){\n                satrec.method = 'd';\n                satrec.isimp  = 1;\n                tc    =  0.0;\n                inclm = satrec.inclo;\n\n                var dscomParameters = {\n                    epoch : epoch,\n                    ep : satrec.ecco,\n                    argpp : satrec.argpo,\n                    tc : tc,\n                    inclp : satrec.inclo,\n                    nodep : satrec.nodeo,\n\n                    np : satrec.no,\n\n                    e3 : satrec.e3,\n                    ee2 : satrec.ee2,\n\n                    peo : satrec.peo,\n                    pgho : satrec.pgho,\n                    pho : satrec.pho,\n                    pinco : satrec.pinco,\n\n                    plo : satrec.plo,\n                    se2 : satrec.se2,\n                    se3 : satrec.se3,\n\n                    sgh2 : satrec.sgh2,\n                    sgh3 : satrec.sgh3,\n                    sgh4 : satrec.sgh4,\n\n                    sh2 : satrec.sh2,\n                    sh3 : satrec.sh3,\n                    si2 : satrec.si2,\n                    si3 : satrec.si3,\n\n                    sl2 : satrec.sl2,\n                    sl3 : satrec.sl3,\n                    sl4 : satrec.sl4,\n\n                    xgh2 : satrec.xgh2,\n                    xgh3 : satrec.xgh3,\n                    xgh4 : satrec.xgh4,\n                    xh2 : satrec.xh2,\n\n                    xh3 : satrec.xh3,\n                    xi2 : satrec.xi2,\n                    xi3 : satrec.xi3,\n                    xl2 : satrec.xl2,\n\n                    xl3 : satrec.xl3,\n                    xl4 : satrec.xl4,\n\n                    zmol : satrec.zmol,\n                    zmos : satrec.zmos\n                };\n\n                var dscomResult = dscom(dscomParameters);\n\n                snodm = dscomResult.snodm;\n                cnodm = dscomResult.cnodm;\n                sinim = dscomResult.sinim;\n                cosim = dscomResult.cosim;\n                sinomm = dscomResult.sinomm;\n\n                cosomm = dscomResult.cosomm;\n                day = dscomResult.day;\n                satrec.e3 = dscomResult.e3;\n                satrec.ee2 = dscomResult.ee2;\n                em = dscomResult.em;\n\n                emsq = dscomResult.emsq;\n                gam = dscomResult.gam;\n                satrec.peo = dscomResult.peo;\n                satrec.pgho = dscomResult.pgho;\n                satrec.pho = dscomResult.pho;\n\n                satrec.pinco = dscomResult.pinco;\n                satrec.plo = dscomResult.plo;\n                rtemsq = dscomResult.rtemsq;\n                satrec.se2 = dscomResult.se2;\n                satrec.se3 = dscomResult.se3;\n\n                satrec.sgh2 = dscomResult.sgh2;\n                satrec.sgh3 = dscomResult.sgh3;\n                satrec.sgh4 = dscomResult.sgh4;\n                satrec.sh2 = dscomResult.sh2;\n                satrec.sh3 = dscomResult.sh3;\n\n                satrec.si2 = dscomResult.si2;\n                satrec.si3 = dscomResult.si3;\n                satrec.sl2 = dscomResult.sl2;\n                satrec.sl3 = dscomResult.sl3;\n                satrec.sl4 = dscomResult.sl4;\n\n                s1 = dscomResult.s1;\n                s2 = dscomResult.s2;\n                s3 = dscomResult.s3;\n                s4 = dscomResult.s4;\n                s5 = dscomResult.s5;\n\n                s6 = dscomResult.s6;\n                s7 = dscomResult.s7;\n                ss1 = dscomResult.ss1;\n                ss2 = dscomResult.ss2;\n                ss3 = dscomResult.ss3;\n\n                ss4 = dscomResult.ss4;\n                ss5 = dscomResult.ss5;\n                ss6 = dscomResult.ss6;\n                ss7 = dscomResult.ss7;\n                sz1 = dscomResult.sz1;\n\n                sz2 = dscomResult.sz2;\n                sz3 = dscomResult.sz3;\n                sz11 = dscomResult.sz11;\n                sz12 = dscomResult.sz12;\n                sz13 = dscomResult.sz13;\n\n                sz21 = dscomResult.sz21;\n                sz22 = dscomResult.sz22;\n                sz23 = dscomResult.sz23;\n                sz31 = dscomResult.sz31;\n                sz32 = dscomResult.sz32;\n\n                sz33 = dscomResult.sz33;\n                satrec.xgh2 = dscomResult.xgh2;\n                satrec.xgh3 = dscomResult.xgh3;\n                satrec.xgh4 = dscomResult.xgh4;\n                satrec.xh2 = dscomResult.xh2;\n\n                satrec.xh3 = dscomResult.xh3;\n                satrec.xi2 = dscomResult.xi2;\n                satrec.xi3 = dscomResult.xi3;\n                satrec.xl2 = dscomResult.xl2;\n                satrec.xl3 = dscomResult.xl3;\n\n                satrec.xl4 = dscomResult.xl4;\n                nm = dscomResult.nm;\n                z1 = dscomResult.z1;\n                z2 = dscomResult.z2;\n                z3 = dscomResult.z3;\n\n                z11 = dscomResult.z11;\n                z12 = dscomResult.z12;\n                z13 = dscomResult.z13;\n                z21 = dscomResult.z21;\n                z22 = dscomResult.z22;\n\n                z23 = dscomResult.z23;\n                z31 = dscomResult.z31;\n                z32 = dscomResult.z32;\n                z33 = dscomResult.z33;\n                satrec.zmol = dscomResult.zmol;\n                satrec.zmos = dscomResult.zmos;\n\n                var dpperParameters = {\n                    inclo : inclm,\n                    init : satrec.init,\n                    ep : satrec.ecco,\n                    inclp : satrec.inclo,\n                    nodep : satrec.nodeo,\n                    argpp : satrec.argpo,\n                    mp : satrec.mo,\n                    opsmode : satrec.operationmode\n                };\n\n                var dpperResult = dpper(satrec, dpperParameters);\n\n                satrec.ecco = dpperResult.ep;\n                satrec.inclo = dpperResult.inclp;\n                satrec.nodeo = dpperResult.nodep;\n                satrec.argpo = dpperResult.argpp;\n                satrec.mo = dpperResult.mp;\n\n                argpm  = 0.0;\n                nodem  = 0.0;\n                mm     = 0.0;\n\n                var dsinitParameters = {\n                    cosim : cosim,\n                    emsq : emsq,\n                    argpo : satrec.argpo,\n                    s1 : s1,\n                    s2 : s2,\n                    s3 : s3,\n                    s4 : s4,\n                    s5 : s5,\n                    sinim : sinim,\n                    ss1 : ss1,\n                    ss2 : ss2,\n                    ss3 : ss3,\n                    ss4 : ss4,\n                    ss5 : ss5,\n                    sz1 : sz1,\n                    sz3 : sz3,\n                    sz11 : sz11,\n                    sz13 : sz13,\n                    sz21 : sz21,\n                    sz23 : sz23,\n                    sz31 : sz31,\n                    sz33 : sz33,\n                    t : satrec.t,\n                    tc : tc,\n                    gsto : satrec.gsto,\n                    mo : satrec.mo,\n                    mdot : satrec.mdot,\n                    no : satrec.no,\n                    nodeo : satrec.nodeo,\n                    nodedot : satrec.nodedot,\n                    xpidot : xpidot,\n                    z1 : z1,\n                    z3 : z3,\n                    z11 : z11,\n                    z13 : z13,\n                    z21 : z21,\n                    z23 : z23,\n                    z31 : z31,\n                    z33 : z33,\n                    ecco : satrec.ecco,\n                    eccsq : eccsq,\n                    em : em,\n                    argpm : argpm,\n                    inclm : inclm,\n                    mm : mm,\n                    nm : nm,\n                    nodem : nodem,\n                    irez : satrec.irez,\n                    atime : satrec.atime,\n                    d2201 : satrec.d2201,\n                    d2211 : satrec.d2211,\n                    d3210 : satrec.d3210,\n                    d3222 : satrec.d3222 ,\n                    d4410 : satrec.d4410,\n                    d4422 : satrec.d4422,\n                    d5220 : satrec.d5220,\n                    d5232 : satrec.d5232,\n                    d5421 : satrec.d5421,\n                    d5433 : satrec.d5433,\n                    dedt : satrec.dedt,\n                    didt : satrec.didt,\n                    dmdt : satrec.dmdt,\n                    dnodt : satrec.dnodt,\n                    domdt : satrec.domdt,\n                    del1 : satrec.del1,\n                    del2 : satrec.del2,\n                    del3 : satrec.del3,\n                    xfact : satrec.xfact,\n                    xlamo : satrec.xlamo,\n                    xli : satrec.xli,\n                    xni : satrec.xni\n                };\n\n                var dsinitResult = dsinit( dsinitParameters );\n\n                em              = dsinitResult.em;\n                argpm           = dsinitResult.argpm;\n                inclm           = dsinitResult.inclm;\n                mm              = dsinitResult.mm;\n                nm              = dsinitResult.nm;\n\n                nodem           = dsinitResult.nodem;\n                satrec.irez     = dsinitResult.irez;\n                satrec.atime    = dsinitResult.atime;\n                satrec.d2201    = dsinitResult.d2201;\n                satrec.d2211    = dsinitResult.d2211;\n\n                satrec.d3210    = dsinitResult.d3210;\n                satrec.d3222    = dsinitResult.d3222;\n                satrec.d4410    = dsinitResult.d4410;\n                satrec.d4422    = dsinitResult.d4422;\n                satrec.d5220    = dsinitResult.d5220;\n\n                satrec.d5232    = dsinitResult.d5232;\n                satrec.d5421    = dsinitResult.d5421;\n                satrec.d5433    = dsinitResult.d5433;\n                satrec.dedt     = dsinitResult.dedt;\n                satrec.didt     = dsinitResult.didt;\n\n                satrec.dmdt     = dsinitResult.dmdt;\n                dndt            = dsinitResult.dndt;\n                satrec.dnodt    = dsinitResult.dnodt;\n                satrec.domdt    = dsinitResult.domdt;\n                satrec.del1     = dsinitResult.del1;\n\n                satrec.del2     = dsinitResult.del2;\n                satrec.del3     = dsinitResult.del3;\n                satrec.xfact    = dsinitResult.xfact;\n                satrec.xlamo    = dsinitResult.xlamo;\n                satrec.xli      = dsinitResult.xli;\n\n                satrec.xni      = dsinitResult.xni;\n            }\n\n            //----------- set variables if not deep space -----------\n            if (satrec.isimp !== 1){\n                cc1sq       = satrec.cc1 * satrec.cc1;\n                satrec.d2   = 4.0 * ao * tsi * cc1sq;\n                temp        = satrec.d2 * tsi * satrec.cc1 / 3.0;\n                satrec.d3   = (17.0 * ao + sfour) * temp;\n                satrec.d4   = 0.5 * temp * ao * tsi * (221.0 * ao + 31.0 * sfour) * satrec.cc1;\n                satrec.t3cof= satrec.d2 + 2.0 * cc1sq;\n                satrec.t4cof= 0.25 * (3.0 * satrec.d3 + satrec.cc1 *\n                (12.0 * satrec.d2 + 10.0 * cc1sq));\n                satrec.t5cof= 0.2 * (3.0 * satrec.d4 +\n                12.0 * satrec.cc1 * satrec.d3 +\n                6.0 * satrec.d2 * satrec.d2 +\n                15.0 * cc1sq * (2.0 * satrec.d2 + cc1sq));\n            }\n\n\n            /* finally propogate to zero epoch to initialize all others. */\n            // sgp4fix take out check to let satellites process until they are actually below earth surface\n            //  if(satrec.error == 0)\n        }\n        sgp4(satrec, 0.0);\n\n        satrec.init = 'n';\n\n        // sgp4fix return boolean. satrec.error contains any error codes\n        return true;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('propagate/twoline2satrec',[\n    '../constants',\n    '../gstime/days2mdhms',\n    '../gstime/jday',\n    '../sgp4init'\n], function(\n    constants,\n    days2mdhms,\n    jday,\n    sgp4init\n) {\n    'use strict';\n\n    return function twoline2rv(longstr1, longstr2){\n        /*Return a Satellite imported from two lines of TLE data.\n\n         Provide the two TLE lines as strings `longstr1` and `longstr2`,\n         and select which standard set of gravitational constants you want\n         by providing `gravity_constants`:\n\n         `sgp4.propagation.wgs72` - Standard WGS 72 model\n         `sgp4.propagation.wgs84` - More recent WGS 84 model\n         `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n\n         Normally, computations are made using various recent improvements\n         to the algorithm.  If you want to turn some of these off and go\n         back into \"afspc\" mode, then set `afspc_mode` to `True`. */\n\n        var opsmode = 'i';\n        var xpdotp   =  1440.0 / (2.0 *constants.pi);  //  229.1831180523293;\n        var revnum = 0;\n        var elnum = 0;\n        var year = 0;\n\n        var satrec = {};\n        satrec.error = 0;\n\n        // TODO: defined but never used\n        //var cardnumb        = parseInt(longstr1.substring(0, 1), 10);\n\n        satrec.satnum       = longstr1.substring(2, 7);\n\n        // TODO: defined but never used\n        //var classification  = longstr1.substring(7, 8);\n        //var intldesg        = longstr1.substring(9, 11);\n\n        satrec.epochyr      = parseInt(longstr1.substring(18, 20), 10);\n        satrec.epochdays    = parseFloat(longstr1.substring(20, 32));\n        satrec.ndot         = parseFloat(longstr1.substring(33, 43));\n        satrec.nddot        = parseFloat(\n                                '.' + parseInt(longstr1.substring(44, 50), 10) +\n                                'E' + longstr1.substring(50, 52)\n                            );\n        satrec.bstar        = parseFloat(\n                                longstr1.substring(53, 54) +\n                                '.' +  parseInt(longstr1.substring(54, 59), 10) +\n                                'E' + longstr1.substring(59, 61)\n                            );\n\n        // TODO: defined but never used\n        //var numb            = parseInt(longstr1.substring(62, 63), 10);\n\n        elnum               = parseInt(longstr1.substring(64, 68), 10);\n\n        //satrec.satnum   = longstr2.substring(2, 7);\n        satrec.inclo    = parseFloat(longstr2.substring(8, 16));\n        satrec.nodeo    = parseFloat(longstr2.substring(17, 25));\n        satrec.ecco     = parseFloat('.' + longstr2.substring(26, 33));\n        satrec.argpo    = parseFloat(longstr2.substring(34, 42));\n        satrec.mo       = parseFloat(longstr2.substring(43, 51));\n        satrec.no       = parseFloat(longstr2.substring(52, 63));\n        revnum          = parseFloat(longstr2.substring(63, 68));\n\n\n        //  ---- find no, ndot, nddot ----\n        satrec.no   = satrec.no / xpdotp; //   rad/min\n        //satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n        //satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n\n        //  ---- convert to sgp4 units ----\n        satrec.a    = Math.pow( satrec.no*constants.tumin , (-2.0/3.0) );\n        satrec.ndot = satrec.ndot  / (xpdotp*1440.0);  //   ? * minperday\n        satrec.nddot= satrec.nddot / (xpdotp*1440.0*1440);\n\n        //  ---- find standard orbital elements ----\n        satrec.inclo = satrec.inclo  * constants.deg2rad;\n        satrec.nodeo = satrec.nodeo  * constants.deg2rad;\n        satrec.argpo = satrec.argpo  * constants.deg2rad;\n        satrec.mo    = satrec.mo     * constants.deg2rad;\n\n        satrec.alta = satrec.a*(1.0 + satrec.ecco) - 1.0;\n        satrec.altp = satrec.a*(1.0 - satrec.ecco) - 1.0;\n\n\n        // ----------------------------------------------------------------\n        // find sgp4epoch time of element set\n        // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n        // and minutes from the epoch (time)\n        // ----------------------------------------------------------------\n\n        // ---------------- temp fix for years from 1957-2056 -------------------\n        // --------- correct fix will occur when year is 4-digit in tle ---------\n\n        if (satrec.epochyr < 57){\n            year = satrec.epochyr + 2000;\n        }\n        else{\n            year = satrec.epochyr + 1900;\n        }\n\n\n        var mdhmsResult = days2mdhms(year, satrec.epochdays);\n        var mon      = mdhmsResult.mon;\n        var day      = mdhmsResult.day;\n        var hr       = mdhmsResult.hr;\n        var minute   = mdhmsResult.minute;\n        var sec      = mdhmsResult.sec;\n        satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec);\n\n        //  ---------------- initialize the orbit at sgp4epoch -------------------\n        var sgp4initParameters = {\n            opsmode : opsmode,\n            satn : satrec.satnum,\n            epoch : satrec.jdsatepoch-2433281.5,\n            xbstar : satrec.bstar,\n\n            xecco : satrec.ecco,\n            xargpo : satrec.argpo,\n            xinclo : satrec.inclo,\n            xmo : satrec.mo,\n            xno : satrec.no,\n\n            xnodeo : satrec.nodeo\n        };\n\n        sgp4init(satrec, sgp4initParameters );\n\n        return satrec;\n    };\n});\ndefine('satellite',[\n    './constants',\n    './coordinate-transforms/degrees-lat',\n    './coordinate-transforms/degrees-long',\n    './coordinate-transforms/ecf-to-eci',\n    './coordinate-transforms/ecf-to-look-angles',\n    './coordinate-transforms/eci-to-ecf',\n    './coordinate-transforms/eci-to-geodetic',\n    './coordinate-transforms/geodetic-to-ecf',\n    './coordinate-transforms/topocentric',\n    './coordinate-transforms/topocentric-to-look-angles',\n    './doppler-factor',\n    './gstime/days2mdhms',\n    './gstime/gstime',\n    './gstime/jday',\n    './propagate/propagate',\n    './propagate/twoline2satrec',\n    './sgp4'\n], function(\n    constants,\n    degreesLat,\n    degreesLong,\n    ecfToEci,\n    ecfToLookAngles,\n    eciToEcf,\n    eciToGeodetic,\n    geodeticToEcf,\n    topocentric,\n    topocentricToLookAngles,\n    dopplerFactor,\n    days2mdhms,\n    gstime,\n    jday,\n    propagate,\n    twoline2satrec,\n    sgp4\n) {\n    'use strict';\n\n    return {\n        version: '1.2.0',\n        constants: constants,\n\n        // Coordinate transforms\n        degreesLat: degreesLat,\n        degreesLong: degreesLong,\n        eciToEcf: eciToEcf,\n        ecfToEci: ecfToEci,\n        eciToGeodetic: eciToGeodetic,\n        ecfToLookAngles: ecfToLookAngles,\n        geodeticToEcf: geodeticToEcf,\n\n        dopplerFactor: dopplerFactor,\n        gstimeFromJday: gstime,\n        gstimeFromDate: function() {\n            return gstime(jday.apply(null, arguments));\n        },\n        jday: jday,\n        propagate: propagate,\n        twoline2satrec: twoline2satrec,\n        sgp4: sgp4\n    };\n});\n    return require('satellite');\n}));\n//# sourceMappingURL=satellite.js.map\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require(\"./constants\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.constants);\n    global.undefined = mod.exports;\n  }\n})(this, function (exports, _constants) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports._crossesAntemeridian = exports._degreesToRadians = exports._radiansToDegrees = exports._toCamelCase = exports._dayOfYearToTimeStamp = exports._decimalAssumedEToFloat = exports._toLeadingDecimal = exports._getDigitCount = exports._isPositive = undefined;\n\n  /**\n   * Determines if a number is positive.\n   */\n  var _isPositive = exports._isPositive = function _isPositive(num) {\n    return num >= 0;\n  };\n  /**\n   * Determines the amount of digits in a number.  Used for converting a TLE's \"leading decimal\n   * assumed\" notation.\n   *\n   * Example:\n   * getDigitCount(12345);\n   * -> 5\n   */\n\n\n  var _getDigitCount = exports._getDigitCount = function _getDigitCount(num) {\n    var absVal = Math.abs(num);\n    return absVal.toString().length;\n  };\n  /**\n   * Converts a TLE's \"leading decimal assumed\" notation to a float representation.\n   *\n   * Example:\n   * toLeadingDecimal(12345);\n   * -> 0.12345\n   */\n\n\n  var _toLeadingDecimal = exports._toLeadingDecimal = function _toLeadingDecimal(num) {\n    var numDigits = _getDigitCount(num);\n\n    var zeroes = '0'.repeat(numDigits - 1);\n    return parseFloat(num * \"\".concat(_constants._LEADING_ZERO_ASSUMED_PREFIX).concat(zeroes, \"1\"));\n  };\n  /**\n   * Converts a TLE's \"leading decimal assumed\" notation with leading zeroes to a float\n   * representation.\n   *\n   * Example:\n   * decimalAssumedEToFloat('12345-4');\n   * -> 0.000012345\n   */\n\n\n  var _decimalAssumedEToFloat = exports._decimalAssumedEToFloat = function _decimalAssumedEToFloat(str) {\n    var numWithAssumedLeadingDecimal = str.substr(0, str.length - 2);\n\n    var num = _toLeadingDecimal(numWithAssumedLeadingDecimal);\n\n    var leadingDecimalPoints = parseInt(str.substr(str.length - 2, 2), 10);\n    var float = num * Math.pow(10, leadingDecimalPoints);\n    return float.toPrecision(5);\n  };\n  /**\n   * Converts a fractional day of the year to a timestamp.  Used for parsing the TLE epoch.\n   */\n\n\n  var _dayOfYearToTimeStamp = exports._dayOfYearToTimeStamp = function _dayOfYearToTimeStamp(dayOfYear) {\n    var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date().getFullYear();\n    var yearStart = new Date(\"1/1/\".concat(year, \" 0:0:0 Z\"));\n    var yearStartMS = yearStart.getTime();\n    return Math.floor(yearStartMS + (dayOfYear - 1) * _constants._MS_IN_A_DAY);\n  };\n  /**\n   * Converts a string divided by spacer characters to camelCase representation.\n   *\n   * Examples:\n   * toCamelCase('foo-bar');\n   * -> 'fooBar'\n   * toCamelCase('foo bar', ' ');\n   * -> 'fooBar'\n   */\n\n\n  var _toCamelCase = exports._toCamelCase = function _toCamelCase(str) {\n    var divider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n    var bits = str.split(divider);\n    var output = [];\n    output.push(bits[0]);\n\n    for (var i = 1, len = bits.length; i < len; i++) {\n      output.push(bits[i].substr(0, 1).toUpperCase() + bits[i].substr(1, bits[i].length - 1));\n    }\n\n    return output.join('');\n  };\n  /**\n   * Converts radians (0 to 2π) to degrees (0 to 360).\n   */\n\n\n  var _radiansToDegrees = exports._radiansToDegrees = function _radiansToDegrees(radians) {\n    return radians * (180 / Math.PI);\n  };\n  /**\n   * Converts degrees (0 to 360) to radians (0 to 2π).\n   */\n\n\n  var _degreesToRadians = exports._degreesToRadians = function _degreesToRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  };\n  /**\n   * Determines if a pair of longitude points crosses over the antemeridian, which is a\n   * pain point for mapping software.\n   */\n\n\n  var _crossesAntemeridian = exports._crossesAntemeridian = function _crossesAntemeridian(longitude1, longitude2) {\n    if (!longitude1 || !longitude2) return false;\n\n    var isLong1Positive = _isPositive(longitude1);\n\n    var isLong2Positive = _isPositive(longitude2);\n\n    var haveSameSigns = isLong1Positive === isLong2Positive;\n    if (haveSameSigns) return false; // Signs don't match, so check if we're reasonably near the antemeridian (just to be sure it's\n    // not the prime meridian).\n\n    var isNearAntemeridian = Math.abs(longitude1) > 100;\n    return isNearAntemeridian;\n  };\n});\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, exports, require(\"./constants\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, mod.exports, global.constants);\n    global.undefined = mod.exports;\n  }\n})(this, function (module, exports, _constants) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var line1 = {\n    /* TLE line number. Will always return 1 for valid TLEs. */\n    lineNumber1: {\n      start: 0,\n      length: 1,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /**\n     * NORAD satellite catalog number (Sputnik's rocket was 00001).\n     *\n     * Range: 0 to 99999\n     * Example: 25544\n     */\n    satelliteNumber: {\n      start: 2,\n      length: 5,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /**\n     * Satellite classification.\n     * 'U' = unclassified\n     * 'C' = classified\n     * 'S' = secret)\n     *\n     * Example: 'U'\n     */\n    classification: {\n      start: 7,\n      length: 1,\n      type: _constants._DATA_TYPES._CHAR\n    },\n\n    /**\n     * International Designator: Last 2 digits of launch year. 57 to 99 = 1900s, 00-56 = 2000s.\n     * See https://en.wikipedia.org/wiki/International_Designator\n     *\n     * Range: 00 to 99\n     * Example: 98\n     */\n    intDesignatorYear: {\n      start: 9,\n      length: 2,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /**\n     * International Designator: Launch number of the year.\n     * See https://en.wikipedia.org/wiki/International_Designator\n     *\n     * Range: 1 to 999\n     * Example: 67\n     */\n    intDesignatorLaunchNumber: {\n      start: 11,\n      length: 3,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /**\n     * International Designator: Piece of the launch.\n     * See https://en.wikipedia.org/wiki/International_Designator\n     *\n     * Range: A to ZZZ\n     * Example: 'A'\n     */\n    intDesignatorPieceOfLaunch: {\n      start: 14,\n      length: 3,\n      type: _constants._DATA_TYPES._CHAR\n    },\n\n    /**\n     * Year when the TLE was generated (TLE epoch), last two digits.\n     *\n     * Range: 00 to 99\n     * Example: 17\n     */\n    epochYear: {\n      start: 18,\n      length: 2,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /**\n     * Fractional day of the year when the TLE was generated (TLE epoch).\n     *\n     * Range: 1 to 365.99999999\n     * Example: 206.18396726\n     */\n    epochDay: {\n      start: 20,\n      length: 12,\n      type: _constants._DATA_TYPES._FLOAT\n    },\n\n    /**\n     * First Time Derivative of the Mean Motion divided by two.  Defines how mean motion changes\n     * from day to day, so TLE propagators can still be used to make reasonable guesses when\n     * times are distant from the original TLE epoch.\n     *\n     * Units: Orbits / day ^ 2\n     * Example: 0.00001961\n     */\n    firstTimeDerivative: {\n      start: 33,\n      length: 11,\n      type: _constants._DATA_TYPES._FLOAT\n    },\n\n    /**\n     * Second Time Derivative of Mean Motion divided by six (decimal point assumed). Measures rate\n     * of change in the Mean Motion Dot so software can make reasonable guesses when times are\n     * distant from the original TLE epoch.\n     *\n     * Usually zero, unless the satellite is manuevering or in a decaying orbit.\n     *\n     * Units: Orbits / day ^ 3.\n     * Example: 0 ('00000-0' in the original TLE [= 0.00000 * 10 ^ 0])\n     */\n    secondTimeDerivative: {\n      start: 44,\n      length: 8,\n      type: _constants._DATA_TYPES._DECIMAL_ASSUMED_E\n    },\n\n    /**\n     * BSTAR drag term (decimal point assumed).  Estimates the effects of\n     * atmospheric drag on the satellite's motion.\n     *\n     * Units: EarthRadii ^ -1\n     * Example: 0.000036771 ('36771-4' in the original TLE [= 0.36771 * 10 ^ -4])\n     */\n    bstarDrag: {\n      start: 53,\n      length: 8,\n      type: _constants._DATA_TYPES._DECIMAL_ASSUMED_E\n    },\n\n    /**\n     * Private value - used by Air Force Space Command to reference the orbit model used to\n     * generate the TLE.  Will always be seen as zero externally (e.g. by \"us\", unless you are\n     * \"them\" - in which case, hello!).\n     *\n     * Example: 0\n     */\n    orbitModel: {\n      start: 62,\n      length: 1,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /**\n     * TLE element set number, incremented for each new TLE generated. 999 seems to mean the TLE\n     * has maxed out.\n     *\n     * Range: Technically 1 to 9999, though in practice the maximum number seems to be 999.\n     * Example: 999\n     */\n    tleSetNumber: {\n      start: 64,\n      length: 4,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /*\n     * TLE line 1 checksum (modulo 10), for verifying the integrity of this line of the TLE.\n     *\n     * Range: 0 to 9\n     * Example: 3\n     */\n    checksum1: {\n      start: 68,\n      length: 1,\n      type: _constants._DATA_TYPES._INT\n    }\n  };\n  var line2 = {\n    /* TLE line number. Will always return 2 for valid TLEs. */\n    lineNumber2: {\n      start: 0,\n      length: 1,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /**\n     * NORAD satellite catalog number (Sputnik's rocket was 00001).  Should match the satellite\n     * number on line 1.\n     *\n     * Range: 0 to 99999\n     * Example: 25544\n     */\n    satelliteNumber2: {\n      start: 2,\n      length: 5,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /**\n     * Inclination relative to the Earth's equatorial plane in degrees. 0 to 90 degrees is a\n     * prograde orbit and 90 to 180 degrees is a retrograde orbit.\n     *\n     * Units: degrees\n     * Range: 0 to 180\n     * Example: 51.6400\n     */\n    inclination: {\n      start: 8,\n      length: 8,\n      type: _constants._DATA_TYPES._FLOAT\n    },\n\n    /**\n     * Right ascension of the ascending node in degrees. Essentially, this is the angle of the\n     * satellite as it crosses northward (ascending) across the Earth's equator (equatorial\n     * plane).\n     *\n     * Units: degrees\n     * Range: 0 to 359.9999\n     * Example: 208.9163\n     */\n    rightAscension: {\n      start: 17,\n      length: 8,\n      type: _constants._DATA_TYPES._FLOAT\n    },\n\n    /**\n     * Orbital eccentricity, decimal point assumed. All artifical Earth satellites have an\n     * eccentricity between 0 (perfect circle) and 1 (parabolic orbit).\n     *\n     * Range: 0 to 1\n     * Example: 0.0006317 (`0006317` in the original TLE)\n     */\n    eccentricity: {\n      start: 26,\n      length: 7,\n      type: _constants._DATA_TYPES._DECIMAL_ASSUMED\n    },\n\n    /**\n     * Argument of perigee. See https://en.wikipedia.org/wiki/Argument_of_perigee\n     * Units: degrees\n     * Range: 0 to 359.9999\n     * Example: 69.9862\n     */\n    perigee: {\n      start: 34,\n      length: 8,\n      type: _constants._DATA_TYPES._FLOAT\n    },\n\n    /**\n     * Mean anomaly. Indicates where the satellite was located within its orbit at the time of the\n     * TLE epoch.\n     * See https://en.wikipedia.org/wiki/Mean_Anomaly\n     *\n     * Units: degrees\n     * Range: 0 to 359.9999\n     * Example: 25.2906\n     */\n    meanAnomaly: {\n      start: 43,\n      length: 8,\n      type: _constants._DATA_TYPES._FLOAT\n    },\n\n    /**\n     * Revolutions around the Earth per day (mean motion).\n     * See https://en.wikipedia.org/wiki/Mean_Motion\n     *\n     * Range: 0 to 17 (theoretically)\n     * Example: 15.54225995\n     */\n    meanMotion: {\n      start: 52,\n      length: 11,\n      type: _constants._DATA_TYPES._FLOAT\n    },\n\n    /**\n     * Total satellite revolutions when this TLE was generated. This number seems to roll over\n     * (e.g. 99999 -> 0).\n     *\n     * Range: 0 to 99999\n     * Example: 6766\n     */\n    revNumberAtEpoch: {\n      start: 63,\n      length: 5,\n      type: _constants._DATA_TYPES._INT\n    },\n\n    /*\n     * TLE line 1 checksum (modulo 10), for verifying the integrity of this line of the TLE.\n     *\n     * Range: 0 to 9\n     * Example: 0\n     */\n    checksum2: {\n      start: 68,\n      length: 1,\n      type: _constants._DATA_TYPES._INT\n    }\n  };\n  /**\n   * Fixed locations of orbital element value strings as they have appeared going back to the\n   * punchcard days.\n   * See https://en.wikipedia.org/wiki/Two-line_element_set.\n   */\n\n  exports.default = {\n    line1: line1,\n    line2: line2\n  };\n  module.exports = exports[\"default\"];\n});\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// tle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 69cb7c0b41511bd9ccdc","export const _MS_IN_A_DAY = 1000 * 60 * 60 * 24;\n\n// Data formats for TLE orbital elements.\nexport const _DATA_TYPES = {\n  _INT: Symbol(),\n  _FLOAT: Symbol(),\n  _CHAR: Symbol(),\n  _DECIMAL_ASSUMED: Symbol(),    // 12345   -> 0.12345\n  _DECIMAL_ASSUMED_E: Symbol()   // 12345-2 -> 0.0012345\n};\n\nexport const _ACCEPTABLE_TLE_INPUT_TYPES = {\n  _STRING: 'string',\n  _ARRAY: 'array',\n  _OBJECT: 'object'\n};\n\nexport const _LEADING_ZERO_ASSUMED_PREFIX = '0.';\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants.js","import SatelliteJS from 'satellite.js';\nimport {\n  _crossesAntemeridian,\n  _dayOfYearToTimeStamp,\n  _decimalAssumedEToFloat,\n  _degreesToRadians,\n  _radiansToDegrees,\n  _toCamelCase\n} from './utils';\nimport tleLines from './line-defs';\nimport {\n  _ACCEPTABLE_TLE_INPUT_TYPES,\n  _DATA_TYPES,\n  _LEADING_ZERO_ASSUMED_PREFIX,\n  _MS_IN_A_DAY\n} from './constants';\n\n// TODO: fix this ugliness\nconst satellitejs = (SatelliteJS.twoline2satrec) ? SatelliteJS : SatelliteJS.satellite;\n\nexport default class TLEJS {\n  constructor() {\n    this.createAllTLEGetters(tleLines);\n\n    // TODO: use Set to store cache vals.\n    this.cache = {\n      antemeridianCrossings: {}\n    };\n  }\n\n  /**\n   * Parses a TLE from a string or array input.  Both two and three-line variants are acceptable.\n   */\n  parseTLE(inputTLE) {\n    const fnName = 'parseTLE';\n\n    // Check if already an instance of a TLE object.\n    if (typeof inputTLE === _ACCEPTABLE_TLE_INPUT_TYPES._OBJECT && inputTLE.arr) return inputTLE;\n    const tleStrLong = (Array.isArray(inputTLE)) ? inputTLE.join('') : inputTLE;\n    const tleStr = tleStrLong.substr && tleStrLong.substr(0, 30);\n    const cacheKey = `${fnName}-${tleStr}`;\n    if (this.cache[cacheKey]) return this.cache[cacheKey];\n\n    const outputObj = {};\n    const tleType = (Array.isArray(inputTLE))\n      ? _ACCEPTABLE_TLE_INPUT_TYPES._ARRAY\n      : typeof inputTLE;\n    let tleArr = [];\n\n    switch (tleType) {\n    case _ACCEPTABLE_TLE_INPUT_TYPES._ARRAY:\n      // Make a copy.\n      tleArr = inputTLE.concat();\n      break;\n\n    case _ACCEPTABLE_TLE_INPUT_TYPES._STRING:\n      // Convert string to array.\n      tleArr = inputTLE.split('\\n');\n      break;\n\n    default:\n      throw new Error('TLE input is invalid');\n    }\n\n    // Handle 2 and 3 line variants.\n    if (tleArr.length > 2) {\n      // 3-line TLE with satellite name as the first line.\n\n      // Keep track of satellite name.\n      outputObj.name = tleArr[0];\n\n      // Remove name from array.\n      tleArr.splice(0, 1);\n    } else {\n      // 2-line TLE with no satellite name.\n      outputObj.name = 'Unknown';\n    }\n\n    // Trim spaces\n    tleArr = tleArr.map(line => line.trim());\n\n    outputObj.arr = tleArr;\n\n    this.cache[cacheKey] = outputObj;\n\n    return outputObj;\n  }\n\n  /**\n   * Determines if a TLE is valid, checking for the presence of line numbers and making sure\n   * the calculated checksum matches the expected checksum.\n   */\n  isValidTLE(tle) {\n    const fnName = 'isValidTLE';\n\n    const parsedTLE = this.parseTLE(tle);\n    const tleStr = parsedTLE.arr.join('').substr(0, 30);\n    const cacheKey = `${fnName}-${tleStr}`;\n    if (this.cache[cacheKey]) return this.cache[cacheKey];\n\n    let isValid = true;\n\n    if (parsedTLE.arr.length !== 2) return false;\n\n    // Check line numbers and checksums at the same time.\n    parsedTLE.arr.forEach((line, index) => {\n      // Noop if already invalid.\n      if (!isValid) return;\n\n      const lineNumber = index + 1;\n\n      // Check line number.\n      const parsedLineNumber = this[`getLineNumber${lineNumber}`](parsedTLE);\n      const lineNumberIsValid = parsedLineNumber === lineNumber;\n\n      // Checksum.\n      const calculatedLineChecksum = this.tleLineChecksum(parsedTLE.arr[index]);\n      const parsedChecksum = this[`getChecksum${lineNumber}`](parsedTLE);\n      const checksumIsValid = parsedChecksum === calculatedLineChecksum;\n\n      if (!lineNumberIsValid || !checksumIsValid) {\n        isValid = false;\n      }\n    });\n\n    this.cache[cacheKey] = isValid;\n\n    return isValid;\n  }\n\n  /**\n   * Determines the checksum for a single line of a TLE.\n   *\n   * Checksum = modulo 10 of sum of all numbers (including line number) + 1 for each negative\n   * sign (-).  Everything else is ignored.\n   */\n  tleLineChecksum(tleLineStr) {\n    const charArr = tleLineStr.split('');\n\n    // Remove trailing checksum.\n    charArr.splice(charArr.length - 1, 1);\n\n    if (charArr.length === 0) {\n      throw new Error('Character array empty!', tleLineStr);\n    }\n\n    const checksum = charArr.reduce((sum, val) => {\n      const parsedVal = parseInt(val, 10);\n      const parsedSum = parseInt(sum, 10);\n\n      if (Number.isInteger(parsedVal)) {\n        return parsedSum + parsedVal;\n      } else if (val === '-') {\n        return parsedSum + 1;\n      }\n\n      return parsedSum;\n    });\n\n    return checksum % 10;\n  }\n\n  /**\n   * Creates simple getters for each line of a TLE.\n   */\n  createAllTLEGetters(lines) {\n    const boundCreateTLELineGetters = this.createTLELineGetters.bind(this, lines);\n    Object.keys(lines).forEach(boundCreateTLELineGetters);\n  }\n\n  /**\n   * Creates simple getters for all values on a single line of a TLE.\n   */\n  createTLELineGetters(lines, line) {\n    const boundCreateTLEValGetter = this.createTLEValGetter.bind(this, line);\n    Object.keys(lines[line]).forEach(boundCreateTLEValGetter);\n  }\n\n  /**\n   * Creates a simple getter for a single TLE value.\n   *\n   * TODO: proper ES6 getters?\n   */\n  createTLEValGetter(tleLine, prop) {\n    this[_toCamelCase(`get-${prop}`)] = (tle) => {\n      const parsedTLE = this.parseTLE(tle);\n\n      const tleArr = parsedTLE.arr;\n      const line = (tleLine === 'line1') ? tleArr[0] : tleArr[1];\n      const start = tleLines[tleLine][prop].start;\n      const length = tleLines[tleLine][prop].length;\n\n      const substr = line.substr(start, length);\n\n      let output;\n      switch (tleLines[tleLine][prop].type) {\n      case _DATA_TYPES._INT:\n        output = parseInt(substr, 10);\n        break;\n\n      case _DATA_TYPES._FLOAT:\n        output = parseFloat(substr);\n        break;\n\n      case _DATA_TYPES._DECIMAL_ASSUMED:\n        output = parseFloat(`${_LEADING_ZERO_ASSUMED_PREFIX}${substr}`);\n        break;\n\n      case _DATA_TYPES._DECIMAL_ASSUMED_E:\n        output = _decimalAssumedEToFloat(substr);\n        break;\n\n      case _DATA_TYPES._CHAR:\n      default:\n        output = substr.trim();\n        break;\n      }\n\n      return output;\n    };\n  }\n\n  /**\n   * Determines the Unix timestamp (in ms) of a TLE epoch (the time a TLE was generated).\n   *\n   * Example:\n   * getEpochTimestamp(tleStr);\n   * -> 1500956694771\n   */\n  getEpochTimestamp(tle) {\n    const epochDay = this.getEpochDay(tle);\n    const epochYear = this.getEpochYear(tle);\n    return _dayOfYearToTimeStamp(epochDay, epochYear);\n  }\n\n  /**\n   * Determines the name of a satellite, if present in the first line of a 3-line TLE.  If not\n   * present, 'Unknown' is returned.\n   *\n   * Example:\n   * getSatelliteName(tleStr);\n   * -> 'ISS (ZARYA)'\n   */\n  getSatelliteName(tle) {\n    const parsedTLE = this.parseTLE(tle);\n    return parsedTLE.name;\n  }\n\n  /**\n   * Determines satellite position and look angles from an earth observer.\n   *\n   * Example:\n   * const timestampMS = 1501039265000;\n   * const observer = {\n   *   lat: 34.243889,\n   *   lng: -116.911389,\n   *   height: 0\n   * };\n   * const satInfo = tle.getSatelliteInfo(\n   *   tleStr,          // Satellite TLE string or array.\n   *   timestampMS,     // Timestamp (ms)\n   *   observer.lat,    // Observer latitude (degrees)\n   *   observer.lng,    // Observer longitude (degrees)\n   *   observer.height  // Observer elevation (km)\n   * );\n   *\n   * ->\n   * {\n   *   // satellite compass heading from observer in degrees (0 = north, 180 = south)\n   *   azimuth: 294.5780478624994,\n   *\n   *   // satellite elevation from observer in degrees (90 is directly overhead)\n   *   elevation: 81.63903620330046,\n   *\n   *   // km distance from observer to spacecraft\n   *   range: 406.60211015810074,\n   *\n   *   // spacecraft altitude in km\n   *   height: 402.9082788620108,\n\n   *   // spacecraft latitude in degrees\n   *   lat: 34.45112876592785,\n\n   *   // spacecraft longitude in degrees\n   *   lng: -117.46176597710809,\n   *\n   *   // spacecraft velocity in km/s\n   *   velocity: 7.675627442183371\n   * }\n   */\n  getSatelliteInfo(tle, timestamp, observerLat, observerLng, observerHeight) {\n    const fnName = 'getSatelliteInfo';\n\n    const timestampCopy = timestamp || Date.now();\n\n    const tleArr = (this.parseTLE(tle)).arr;\n    const tleStrShort = tleArr.join('').substr(0, 30);\n\n    const defaultObserverPosition = {\n      lat: 36.9613422,\n      lng: -122.0308,\n      height: 0.370\n    };\n\n    const obsLat = observerLat || defaultObserverPosition.lat;\n    const obsLng = observerLng || defaultObserverPosition.lng;\n    const obsHeight = observerHeight || defaultObserverPosition.height;\n\n    // Memoization\n    const cacheKey = `${fnName}-${tleStrShort}-${timestampCopy}-${observerLat}-${observerLng}\n-${observerHeight}`;\n    if (this.cache[cacheKey]) return this.cache[cacheKey];\n\n    // Sanity check\n    if (!satellitejs) {\n      throw new Error('satellite.js not found');\n    }\n\n    // Initialize a satellite record\n    const satrec = satellitejs.twoline2satrec(tleArr[0], tleArr[1]);\n\n    const time = new Date(timestampCopy);\n\n    // Propagate SGP4.\n    const positionAndVelocity = satellitejs.propagate(satrec, time);\n\n    if (satellitejs.error) {\n      throw new Error('Error: problematic TLE with unexpected eccentricity');\n    }\n\n    // The position_velocity result is a key-value pair of ECI coordinates.\n    // These are the base results from which all other coordinates are derived.\n    const positionEci = positionAndVelocity.position;\n    const velocityEci = positionAndVelocity.velocity;\n\n    // Set the observer position (in radians).\n    const observerGd = {\n      latitude: _degreesToRadians(obsLat),\n      longitude: _degreesToRadians(obsLng),\n      height: obsHeight\n    };\n\n    // Get GMST for some coordinate transforms.\n    // http://en.wikipedia.org/wiki/Sidereal_time#Definition\n    const gmst = satellitejs.gstimeFromDate(time);\n\n    // Get ECF, Geodetic, Look Angles, and Doppler Factor.\n    const positionEcf = satellitejs.eciToEcf(positionEci, gmst);\n    const positionGd = satellitejs.eciToGeodetic(positionEci, gmst);\n    const lookAngles = satellitejs.ecfToLookAngles(observerGd, positionEcf);\n\n    const velocityKmS =\n      Math.sqrt(Math.pow(velocityEci.x, 2) +\n      Math.pow(velocityEci.y, 2) +\n      Math.pow(velocityEci.z, 2));\n\n    // Azimuth: is simply the compass heading from the observer's position.\n    const azimuth = lookAngles.azimuth;\n\n    // Geodetic coords are accessed via `longitude`, `latitude`, `height`.\n    const longitude = positionGd.longitude;\n    const latitude = positionGd.latitude;\n    const height = positionGd.height;\n\n    const output = {\n      lng: satellitejs.degreesLong(longitude),\n      lat: satellitejs.degreesLat(latitude),\n      elevation: _radiansToDegrees(lookAngles.elevation),\n      azimuth: _radiansToDegrees(azimuth),\n      range: lookAngles.rangeSat,\n      height,\n      velocity: velocityKmS\n    };\n\n    this.cache[cacheKey] = output;\n\n    return output;\n  }\n\n  /**\n   * Determines current satellite position, or position at optional timestamp if passed in.\n   */\n  getLatLon(tle, optionalTimestamp = Date.now()) {\n    const tleObj = this.parseTLE(tle);\n\n    // Validation.\n    if (!this.isValidTLE(tleObj)) {\n      throw new Error('TLE could not be parsed:', tle);\n    }\n\n    const satInfo = this.getSatelliteInfo(tleObj.arr, optionalTimestamp);\n    return {\n      lat: satInfo.lat,\n      lng: satInfo.lng\n    };\n  }\n\n  /**\n   * Determines current satellite position, or position at optional timestamp if passed in.\n   */\n  getLatLonArr(tle, optionalTimestamp = Date.now()) {\n    const ll = this.getLatLon(tle, optionalTimestamp);\n    return [ll.lat, ll.lng];\n  }\n\n  /**\n   * Determines the position of the satellite at the time the TLE was generated.\n   */\n  getLatLonAtEpoch(tle) {\n    return this.getLatLon(tle, this.getEpochTimestamp(tle));\n  }\n\n  /**\n   * Determines the average orbit length of the satellite in minutes.\n   */\n  getAverageOrbitLengthMins(tle) {\n    const fnName = 'getAverageOrbitLengthMins';\n\n    const tleStr = tle.join('').substr(0, 30);\n    const cacheKey = `${fnName}-${tleStr}`;\n    if (this.cache[cacheKey]) return this.cache[cacheKey];\n\n    const meanMotionSeconds = (24 * 60) / this.getMeanMotion(tle);\n\n    this.cache[cacheKey] = meanMotionSeconds;\n\n    return meanMotionSeconds;\n  }\n\n  /**\n   * Determines the Unix timestamp (in ms) of the the TLE epoch (when the TLE was generated).\n   */\n  getTLEEpochTimestamp(tle) {\n    const epochYear = this.getEpochYear(tle);\n    const epochDayOfYear = this.getEpochDay(tle);\n    const timestamp = _dayOfYearToTimeStamp(epochDayOfYear, epochYear);\n\n    return timestamp;\n  }\n\n  /**\n   * Determines if the last antemeridian crossing has been cached.  If it has, the time (in ms)\n   * is returned, otherwise it returns false.\n   */\n  getCachedLastAntemeridianCrossingTimeMS(tle, timeMS) {\n    const orbitLengthMS = this.getAverageOrbitLengthMins(tle.arr) * 60 * 1000;\n\n    const tleStr = tle.arr.join('').substr(0, 30);\n\n    const cachedCrossingTimes = this.cache.antemeridianCrossings[tleStr];\n    if (!cachedCrossingTimes) return false;\n\n    if (cachedCrossingTimes === -1) return cachedCrossingTimes;\n\n    const cachedTime = cachedCrossingTimes.filter(val => {\n      if (typeof val === 'object' && val.tle === tle) return -1;\n\n      const diff = timeMS - val;\n      const isDiffPositive = diff > 0;\n      const isWithinOrbit = isDiffPositive && diff < orbitLengthMS;\n      return isWithinOrbit;\n    });\n\n    return cachedTime[0] || false;\n  }\n\n  /**\n   * Determines the last time the satellite crossed the antemeridian.  For mapping convenience\n   * and to avoid headaches, we want to avoid plotting ground tracks that cross the antemeridian.\n   */\n  getLastAntemeridianCrossingTimeMS(tle, timeMS) {\n    const parsedTLE = this.parseTLE(tle);\n\n    const cachedVal = this.getCachedLastAntemeridianCrossingTimeMS(parsedTLE, timeMS);\n    if (cachedVal) return cachedVal;\n\n    const time = timeMS || Date.now();\n\n    let step = 1000 * 60 * 10;\n    let curLatLon = [];\n    let lastLatLon = [];\n    let curTimeMS = time;\n    let didCrossAntemeridian = false;\n    let tries = 0;\n    let isDone = false;\n    const maxTries = 1000;\n    while (!isDone) {\n      curLatLon = this.getLatLonArr(parsedTLE.arr, curTimeMS);\n\n      didCrossAntemeridian = _crossesAntemeridian(lastLatLon[1], curLatLon[1]);\n      if (didCrossAntemeridian) {\n        // back up\n        curTimeMS += step;\n        step = (step > 20000) ? 20000 : step / 2;\n      } else {\n        curTimeMS -= step;\n        lastLatLon = curLatLon;\n      }\n\n      isDone = step < 500 || tries >= maxTries;\n\n      tries++;\n    }\n\n    const couldNotFindCrossing = tries - 1 === maxTries;\n    const crossingTime = (couldNotFindCrossing) ? -1 : parseInt(curTimeMS, 10);\n\n    const tleStr = parsedTLE.arr.join('').substr(0, 30);\n    if (!this.cache.antemeridianCrossings[tleStr]) this.cache.antemeridianCrossings[tleStr] = [];\n\n    if (couldNotFindCrossing) {\n      this.cache.antemeridianCrossings[tleStr] = -1;\n    } else {\n      this.cache.antemeridianCrossings[tleStr].push(crossingTime);\n    }\n\n    return crossingTime;\n  }\n\n  /**\n   * Determines the average amount of milliseconds in one orbit.\n   */\n  getOrbitTimeMS(tle) {\n    return parseInt(_MS_IN_A_DAY / this.getMeanMotion(tle), 10);\n  }\n\n  /**\n   * Calculates three orbit arrays of latitude/longitude pairs.\n   *\n   * Example:\n   * const threeOrbitsArr = tle.getGroundTrackLatLng(tleStr);\n   * ->\n   * [\n   *   // previous orbit\n   *   [\n   *     [ 45.85524291891481, -179.93297540317567 ],\n   *     ...\n   *   ],\n   *\n   *   // current orbit\n   *   [\n   *     [ 51.26165992503701, -179.9398612198045 ],\n   *     ...\n   *   ],\n   *\n   *   // next orbit\n   *   [\n   *     [ 51.0273714070371, -179.9190165549038 ],\n   *     ...\n   *   ]\n   * ]\n   */\n  getGroundTrackLatLng(tle, stepMS, optionalTimeMS) {\n    const fnName = 'getGroundTrackLatLng';\n\n    const timeMS = optionalTimeMS || Date.now();\n    const timeS = (timeMS / 1000).toFixed();\n\n    const parsedTLE = this.parseTLE(tle);\n    const tleStrTrimmed = parsedTLE.arr[1].substr(0, 30);\n\n    const orbitTimeMS = this.getOrbitTimeMS(tle);\n    const curOrbitStartMS = this.getLastAntemeridianCrossingTimeMS(parsedTLE, timeMS);\n\n    const foundCrossing = curOrbitStartMS !== -1;\n\n    let cacheKey;\n    if (foundCrossing) {\n      const curOrbitStartS = (curOrbitStartMS / 1000).toFixed();\n\n      // Check for memoized values.\n      cacheKey = `${fnName}-${tleStrTrimmed}-${stepMS}-${curOrbitStartS}`;\n      if (this.cache[cacheKey]) return this.cache[cacheKey];\n    } else {\n      // Geosync or unusual orbit.\n\n      cacheKey = `${fnName}-${tleStrTrimmed}-${stepMS}-${timeS}`;\n      if (this.cache[cacheKey]) return this.cache[cacheKey];\n\n      this.cache[cacheKey] = [\n        this.getOrbitTrack(parsedTLE.arr, timeMS, 600000, 86400000)\n      ];\n\n      return this.cache[cacheKey];\n    }\n\n    const lastOrbitStartMS = this.getLastAntemeridianCrossingTimeMS(tle, curOrbitStartMS - 10000);\n    const nextOrbitStartMS = this.getLastAntemeridianCrossingTimeMS(\n        tle, curOrbitStartMS + orbitTimeMS + (1000 * 60 * 30));\n\n    const orbitStartTimes = [\n      lastOrbitStartMS,\n      curOrbitStartMS,\n      nextOrbitStartMS\n    ];\n\n    const orbitLatLons = orbitStartTimes.map(\n      orbitStartMS => this.getOrbitTrack(parsedTLE.arr, orbitStartMS, stepMS, false)\n    );\n\n    this.cache[cacheKey] = orbitLatLons;\n\n    return orbitLatLons;\n  }\n\n  /**\n   * Generates an array of lat/lng pairs representing a ground track (orbit track), starting\n   * from startTimeMS and continuing until crossing the antemeridian, which is considered the end\n   * of the orbit for convenience.\n   */\n  getOrbitTrack(TLEArr, startTimeMS, stepMS, maxTimeMS = 6000000) {\n    const fnName = 'getOrbitTrack';\n\n    if (!startTimeMS) return [];\n\n    // Memoization.\n    const tleStr = TLEArr.join('');\n    const tleStrTrimmed = tleStr.substr(0, 30);\n    const startTime = (startTimeMS / 10000).toFixed();\n    const cacheKey = `${fnName}-${tleStrTrimmed}-${startTime}-${stepMS}`;\n    if (this.cache[cacheKey]) return this.cache[cacheKey];\n\n    // default to 1 minute intervals\n    const defaultStepMS = 1000 * 60 * 1;\n    let stepMSCopy = stepMS || defaultStepMS;\n\n    const latLons = [];\n    let curTimeMS = startTimeMS;\n    let lastLatLon = [];\n    let curLatLon = [];\n    let isDone = false;\n    let doesCrossAntemeridian = false;\n    while (!isDone) {\n      curLatLon = this.getLatLonArr(TLEArr, curTimeMS);\n\n      doesCrossAntemeridian = _crossesAntemeridian(lastLatLon[1], curLatLon[1]);\n      if (doesCrossAntemeridian) {\n        if (stepMSCopy === 500) isDone = true;\n\n        // Go back a bit.\n        curTimeMS -= stepMSCopy;\n        stepMSCopy = 500;\n      } else {\n        latLons.push(curLatLon);\n        curTimeMS += stepMSCopy;\n        lastLatLon = curLatLon;\n      }\n\n      if (maxTimeMS && (curTimeMS - startTimeMS > maxTimeMS)) isDone = true;\n    }\n\n    this.cache[cacheKey] = latLons;\n\n    return latLons;\n  }\n\n  /**\n   * Determes the compass bearing from the perspective of the satellite.  Useful for 3D / pitched\n   * map perspectives.\n   *\n   * TODO: a bit buggy at extreme parts of orbits, where latitude hardly changes.\n   */\n  getSatBearing(tle, customTimeMS) {\n    const parsedTLE = this.parseTLE(tle);\n\n    const timeMS = customTimeMS || Date.now();\n\n    const latLon1 = this.getLatLonArr(parsedTLE.arr, timeMS);\n    const latLon2 = this.getLatLonArr(parsedTLE.arr, timeMS + 10000);\n\n    const doesCrossAntemeridian = _crossesAntemeridian(latLon1[1], latLon2[1]);\n\n    if (doesCrossAntemeridian) {\n      // TODO: fix\n      return {};\n      // return this.getSatBearing(tle, customTimeMS + 10000);\n    }\n\n    const lat1 = _degreesToRadians(latLon1[0]);\n    const lat2 = _degreesToRadians(latLon2[0]);\n    const lon1 = _degreesToRadians(latLon1[1]);\n    const lon2 = _degreesToRadians(latLon2[1]);\n\n    const NS = (lat1 >= lat2) ? 'S' : 'N';\n    const EW = (lon1 >= lon2) ? 'W' : 'E';\n\n    const y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n    const x = (Math.cos(lat1) * Math.sin(lat2)) -\n              (Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1));\n    const degrees = _radiansToDegrees(Math.atan2(y, x));\n\n    return {\n      degrees,\n      compass: `${NS}${EW}`\n    };\n  }\n\n  /**\n   * Determines a set of three orbit ground tracks.  Similar to getGroundTrackLatLng, except\n   * points are returned in reversed order ([longitude, latitude]), which is handy for GeoJSON.\n   */\n  getGroundTrackLngLat(tle, stepMS, optionalTimeMS) {\n    const latLngArr = this.getGroundTrackLatLng(tle, stepMS, optionalTimeMS);\n    const lngLatArr = latLngArr.map(line => line.map(latLng => [latLng[1], latLng[0]]));\n\n    return lngLatArr;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //Allow using this built library as an AMD module\n        //in another project. That other project will only\n        //see this AMD call, not the internal modules in\n        //the closure below.\n        define([], factory);\n    } else {\n        //Browser globals case. Just assign the\n        //result to a property on the global.\n        root.satellite = factory();\n    }\n}(this, function () {/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"almond\", function(){});\n\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('constants',[], function() {\n    'use strict';\n\n    var pi = Math.PI,\n        mu = 398600.5,                  // in km3 / s2\n        earthRadius =  6378.137,        // in km\n        xke = 60.0 / Math.sqrt(earthRadius * earthRadius * earthRadius / mu),\n        j2 = 0.00108262998905,\n        j3 = -0.00000253215306;\n\n    return {\n        pi: pi,\n        twoPi: pi * 2,\n        deg2rad: pi / 180.0,\n        rad2deg: 180 / pi,\n        minutesPerDay: 1440.0,\n        mu: mu,\n        earthRadius: earthRadius,\n        xke: xke,\n        tumin: 1.0 / xke,\n        j2: j2,\n        j3: j3,\n        j4: -0.00000161098761,\n        j3oj2: j3 / j2,\n        x2o3: 2.0 / 3.0\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/degrees-lat',[\n    '../constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(radians) {\n        if (radians > constants.pi/2 || radians < (-constants.pi/2)){\n            return 'Err';\n        }\n        var degrees = (radians/constants.pi*180);\n        if (degrees < 0){\n            degrees = degrees;\n        }\n        else{\n            degrees = degrees;\n        }\n        return degrees;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/degrees-long',[\n    '../constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function (radians) {\n        var degrees = (radians/constants.pi*180) % (360);\n        if (degrees > 180){\n            degrees = 360 - degrees;\n        }\n        else if (degrees < -180){\n            degrees = 360 + degrees;\n        }\n        return degrees;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/ecf-to-eci',[], function() {\n    'use strict';\n\n    return function ecfToEci (ecfCoords, gmst){\n        // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n        //\n        // [X]     [C -S  0][X]\n        // [Y]  =  [S  C  0][Y]\n        // [Z]eci  [0  0  1][Z]ecf\n        //\n        var X = (ecfCoords.x * Math.cos(gmst))    - (ecfCoords.y * Math.sin(gmst));\n        var Y = (ecfCoords.x * (Math.sin(gmst)))  + (ecfCoords.y * Math.cos(gmst));\n        var Z =  ecfCoords.z;\n        return { x : X, y : Y, z : Z };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/geodetic-to-ecf',[], function() {\n    'use strict';\n\n    return function (geodeticCoords) {\n        var longitude   = geodeticCoords.longitude;\n        var latitude    = geodeticCoords.latitude;\n        var height      = geodeticCoords.height;\n        var a           = 6378.137;\n        var b           = 6356.7523142;\n        var f           = (a - b)/a;\n        var e2          = ((2*f) - (f*f));\n        var normal      = a / Math.sqrt( 1 - (e2*(Math.sin(latitude)*Math.sin(latitude))));\n\n        var X           = (normal + height) * Math.cos (latitude) * Math.cos (longitude);\n        var Y           = (normal + height) * Math.cos (latitude) * Math.sin (longitude);\n        var Z           = ((normal*(1-e2)) + height) * Math.sin (latitude);\n        return { x : X, y : Y, z : Z };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/topocentric',[\n    './geodetic-to-ecf'\n], function(\n    geodeticToEcf\n) {\n    'use strict';\n\n    return function(observerCoords, satelliteCoords) {\n        // http://www.celestrak.com/columns/v02n02/\n        // TS Kelso's method, except I'm using ECF frame\n        // and he uses ECI.\n\n        var longitude   = observerCoords.longitude;\n        var latitude    = observerCoords.latitude;\n\n        // TODO: defined but never used\n        //var height      = observerCoords.height;\n\n        var observerEcf = geodeticToEcf (observerCoords);\n\n        var rx      = satelliteCoords.x - observerEcf.x;\n        var ry      = satelliteCoords.y - observerEcf.y;\n        var rz      = satelliteCoords.z - observerEcf.z;\n\n        var topS   = ( (Math.sin(latitude) * Math.cos(longitude) * rx) +\n        (Math.sin(latitude) * Math.sin(longitude) * ry) -\n        (Math.cos(latitude) * rz));\n        var topE   = ( -Math.sin(longitude) * rx) + (Math.cos(longitude) * ry);\n        var topZ   = ( (Math.cos(latitude)*Math.cos(longitude)*rx) +\n        (Math.cos(latitude)*Math.sin(longitude)*ry) +\n        (Math.sin(latitude)*rz));\n        return { topS : topS, topE : topE, topZ : topZ };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/topocentric-to-look-angles',[\n    '../constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    /**\n     * @param {Object} topocentric\n     * @param {Number} topocentric.topS Positive horizontal vector S due south.\n     * @param {Number} topocentric.topE Positive horizontal vector E due east.\n     * @param {Number} topocentric.topZ Vector Z normal to the surface of the earth (up).\n     * @returns {Object}\n     */\n    return function(topocentric) {\n        var topS = topocentric.topS;\n        var topE = topocentric.topE;\n        var topZ = topocentric.topZ;\n        var rangeSat    = Math.sqrt((topS*topS) + (topE*topE) + (topZ*topZ));\n        var El      = Math.asin (topZ/rangeSat);\n        var Az      = Math.atan2 (-topE, topS) + constants.pi;\n\n        return {\n            azimuth : Az,\n            elevation : El,\n            rangeSat : rangeSat  // Range in km.\n        };\n    };\n});\n\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/ecf-to-look-angles',[\n    './topocentric',\n    './topocentric-to-look-angles'\n], function(\n    topocentric,\n    topocentricToLookAngles\n) {\n    'use strict';\n\n    return function (observerCoordsEcf, satelliteCoordsEcf) {\n        var topocentricCoords = topocentric(observerCoordsEcf, satelliteCoordsEcf);\n        return topocentricToLookAngles(topocentricCoords);\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/eci-to-ecf',[], function() {\n    'use strict';\n\n    return function(eciCoords, gmst){\n        // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n        //\n        // [X]     [C -S  0][X]\n        // [Y]  =  [S  C  0][Y]\n        // [Z]eci  [0  0  1][Z]ecf\n        //\n        //\n        // Inverse:\n        // [X]     [C  S  0][X]\n        // [Y]  =  [-S C  0][Y]\n        // [Z]ecf  [0  0  1][Z]eci\n\n        var X = (eciCoords.x * Math.cos(gmst))    + (eciCoords.y * Math.sin(gmst));\n        var Y = (eciCoords.x * (-Math.sin(gmst))) + (eciCoords.y * Math.cos(gmst));\n        var Z =  eciCoords.z;\n        return { x : X, y : Y, z : Z };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('coordinate-transforms/eci-to-geodetic',[], function() {\n    'use strict';\n\n    return function (eciCoords, gmst) {\n        // http://www.celestrak.com/columns/v02n03/\n        var a   = 6378.137;\n        var b   = 6356.7523142;\n        var R   = Math.sqrt( (eciCoords.x * eciCoords.x) + (eciCoords.y * eciCoords.y) );\n        var f   = (a - b)/a;\n        var e2  = ((2*f) - (f*f));\n        var longitude = Math.atan2(eciCoords.y, eciCoords.x) - gmst;\n        var kmax = 20;\n        var k = 0;\n        var latitude = Math.atan2(eciCoords.z,\n            Math.sqrt(eciCoords.x * eciCoords.x +\n            eciCoords.y * eciCoords.y));\n        var C;\n        while (k < kmax){\n            C = 1 / Math.sqrt( 1 - e2*(Math.sin(latitude)*Math.sin(latitude)) );\n            latitude = Math.atan2 (eciCoords.z + (a*C*e2*Math.sin(latitude)), R);\n            k += 1;\n        }\n        var height = (R/Math.cos(latitude)) - (a*C);\n        return { longitude : longitude, latitude : latitude, height : height };\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('doppler-factor',[], function() {\n    'use strict';\n\n    return function (myLocation, position, velocity) {\n        var currentRange = Math.sqrt(\n            Math.pow(position.x - myLocation.x, 2) +\n            Math.pow(position.y - myLocation.y, 2) +\n            Math.pow(position.z - myLocation.z, 2));\n        var nextPos   = {\n            x : position.x + velocity.x,\n            y : position.y + velocity.y,\n            z : position.z + velocity.z\n        };\n        var nextRange =  Math.sqrt(\n            Math.pow(nextPos.x - myLocation.x, 2) +\n            Math.pow(nextPos.y - myLocation.y, 2) +\n            Math.pow(nextPos.z - myLocation.z, 2));\n        var rangeRate =  nextRange - currentRange;\n\n        function sign(value) {\n            return value >= 0 ? 1 : -1;\n        }\n\n        rangeRate *= sign(rangeRate);\n        var c = 299792.458; // Speed of light in km/s\n        var factor = (1 + rangeRate/c);\n        return factor;\n    };\n});\ndefine('gstime/days2mdhms',[], function() {\n    'use strict';\n\n    return function(year, days){\n        /* -----------------------------------------------------------------------------\n         *\n         *                           procedure days2mdhms\n         *\n         *  this procedure converts the day of the year, days, to the equivalent month\n         *    day, hour, minute and second.\n         *\n         *  algorithm     : set up array for the number of days per month\n         *                  find leap year - use 1900 because 2000 is a leap year\n         *                  loop through a temp value while the value is < the days\n         *                  perform int conversions to the correct day and month\n         *                  convert remainder into h m s using type conversions\n         *\n         *  author        : david vallado                  719-573-2600    1 mar 2001\n         *\n         *  inputs          description                    range / units\n         *    year        - year                           1900 .. 2100\n         *    days        - julian day of the year         0.0  .. 366.0\n         *\n         *  outputs       :\n         *    mon         - month                          1 .. 12\n         *    day         - day                            1 .. 28,29,30,31\n         *    hr          - hour                           0 .. 23\n         *    min         - minute                         0 .. 59\n         *    sec         - second                         0.0 .. 59.999\n         *\n         *  locals        :\n         *    dayofyr     - day of year\n         *    temp        - temporary extended values\n         *    inttemp     - temporary int value\n         *    i           - index\n         *    lmonth[12]  - int array containing the number of days per month\n         *\n         *  coupling      :\n         *    none.\n         * --------------------------------------------------------------------------- */\n\n        var lmonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        var dayofyr = Math.floor(days);\n        //  ----------------- find month and day of month ----------------\n        if ((year % 4) === 0){\n            lmonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n        }\n\n        var i = 1;\n        var inttemp = 0;\n        while ((dayofyr > (inttemp + lmonth[i-1])) && i < 12) {\n            inttemp = inttemp + lmonth[i-1];\n            i += 1;\n        }\n        var mon = i;\n        var day = dayofyr - inttemp;\n\n        //  ----------------- find hours minutes and seconds -------------\n        var temp = (days - dayofyr) * 24.0;\n        var hr   = Math.floor(temp);\n        temp = (temp - hr) * 60.0;\n        var minute  = Math.floor(temp);\n        var sec  = (temp - minute) * 60.0;\n\n        var mdhmsResult = {\n            mon : mon,\n            day : day,\n            hr : hr,\n            minute : minute,\n            sec : sec\n        };\n\n        return mdhmsResult;\n    };\n});\ndefine('gstime/gstime',[\n    '../constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(jdut1) {\n        /* -----------------------------------------------------------------------------\n         *\n         *                           function gstime\n         *\n         *  this function finds the greenwich sidereal time.\n         *\n         *  author        : david vallado                  719-573-2600    1 mar 2001\n         *\n         *  inputs          description                    range / units\n         *    jdut1       - julian date in ut1             days from 4713 bc\n         *\n         *  outputs       :\n         *    gstime      - greenwich sidereal time        0 to 2pi rad\n         *\n         *  locals        :\n         *    temp        - temporary variable for doubles   rad\n         *    tut1        - julian centuries from the\n         *                  jan 1, 2000 12 h epoch (ut1)\n         *\n         *  coupling      :\n         *    none\n         *\n         *  references    :\n         *    vallado       2004, 191, eq 3-45\n         * --------------------------------------------------------------------------- */\n\n        var tut1 = (jdut1 - 2451545.0) / 36525.0;\n        var temp = -6.2e-6* tut1 * tut1 * tut1 + 0.093104 * tut1 * tut1 +\n            (876600.0*3600 + 8640184.812866) * tut1 + 67310.54841;  //#  sec\n        temp = (temp * constants.deg2rad / 240.0) % constants.twoPi; // 360/86400 = 1/240, to deg, to rad\n\n        //  ------------------------ check quadrants ---------------------\n        if (temp < 0.0){\n            temp += constants.twoPi;\n        }\n        return temp;\n    };\n});\ndefine('gstime/jday',[], function() {\n    'use strict';\n\n    return function(year, mon, day, hr, minute, sec) {\n        if (year instanceof Date) {\n            var date = year;\n            year = date.getUTCFullYear();\n            mon = date.getUTCMonth() + 1;   // Note, this function requires months in range 1-12.\n            day = date.getUTCDate();\n            hr = date.getUTCHours();\n            minute = date.getUTCMinutes();\n            sec = date.getUTCSeconds();\n        }\n\n        return (367.0 * year -\n        Math.floor((7 * (year + Math.floor((mon + 9) / 12.0))) * 0.25) +\n        Math.floor( 275 * mon / 9.0 ) +\n        day + 1721013.5 +\n        ((sec / 60.0 + minute) / 60.0 + hr) / 24.0  //  ut in days\n            //#  - 0.5*sgn(100.0*year + mon - 190002.5) + 0.5;\n        );\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('dpper',[\n    './constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(satrec, dpperParameters) {\n        /* -----------------------------------------------------------------------------\n         *\n         *                           procedure dpper\n         *\n         *  this procedure provides deep space long period periodic contributions\n         *    to the mean elements.  by design, these periodics are zero at epoch.\n         *    this used to be dscom which included initialization, but it's really a\n         *    recurring function.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    e3          -\n         *    ee2         -\n         *    peo         -\n         *    pgho        -\n         *    pho         -\n         *    pinco       -\n         *    plo         -\n         *    se2 , se3 , sgh2, sgh3, sgh4, sh2, sh3, si2, si3, sl2, sl3, sl4 -\n         *    t           -\n         *    xh2, xh3, xi2, xi3, xl2, xl3, xl4 -\n         *    zmol        -\n         *    zmos        -\n         *    ep          - eccentricity                           0.0 - 1.0\n         *    inclo       - inclination - needed for lyddane modification\n         *    nodep       - right ascension of ascending node\n         *    argpp       - argument of perigee\n         *    mp          - mean anomaly\n         *\n         *  outputs       :\n         *    ep          - eccentricity                           0.0 - 1.0\n         *    inclp       - inclination\n         *    nodep        - right ascension of ascending node\n         *    argpp       - argument of perigee\n         *    mp          - mean anomaly\n         *\n         *  locals        :\n         *    alfdp       -\n         *    betdp       -\n         *    cosip  , sinip  , cosop  , sinop  ,\n         *    dalf        -\n         *    dbet        -\n         *    dls         -\n         *    f2, f3      -\n         *    pe          -\n         *    pgh         -\n         *    ph          -\n         *    pinc        -\n         *    pl          -\n         *    sel   , ses   , sghl  , sghs  , shl   , shs   , sil   , sinzf , sis   ,\n         *    sll   , sls\n         *    xls         -\n         *    xnoh        -\n         *    zf          -\n         *    zm          -\n         *\n         *  coupling      :\n         *    none.\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        // TODO: defined but never used\n        //var inclo   = dpperParameters.inclo;\n\n        var init    = dpperParameters.init,\n            ep      = dpperParameters.ep,\n            inclp   = dpperParameters.inclp,\n            nodep   = dpperParameters.nodep,\n            argpp   = dpperParameters.argpp,\n            mp      = dpperParameters.mp,\n            opsmode = dpperParameters.opsmode;\n\n\n        // Copy satellite attributes into local variables for convenience\n        // and symmetry in writing formulae.\n\n        var alfdp, betdp,\n            cosip, sinip, cosop, sinop,\n            dalf, dbet, dls,\n            f2, f3,\n            pe, pgh, ph, pinc, pl,\n            sel, ses, sghl, sghs, shs, sil, sinzf, sis,  sll, sls,\n            xls, xnoh, zf, zm, shll;\n\n        // TODO: defined but never used\n        //var shl;\n\n        var e3      = satrec.e3;\n        var ee2     = satrec.ee2;\n        var peo     = satrec.peo;\n        var pgho    = satrec.pgho;\n        var pho     = satrec.pho;\n        var pinco   = satrec.pinco;\n        var plo     = satrec.plo;\n        var se2     = satrec.se2;\n        var se3     = satrec.se3;\n        var sgh2    = satrec.sgh2;\n        var sgh3    = satrec.sgh3;\n        var sgh4    = satrec.sgh4;\n        var sh2     = satrec.sh2;\n        var sh3     = satrec.sh3;\n        var si2     = satrec.si2;\n        var si3     = satrec.si3;\n        var sl2     = satrec.sl2;\n        var sl3     = satrec.sl3;\n        var sl4     = satrec.sl4;\n        var t       = satrec.t;\n        var xgh2    = satrec.xgh2;\n        var xgh3    = satrec.xgh3;\n        var xgh4    = satrec.xgh4;\n        var xh2     = satrec.xh2;\n        var xh3     = satrec.xh3;\n        var xi2     = satrec.xi2;\n        var xi3     = satrec.xi3;\n        var xl2     = satrec.xl2;\n        var xl3     = satrec.xl3;\n        var xl4     = satrec.xl4;\n        var zmol    = satrec.zmol;\n        var zmos    = satrec.zmos;\n\n        //  ---------------------- constants -----------------------------\n        var zns     = 1.19459e-5;\n        var zes     = 0.01675;\n        var znl     = 1.5835218e-4;\n        var zel     = 0.05490;\n\n        //  --------------- calculate time varying periodics -----------\n        zm      = zmos + zns * t;\n        // be sure that the initial call has time set to zero\n        if (init === 'y') {\n            zm      = zmos;\n        }\n        zf      = zm    + 2.0   * zes   * Math.sin(zm);\n        sinzf   = Math.sin(zf);\n        f2      =  0.5  * sinzf * sinzf - 0.25;\n        f3      = -0.5  * sinzf * Math.cos(zf);\n        ses     = se2   * f2    + se3   * f3;\n        sis     = si2   * f2    + si3   * f3;\n        sls     = sl2   * f2    + sl3   * f3    + sl4   * sinzf;\n        sghs    = sgh2  * f2    + sgh3  * f3    + sgh4  * sinzf;\n        shs     = sh2   * f2    + sh3   * f3;\n        zm          = zmol  + znl   * t;\n        if (init === 'y') {\n            zm      = zmol;\n        }\n\n        zf          = zm    + 2.0   * zel   * Math.sin(zm);\n        sinzf       = Math.sin(zf);\n        f2          =  0.5  * sinzf * sinzf - 0.25;\n        f3          = -0.5  * sinzf * Math.cos(zf);\n        sel     = ee2   * f2    + e3    * f3;\n        sil     = xi2   * f2    + xi3   * f3;\n        sll     = xl2   * f2    + xl3   * f3    + xl4 * sinzf;\n        sghl    = xgh2  * f2    + xgh3  * f3    + xgh4 * sinzf;\n        shll    = xh2   * f2    + xh3   * f3;\n        pe      = ses   + sel;\n        pinc    = sis   + sil;\n        pl      = sls   + sll;\n        pgh     = sghs  + sghl;\n        ph      = shs   + shll;\n\n        if (init === 'n'){\n            pe      = pe    - peo;\n            pinc    = pinc  - pinco;\n            pl      = pl    - plo;\n            pgh     = pgh   - pgho;\n            ph      = ph    - pho;\n            inclp   = inclp + pinc;\n            ep      = ep    + pe;\n            sinip = Math.sin(inclp);\n            cosip = Math.cos(inclp);\n\n            /* ----------------- apply periodics directly ------------ */\n            //  sgp4fix for lyddane choice\n            //  strn3 used original inclination - this is technically feasible\n            //  gsfc used perturbed inclination - also technically feasible\n            //  probably best to readjust the 0.2 limit value and limit discontinuity\n            //  0.2 rad = 11.45916 deg\n            //  use next line for original strn3 approach and original inclination\n            //  if (inclo >= 0.2)\n            //  use next line for gsfc version and perturbed inclination\n            if (inclp >= 0.2) {\n                ph      = ph    / sinip;\n                pgh     = pgh   - cosip     * ph;\n                argpp   = argpp + pgh;\n                nodep   = nodep + ph;\n                mp      = mp    + pl;\n            }\n            else {\n                //  ---- apply periodics with lyddane modification ----\n                sinop   = Math.sin(nodep);\n                cosop   = Math.cos(nodep);\n                alfdp   = sinip * sinop;\n                betdp   = sinip * cosop;\n                dalf    =  ph   * cosop + pinc * cosip * sinop;\n                dbet    = -ph   * sinop + pinc * cosip * cosop;\n                alfdp       = alfdp + dalf;\n                betdp       = betdp + dbet;\n                nodep       = nodep % constants.twoPi;\n                //  sgp4fix for afspc written intrinsic functions\n                //  nodep used without a trigonometric function ahead\n                if (nodep < 0.0 && opsmode === 'a') {\n                    nodep   = nodep + constants.twoPi;\n                }\n                xls     = mp    + argpp + cosip * nodep;\n                dls     = pl    + pgh   - pinc  * nodep * sinip;\n                xls         = xls   + dls;\n                xnoh    = nodep;\n                nodep       = Math.atan2(alfdp, betdp);\n                //  sgp4fix for afspc written intrinsic functions\n                //  nodep used without a trigonometric function ahead\n                if (nodep < 0.0 && opsmode === 'a'){\n                    nodep = nodep + constants.twoPi;\n                }\n                if (Math.abs(xnoh - nodep) > constants.pi) {\n                    if (nodep < xnoh){\n                        nodep = nodep + constants.twoPi;\n                    }\n                    else{\n                        nodep = nodep - constants.twoPi;\n                    }\n                }\n                mp    = mp  + pl;\n                argpp = xls - mp - cosip * nodep;\n            }\n        }\n        var dpperResult = {\n            ep : ep,\n            inclp : inclp,\n            nodep : nodep,\n            argpp : argpp,\n            mp : mp\n        };\n        return dpperResult;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('dspace',[\n    './constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(dspaceParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                           procedure dspace\n         *\n         *  this procedure provides deep space contributions to mean elements for\n         *    perturbing third body.  these effects have been averaged over one\n         *    revolution of the sun and moon.  for earth resonance effects, the\n         *    effects have been averaged over no revolutions of the satellite.\n         *    (mean motion)\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433 -\n         *    dedt        -\n         *    del1, del2, del3  -\n         *    didt        -\n         *    dmdt        -\n         *    dnodt       -\n         *    domdt       -\n         *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n         *    argpo       - argument of perigee\n         *    argpdot     - argument of perigee dot (rate)\n         *    t           - time\n         *    tc          -\n         *    gsto        - gst\n         *    xfact       -\n         *    xlamo       -\n         *    no          - mean motion\n         *    atime       -\n         *    em          - eccentricity\n         *    ft          -\n         *    argpm       - argument of perigee\n         *    inclm       - inclination\n         *    xli         -\n         *    mm          - mean anomaly\n         *    xni         - mean motion\n         *    nodem       - right ascension of ascending node\n         *\n         *  outputs       :\n         *    atime       -\n         *    em          - eccentricity\n         *    argpm       - argument of perigee\n         *    inclm       - inclination\n         *    xli         -\n         *    mm          - mean anomaly\n         *    xni         -\n         *    nodem       - right ascension of ascending node\n         *    dndt        -\n         *    nm          - mean motion\n         *\n         *  locals        :\n         *    delt        -\n         *    ft          -\n         *    theta       -\n         *    x2li        -\n         *    x2omi       -\n         *    xl          -\n         *    xldot       -\n         *    xnddt       -\n         *    xndt        -\n         *    xomi        -\n         *\n         *  coupling      :\n         *    none        -\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var delt,   ft,     theta,  x2li,   x2omi,\n            xl,     xldot,  xnddt,  xndt,   xomi;\n\n        var irez    = dspaceParameters.irez,\n            d2201   = dspaceParameters.d2201,\n            d2211   = dspaceParameters.d2211,\n            d3210   = dspaceParameters.d3210,\n            d3222   = dspaceParameters.d3222,\n            d4410   = dspaceParameters.d4410,\n            d4422   = dspaceParameters.d4422,\n            d5220   = dspaceParameters.d5220,\n            d5232   = dspaceParameters.d5232,\n            d5421   = dspaceParameters.d5421,\n            d5433   = dspaceParameters.d5433,\n            dedt    = dspaceParameters.dedt,\n            del1    = dspaceParameters.del1,\n            del2    = dspaceParameters.del2,\n            del3    = dspaceParameters.del3,\n            didt    = dspaceParameters.didt,\n            dmdt    = dspaceParameters.dmdt,\n            dnodt   = dspaceParameters.dnodt,\n            domdt   = dspaceParameters.domdt,\n            argpo   = dspaceParameters.argpo,\n            argpdot = dspaceParameters.argpdot,\n            t       = dspaceParameters.t,\n            tc      = dspaceParameters.tc,\n            gsto    = dspaceParameters.gsto,\n            xfact   = dspaceParameters.xfact,\n            xlamo   = dspaceParameters.xlamo,\n            no      = dspaceParameters.no,\n            atime   = dspaceParameters.atime,\n            em      = dspaceParameters.em,\n            argpm   = dspaceParameters.argpm,\n            inclm   = dspaceParameters.inclm,\n            xli     = dspaceParameters.xli,\n            mm      = dspaceParameters.mm,\n            xni     = dspaceParameters.xni,\n            nodem   = dspaceParameters.nodem,\n            nm      = dspaceParameters.nm;\n\n\n        var fasx2 = 0.13130908;\n        var fasx4 = 2.8843198;\n        var fasx6 = 0.37448087;\n        var g22   = 5.7686396;\n        var g32   = 0.95240898;\n        var g44   = 1.8014998;\n        var g52   = 1.0508330;\n        var g54   = 4.4108898;\n        var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n        var stepp =    720.0;\n        var stepn =   -720.0;\n        var step2 = 259200.0;\n\n        //  ----------- calculate deep space resonance effects -----------\n        var dndt   = 0.0;\n        theta  = (gsto + tc * rptim) % constants.twoPi;\n        em         = em + dedt * t;\n\n        inclm  = inclm + didt * t;\n        argpm  = argpm + domdt * t;\n        nodem  = nodem + dnodt * t;\n        mm     = mm + dmdt * t;\n\n\n        //   sgp4fix for negative inclinations\n        //   the following if statement should be commented out\n        //  if (inclm < 0.0)\n        // {\n        //    inclm = -inclm;\n        //    argpm = argpm - pi;\n        //    nodem = nodem + pi;\n        //  }\n\n        /* - update resonances : numerical (euler-maclaurin) integration - */\n        /* ------------------------- epoch restart ----------------------  */\n        //   sgp4fix for propagator problems\n        //   the following integration works for negative time steps and periods\n        //   the specific changes are unknown because the original code was so convoluted\n\n        // sgp4fix take out atime = 0.0 and fix for faster operation\n\n        ft    = 0.0;\n        if (irez !== 0){\n            //  sgp4fix streamline check\n            if (atime === 0.0 || t * atime <= 0.0 || Math.abs(t) < Math.abs(atime)){\n                atime  = 0.0;\n                xni    = no;\n                xli    = xlamo;\n            }\n\n            // sgp4fix move check outside loop\n            if (t > 0.0){\n                delt = stepp;\n            }\n            else {\n                delt = stepn;\n            }\n            var iretn = 381; // added for do loop\n            var iret  =   0; // added for loop\n            while (iretn === 381){\n                //  ------------------- dot terms calculated -------------\n                //  ----------- near - synchronous resonance terms -------\n                if (irez !== 2){\n                    xndt  = del1 * Math.sin(xli - fasx2) + del2 * Math.sin(2.0 * (xli - fasx4)) +\n                    del3 * Math.sin(3.0 * (xli - fasx6));\n                    xldot = xni  + xfact;\n                    xnddt = del1 * Math.cos(xli - fasx2) +\n                    2.0 * del2 * Math.cos(2.0 * (xli - fasx4)) +\n                    3.0 * del3 * Math.cos(3.0 * (xli - fasx6));\n                    xnddt = xnddt * xldot;\n                }\n                else{\n                    // --------- near - half-day resonance terms --------\n                    xomi  = argpo + argpdot * atime;\n                    x2omi = xomi + xomi;\n                    x2li  = xli + xli;\n                    xndt  = (d2201 * Math.sin(x2omi + xli  - g22) + d2211 * Math.sin( xli  - g22) +\n                    d3210 * Math.sin(xomi  + xli  - g32) + d3222 * Math.sin(-xomi + xli - g32) +\n                    d4410 * Math.sin(x2omi + x2li - g44) + d4422 * Math.sin( x2li - g44) +\n                    d5220 * Math.sin(xomi  + xli  - g52) + d5232 * Math.sin(-xomi + xli - g52) +\n                    d5421 * Math.sin(xomi  + x2li - g54) + d5433 * Math.sin(-xomi + x2li - g54));\n                    xldot = xni + xfact;\n                    xnddt = (d2201 * Math.cos(x2omi + xli  - g22)   + d2211 * Math.cos(xli - g22) +\n                    d3210 * Math.cos( xomi + xli  - g32)   + d3222 * Math.cos(-xomi + xli - g32) +\n                    d5220 * Math.cos( xomi + xli  - g52)   + d5232 * Math.cos(-xomi + xli - g52) +\n                    2.0 * (d4410 * Math.cos(x2omi + x2li - g44)  +\n                    d4422 * Math.cos( x2li - g44) + d5421  * Math.cos(xomi + x2li - g54) +\n                    d5433 * Math.cos(-xomi + x2li - g54)));\n                    xnddt = xnddt * xldot;\n                }\n                //  ----------------------- integrator -------------------\n                //  sgp4fix move end checks to end of routine\n                if (Math.abs(t - atime) >= stepp){\n                    iret  = 0;\n                    iretn = 381;\n                }\n                else{\n                    ft    = t - atime;\n                    iretn = 0;\n                }\n                if (iretn === 381){\n                    xli   = xli + xldot * delt + xndt * step2;\n                    xni   = xni + xndt * delt + xnddt * step2;\n                    atime = atime + delt;\n                }\n            }\n            nm  = xni + xndt  * ft + xnddt * ft * ft * 0.5;\n            xl  = xli + xldot * ft + xndt  * ft * ft * 0.5;\n            if (irez !== 1){\n                mm   = xl - 2.0 * nodem + 2.0 * theta;\n                dndt = nm - no;\n            }\n            else{\n                mm   = xl - nodem - argpm + theta;\n                dndt = nm - no;\n            }\n            nm = no + dndt;\n        }\n        var dspaceResults = {\n            atime : atime,\n            em : em,\n            argpm : argpm,\n            inclm : inclm,\n            xli : xli,\n            mm : mm,\n            xni : xni,\n            nodem : nodem,\n            dndt : dndt,\n            nm : nm\n        };\n        return dspaceResults;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('sgp4',[\n    './constants',\n    './dpper',\n    './dspace'\n], function(\n    constants,\n    dpper,\n    dspace\n) {\n    'use strict';\n\n    return function (satrec, tsince) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                             procedure sgp4\n         *\n         *  this procedure is the sgp4 prediction model from space command. this is an\n         *    updated and combined version of sgp4 and sdp4, which were originally\n         *    published separately in spacetrack report //3. this version follows the\n         *    methodology from the aiaa paper (2006) describing the history and\n         *    development of the code.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    satrec  - initialised structure from sgp4init() call.\n         *    tsince  - time since epoch (minutes)\n         *\n         *  outputs       :\n         *    r           - position vector                     km\n         *    v           - velocity                            km/sec\n         *  return code - non-zero on error.\n         *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n         *                   2 - mean motion less than 0.0\n         *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n         *                   4 - semi-latus rectum < 0.0\n         *                   5 - epoch elements are sub-orbital\n         *                   6 - satellite has decayed\n         *\n         *  locals        :\n         *    am          -\n         *    axnl, aynl        -\n         *    betal       -\n         *    cosim   , sinim   , cosomm  , sinomm  , cnod    , snod    , cos2u   ,\n         *    sin2u   , coseo1  , sineo1  , cosi    , sini    , cosip   , sinip   ,\n         *    cosisq  , cossu   , sinsu   , cosu    , sinu\n         *    delm        -\n         *    delomg      -\n         *    dndt        -\n         *    eccm        -\n         *    emsq        -\n         *    ecose       -\n         *    el2         -\n         *    eo1         -\n         *    eccp        -\n         *    esine       -\n         *    argpm       -\n         *    argpp       -\n         *    omgadf      -\n         *    pl          -\n         *    r           -\n         *    rtemsq      -\n         *    rdotl       -\n         *    rl          -\n         *    rvdot       -\n         *    rvdotl      -\n         *    su          -\n         *    t2  , t3   , t4    , tc\n         *    tem5, temp , temp1 , temp2  , tempa  , tempe  , templ\n         *    u   , ux   , uy    , uz     , vx     , vy     , vz\n         *    inclm       - inclination\n         *    mm          - mean anomaly\n         *    nm          - mean motion\n         *    nodem       - right asc of ascending node\n         *    xinc        -\n         *    xincp       -\n         *    xl          -\n         *    xlm         -\n         *    mp          -\n         *    xmdf        -\n         *    xmx         -\n         *    xmy         -\n         *    nodedf      -\n         *    xnode       -\n         *    nodep       -\n         *    np          -\n         *\n         *  coupling      :\n         *    getgravconst-\n         *    dpper\n         *    dspace\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report //3 1980\n         *    hoots, norad spacetrack report //6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var am, axnl, aynl, betal,\n            cosim, sinim, cnod, snod, cos2u,\n            sin2u, coseo1, sineo1, cosi, sini, cosip, sinip,\n            cosisq, cossu, sinsu, cosu, sinu,\n            delm, delomg, dndt,\n            emsq, ecose, el2, eo1, esine,\n            argpm, argpp, pl,\n            r, v, rdotl, rl, rvdot, rvdotl, su,\n            t2, t3, t4, tc,\n            tem5, temp, temp1, temp2, tempa, tempe, templ,\n            u, ux, uy, uz, vx, vy, vz,\n            inclm, mm, nm, nodem,\n            xinc, xincp, xl, xlm, mp, xmdf, xmx, xmy,\n            nodedf, xnode, nodep;\n\n        // TODO: defined but never used\n        //var cosomm, sinomm, eccm, eccp, omgadf, rtemsq, np;\n\n        var mrt = 0.0;\n\n        /* ------------------ set mathematical constants --------------- */\n        // sgp4fix divisor for divide by zero check on inclination\n        // the old check used 1.0 + cos(pi-1.0e-9), but then compared it to\n        // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n        var temp4 = 1.5e-12;\n\n        var vkmpersec = constants.earthRadius * constants.xke / 60.0;\n\n        //  --------------------- clear sgp4 error flag -----------------\n        satrec.t = tsince;\n        satrec.error = 0;\n\n        //  ------- update for secular gravity and atmospheric drag -----\n        xmdf = satrec.mo + satrec.mdot * satrec.t;\n        var argpdf = satrec.argpo + satrec.argpdot * satrec.t;\n        nodedf = satrec.nodeo + satrec.nodedot * satrec.t;\n        argpm = argpdf;\n        mm = xmdf;\n        t2 = satrec.t * satrec.t;\n        nodem = nodedf + satrec.nodecf * t2;\n        tempa = 1.0 - satrec.cc1 * satrec.t;\n        tempe = satrec.bstar * satrec.cc4 * satrec.t;\n        templ = satrec.t2cof * t2;\n\n        if (satrec.isimp !== 1) {\n            delomg = satrec.omgcof * satrec.t;\n            //  sgp4fix use mutliply for speed instead of pow\n            var delmtemp = 1.0 + satrec.eta * Math.cos(xmdf);\n            delm = satrec.xmcof *\n            (delmtemp * delmtemp * delmtemp -\n            satrec.delmo);\n            temp = delomg + delm;\n            mm = xmdf + temp;\n            argpm = argpdf - temp;\n            t3 = t2 * satrec.t;\n            t4 = t3 * satrec.t;\n            tempa = tempa - satrec.d2 * t2 - satrec.d3 * t3 -\n            satrec.d4 * t4;\n            tempe = tempe + satrec.bstar * satrec.cc5 * (Math.sin(mm) -\n            satrec.sinmao);\n            templ = templ + satrec.t3cof * t3 + t4 * (satrec.t4cof +\n            satrec.t * satrec.t5cof);\n        }\n        nm = satrec.no;\n        var em = satrec.ecco;\n        inclm = satrec.inclo;\n        if (satrec.method === 'd') {\n            tc = satrec.t;\n\n            var dspaceParameters = {\n                irez: satrec.irez,\n                d2201: satrec.d2201,\n                d2211: satrec.d2211,\n                d3210: satrec.d3210,\n                d3222: satrec.d3222,\n                d4410: satrec.d4410,\n                d4422: satrec.d4422,\n                d5220: satrec.d5220,\n                d5232: satrec.d5232,\n                d5421: satrec.d5421,\n                d5433: satrec.d5433,\n                dedt: satrec.dedt,\n                del1: satrec.del1,\n                del2: satrec.del2,\n                del3: satrec.del3,\n                didt: satrec.didt,\n                dmdt: satrec.dmdt,\n                dnodt: satrec.dnodt,\n                domdt: satrec.domdt,\n                argpo: satrec.argpo,\n                argpdot: satrec.argpdot,\n                t: satrec.t,\n                tc: tc,\n                gsto: satrec.gsto,\n                xfact: satrec.xfact,\n                xlamo: satrec.xlamo,\n                no: satrec.no,\n                atime: satrec.atime,\n                em: em,\n                argpm: argpm,\n                inclm: inclm,\n                xli: satrec.xli,\n                mm: mm,\n                xni: satrec.xni,\n                nodem: nodem,\n                nm: nm\n            };\n\n            var dspaceResult = dspace(dspaceParameters);\n\n            // TODO: defined but never used\n            //var atime = dspaceResult.atime;\n\n            em = dspaceResult.em;\n            argpm = dspaceResult.argpm;\n            inclm = dspaceResult.inclm;\n\n            // TODO: defined but never used\n            //var xli = dspaceResult.xli;\n\n            mm = dspaceResult.mm;\n\n            // TODO: defined but never used\n            //var xni = dspaceResult.xni;\n\n            nodem = dspaceResult.nodem;\n            dndt = dspaceResult.dndt;\n            nm = dspaceResult.nm;\n        }\n\n        if (nm <= 0.0) {\n            //  printf(\"// error nm %f\\n\", nm);\n            satrec.error = 2;\n            //  sgp4fix add return\n            return [false, false];\n        }\n        am = Math.pow((constants.xke / nm), constants.x2o3) * tempa * tempa;\n        nm = constants.xke / Math.pow(am, 1.5);\n        em = em - tempe;\n\n        //  fix tolerance for error recognition\n        //  sgp4fix am is fixed from the previous nm check\n        if (em >= 1.0 || em < -0.001) {  // || (am < 0.95)\n            //  printf(\"// error em %f\\n\", em);\n            satrec.error = 1;\n            //  sgp4fix to return if there is an error in eccentricity\n            return [false, false];\n        }\n        //  sgp4fix fix tolerance to avoid a divide by zero\n        if (em < 1.0e-6) {\n            em = 1.0e-6;\n        }\n        mm = mm + satrec.no * templ;\n        xlm = mm + argpm + nodem;\n        emsq = em * em;\n        temp = 1.0 - emsq;\n\n        nodem = (nodem) % constants.twoPi;\n        argpm = (argpm) % constants.twoPi;\n        xlm = (xlm) % constants.twoPi;\n        mm = (xlm - argpm - nodem) % constants.twoPi;\n\n        //  ----------------- compute extra mean quantities -------------\n        sinim = Math.sin(inclm);\n        cosim = Math.cos(inclm);\n\n        //  -------------------- add lunar-solar periodics --------------\n        var ep = em;\n        xincp = inclm;\n        argpp = argpm;\n        nodep = nodem;\n        mp = mm;\n        sinip = sinim;\n        cosip = cosim;\n        if (satrec.method === 'd') {\n\n            var dpperParameters = {\n                inclo: satrec.inclo,\n                init: 'n',\n                ep: ep,\n                inclp: xincp,\n                nodep: nodep,\n                argpp: argpp,\n                mp: mp,\n                opsmode: satrec.operationmod\n            };\n\n            var dpperResult = dpper(satrec, dpperParameters);\n            ep = dpperResult.ep;\n            xincp = dpperResult.inclp;\n            nodep = dpperResult.nodep;\n            argpp = dpperResult.argpp;\n            mp = dpperResult.mp;\n\n            if (xincp < 0.0) {\n                xincp = -xincp;\n                nodep = nodep + constants.pi;\n                argpp = argpp - constants.pi;\n            }\n            if (ep < 0.0 || ep > 1.0) {\n                //  printf(\"// error ep %f\\n\", ep);\n                satrec.error = 3;\n                //  sgp4fix add return\n                return [false, false];\n            }\n        }\n        //  -------------------- long period periodics ------------------\n        if (satrec.method === 'd') {\n            sinip = Math.sin(xincp);\n            cosip = Math.cos(xincp);\n            satrec.aycof = -0.5 * constants.j3oj2 * sinip;\n            //  sgp4fix for divide by zero for xincp = 180 deg\n            if (Math.abs(cosip + 1.0) > 1.5e-12) {\n                satrec.xlcof = -0.25 * constants.j3oj2 * sinip * (3.0 + 5.0 * cosip) / (1.0 + cosip);\n            }\n            else {\n                satrec.xlcof = -0.25 * constants.j3oj2 * sinip * (3.0 + 5.0 * cosip) / temp4;\n            }\n        }\n        axnl = ep * Math.cos(argpp);\n        temp = 1.0 / (am * (1.0 - ep * ep));\n        aynl = ep * Math.sin(argpp) + temp * satrec.aycof;\n        xl = mp + argpp + nodep + temp * satrec.xlcof * axnl;\n\n        //  --------------------- solve kepler's equation ---------------\n        u = (xl - nodep) % constants.twoPi;\n        eo1 = u;\n        tem5 = 9999.9;\n        var ktr = 1;\n        //    sgp4fix for kepler iteration\n        //    the following iteration needs better limits on corrections\n        while (Math.abs(tem5) >= 1.0e-12 && ktr <= 10) {\n            sineo1 = Math.sin(eo1);\n            coseo1 = Math.cos(eo1);\n            tem5 = 1.0 - coseo1 * axnl - sineo1 * aynl;\n            tem5 = (u - aynl * coseo1 + axnl * sineo1 - eo1) / tem5;\n            if (Math.abs(tem5) >= 0.95) {\n                if (tem5 > 0.0) {\n                    tem5 = 0.95;\n                }\n                else {\n                    tem5 = -0.95;\n                }\n            }\n            eo1 = eo1 + tem5;\n            ktr = ktr + 1;\n        }\n        //  ------------- short period preliminary quantities -----------\n        ecose = axnl * coseo1 + aynl * sineo1;\n        esine = axnl * sineo1 - aynl * coseo1;\n        el2 = axnl * axnl + aynl * aynl;\n        pl = am * (1.0 - el2);\n        if (pl < 0.0) {\n\n            //  printf(\"// error pl %f\\n\", pl);\n            satrec.error = 4;\n            //  sgp4fix add return\n            return [false, false];\n        }\n        else {\n            rl = am * (1.0 - ecose);\n            rdotl = Math.sqrt(am) * esine / rl;\n            rvdotl = Math.sqrt(pl) / rl;\n            betal = Math.sqrt(1.0 - el2);\n            temp = esine / (1.0 + betal);\n            sinu = am / rl * (sineo1 - aynl - axnl * temp);\n            cosu = am / rl * (coseo1 - axnl + aynl * temp);\n            su = Math.atan2(sinu, cosu);\n            sin2u = (cosu + cosu) * sinu;\n            cos2u = 1.0 - 2.0 * sinu * sinu;\n            temp = 1.0 / pl;\n            temp1 = 0.5 * constants.j2 * temp;\n            temp2 = temp1 * temp;\n\n            //  -------------- update for short period periodics ------------\n            if (satrec.method === 'd') {\n                cosisq = cosip * cosip;\n                satrec.con41 = 3.0 * cosisq - 1.0;\n                satrec.x1mth2 = 1.0 - cosisq;\n                satrec.x7thm1 = 7.0 * cosisq - 1.0;\n            }\n            mrt = rl * (1.0 - 1.5 * temp2 * betal * satrec.con41) +\n            0.5 * temp1 * satrec.x1mth2 * cos2u;\n            su = su - 0.25 * temp2 * satrec.x7thm1 * sin2u;\n            xnode = nodep + 1.5 * temp2 * cosip * sin2u;\n            xinc = xincp + 1.5 * temp2 * cosip * sinip * cos2u;\n            var mvt = rdotl - nm * temp1 * satrec.x1mth2 * sin2u / constants.xke;\n            rvdot = rvdotl + nm * temp1 * (satrec.x1mth2 * cos2u +\n            1.5 * satrec.con41) / constants.xke;\n\n            //  --------------------- orientation vectors -------------------\n            sinsu = Math.sin(su);\n            cossu = Math.cos(su);\n            snod = Math.sin(xnode);\n            cnod = Math.cos(xnode);\n            sini = Math.sin(xinc);\n            cosi = Math.cos(xinc);\n            xmx = -snod * cosi;\n            xmy = cnod * cosi;\n            ux = xmx * sinsu + cnod * cossu;\n            uy = xmy * sinsu + snod * cossu;\n            uz = sini * sinsu;\n            vx = xmx * cossu - cnod * sinsu;\n            vy = xmy * cossu - snod * sinsu;\n            vz = sini * cossu;\n\n            //  --------- position and velocity (in km and km/sec) ----------\n            r = {x: 0.0, y: 0.0, z: 0.0};\n            r.x = (mrt * ux) * constants.earthRadius;\n            r.y = (mrt * uy) * constants.earthRadius;\n            r.z = (mrt * uz) * constants.earthRadius;\n            v = {x: 0.0, y: 0.0, z: 0.0};\n            v.x = (mvt * ux + rvdot * vx) * vkmpersec;\n            v.y = (mvt * uy + rvdot * vy) * vkmpersec;\n            v.z = (mvt * uz + rvdot * vz) * vkmpersec;\n        }\n        //  sgp4fix for decaying satellites\n        if (mrt < 1.0) {\n            // printf(\"// decay condition %11.6f \\n\",mrt);\n            satrec.error = 6;\n            return {position: false, velocity: false};\n        }\n        return {position: r, velocity: v};\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('propagate/propagate',[\n    '../constants',\n    '../gstime/jday',\n    '../sgp4'\n], function(\n    constants,\n    jday,\n    sgp4\n) {\n    'use strict';\n\n    return function propagate() {\n        //Return a position and velocity vector for a given date and time.\n        var satrec = arguments[0],\n            date = Array.prototype.slice.call(arguments, 1),\n            j = jday.apply(null, date),\n            m = (j - satrec.jdsatepoch) * constants.minutesPerDay;\n        return sgp4(satrec, m);\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('dscom',[\n    './constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(dscomParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                           procedure dscom\n         *\n         *  this procedure provides deep space common items used by both the secular\n         *    and periodics subroutines.  input is provided as shown. this routine\n         *    used to be called dpper, but the functions inside weren't well organized.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    epoch       -\n         *    ep          - eccentricity\n         *    argpp       - argument of perigee\n         *    tc          -\n         *    inclp       - inclination\n         *    nodep       - right ascension of ascending node\n         *    np          - mean motion\n         *\n         *  outputs       :\n         *    sinim  , cosim  , sinomm , cosomm , snodm  , cnodm\n         *    day         -\n         *    e3          -\n         *    ee2         -\n         *    em          - eccentricity\n         *    emsq        - eccentricity squared\n         *    gam         -\n         *    peo         -\n         *    pgho        -\n         *    pho         -\n         *    pinco       -\n         *    plo         -\n         *    rtemsq      -\n         *    se2, se3         -\n         *    sgh2, sgh3, sgh4        -\n         *    sh2, sh3, si2, si3, sl2, sl3, sl4         -\n         *    s1, s2, s3, s4, s5, s6, s7          -\n         *    ss1, ss2, ss3, ss4, ss5, ss6, ss7, sz1, sz2, sz3         -\n         *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n         *    xgh2, xgh3, xgh4, xh2, xh3, xi2, xi3, xl2, xl3, xl4         -\n         *    nm          - mean motion\n         *    z1, z2, z3, z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n         *    zmol        -\n         *    zmos        -\n         *\n         *  locals        :\n         *    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10         -\n         *    betasq      -\n         *    cc          -\n         *    ctem, stem        -\n         *    x1, x2, x3, x4, x5, x6, x7, x8          -\n         *    xnodce      -\n         *    xnoi        -\n         *    zcosg  , zsing  , zcosgl , zsingl , zcosh  , zsinh  , zcoshl , zsinhl ,\n         *    zcosi  , zsini  , zcosil , zsinil ,\n         *    zx          -\n         *    zy          -\n         *\n         *  coupling      :\n         *    none.\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var epoch   = dscomParameters.epoch,\n            ep      = dscomParameters.ep,\n            argpp   = dscomParameters.argpp,\n            tc      = dscomParameters.tc,\n            inclp   = dscomParameters.inclp,\n            nodep   = dscomParameters.nodep,\n            np      = dscomParameters.np,\n            e3      = dscomParameters.e3,\n            ee2     = dscomParameters.ee2,\n            peo     = dscomParameters.peo,\n            pgho    = dscomParameters.pgho,\n            pho     = dscomParameters.pho,\n            pinco   = dscomParameters.pinco,\n            plo     = dscomParameters.plo,\n            se2     = dscomParameters.se2,\n            se3     = dscomParameters.se3,\n            sgh2    = dscomParameters.sgh2,\n            sgh3    = dscomParameters.sgh3,\n            sgh4    = dscomParameters.sgh4,\n            sh2     = dscomParameters.sh2,\n            sh3     = dscomParameters.sh3,\n            si2     = dscomParameters.si2,\n            si3     = dscomParameters.si3,\n            sl2     = dscomParameters.sl2,\n            sl3     = dscomParameters.sl3,\n            sl4     = dscomParameters.sl4,\n            xgh2    = dscomParameters.xgh2,\n            xgh3    = dscomParameters.xgh3,\n            xgh4    = dscomParameters.xgh4,\n            xh2     = dscomParameters.xh2,\n            xh3     = dscomParameters.xh3,\n            xi2     = dscomParameters.xi2,\n            xi3     = dscomParameters.xi3,\n            xl2     = dscomParameters.xl2,\n            xl3     = dscomParameters.xl3,\n            xl4     = dscomParameters.xl4,\n            zmol    = dscomParameters.zmol,\n            zmos    = dscomParameters.zmos;\n\n\n        var a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,\n            betasq, cc,  ctem, stem,\n            x1, x2, x3, x4, x5, x6, x7, x8,\n            xnodce, xnoi,\n            zcosg, zsing, zcosgl, zsingl,\n            zcosh, zsinh, zcoshl, zsinhl,\n            zcosi, zsini, zcosil, zsinil,\n            zx, zy;\n\n        var ss1,  ss2,  ss3,  ss4,  ss5,  ss6,  ss7,\n            sz1,  sz2,  sz3,\n            sz11, sz12, sz13,\n            sz21, sz22, sz23,\n            sz31, sz32, sz33;\n        var s1, s2, s3, s4, s5, s6, s7;\n        var z1, z2, z3,\n            z11,z12,z13,\n            z21,z22,z23,\n            z31,z32,z33;\n\n        //  -------------------------- constants -------------------------\n        var zes     =  0.01675;\n        var zel     =  0.05490;\n        var c1ss    =  2.9864797e-6;\n        var c1l     =  4.7968065e-7;\n        var zsinis  =  0.39785416;\n        var zcosis  =  0.91744867;\n        var zcosgs  =  0.1945905;\n        var zsings  = -0.98088458;\n        //  --------------------- local variables ------------------------\n        var nm     = np;\n        var em     = ep;\n        var snodm  = Math.sin(nodep);\n        var cnodm  = Math.cos(nodep);\n        var sinomm = Math.sin(argpp);\n        var cosomm = Math.cos(argpp);\n        var sinim  = Math.sin(inclp);\n        var cosim  = Math.cos(inclp);\n        var emsq   = em * em;\n        betasq = 1.0 - emsq;\n        var rtemsq = Math.sqrt(betasq);\n\n        //  ----------------- initialize lunar solar terms ---------------\n        peo        = 0.0;\n        pinco      = 0.0;\n        plo        = 0.0;\n        pgho       = 0.0;\n        pho        = 0.0;\n        var day    = epoch + 18261.5 + tc / 1440.0;\n        xnodce = (4.5236020 - 9.2422029e-4 * day) % constants.twoPi;\n        stem   = Math.sin(xnodce);\n        ctem   = Math.cos(xnodce);\n        zcosil = 0.91375164 - 0.03568096 * ctem;\n        zsinil = Math.sqrt(1.0 - zcosil * zcosil);\n        zsinhl = 0.089683511 * stem / zsinil;\n        zcoshl = Math.sqrt(1.0 - zsinhl * zsinhl);\n        var gam    = 5.8351514 + 0.0019443680 * day;\n        zx     = 0.39785416 * stem / zsinil;\n        zy     = zcoshl * ctem + 0.91744867 * zsinhl * stem;\n        zx         = Math.atan2(zx, zy);\n        zx         = gam + zx - xnodce;\n        zcosgl = Math.cos(zx);\n        zsingl = Math.sin(zx);\n\n        //  ------------------------- do solar terms ---------------------\n        zcosg = zcosgs;\n        zsing = zsings;\n        zcosi = zcosis;\n        zsini = zsinis;\n        zcosh = cnodm;\n        zsinh = snodm;\n        cc    = c1ss;\n        xnoi  = 1.0 / nm;\n\n        var lsflg = 0;\n        while (lsflg < 2) {\n            lsflg += 1;\n            a1     =   zcosg   * zcosh + zsing * zcosi * zsinh;\n            a3     =  -zsing   * zcosh + zcosg * zcosi * zsinh;\n            a7     =  -zcosg   * zsinh + zsing * zcosi * zcosh;\n            a8     =   zsing   * zsini;\n            a9     =   zsing   * zsinh + zcosg * zcosi * zcosh;\n            a10    =   zcosg   * zsini;\n            a2     =   cosim   * a7    + sinim * a8;\n            a4     =   cosim   * a9    + sinim * a10;\n            a5     =  -sinim   * a7    + cosim * a8;\n            a6     =  -sinim   * a9    + cosim * a10;\n\n            x1     =  a1   * cosomm    + a2    * sinomm;\n            x2     =  a3   * cosomm    + a4    * sinomm;\n            x3     = -a1   * sinomm    + a2    * cosomm;\n            x4     = -a3   * sinomm    + a4    * cosomm;\n            x5     =  a5   * sinomm;\n            x6     =  a6   * sinomm;\n            x7     =  a5   * cosomm;\n            x8     =  a6   * cosomm;\n\n            z31    = 12.0  *  x1 * x1 - 3.0 * x3 * x3;\n            z32    = 24.0  *  x1 * x2 - 6.0 * x3 * x4;\n            z33    = 12.0  *  x2 * x2 - 3.0 * x4 * x4;\n            z1     =  3.0  * (a1 * a1 + a2 * a2) + z31 * emsq;\n            z2     =  6.0  * (a1 * a3 + a2 * a4) + z32 * emsq;\n            z3     =  3.0  * (a3 * a3 + a4 * a4) + z33 * emsq;\n            z11    = -6.0  *  a1 * a5 + emsq *\n            (-24.0  *  x1 * x7-6.0  * x3 * x5);\n            z12    = -6.0  * (a1 * a6 + a3 * a5) + emsq *\n            (-24.0  * (x2 * x7 + x1 * x8) +\n            -6.0  * (x3 * x6 + x4 * x5));\n            z13    = -6.0  *  a3 * a6 + emsq *\n            (-24.0  *  x2 * x8 - 6.0 * x4 * x6);\n            z21    =  6.0  *  a2 * a5 + emsq *\n            ( 24.0  *  x1 * x5 - 6.0 * x3 * x7);\n            z22    =  6.0  * (a4 * a5 + a2 * a6) + emsq *\n            ( 24.0  * (x2 * x5 + x1 * x6) -\n            6.0  * (x4 * x7 + x3 * x8));\n            z23    =  6.0  *  a4 * a6 + emsq *\n            ( 24.0  *  x2 * x6 - 6.0 * x4 * x8);\n            z1         =   z1  + z1 + betasq * z31;\n            z2         =   z2  + z2 + betasq * z32;\n            z3         =   z3  + z3 + betasq * z33;\n            s3     =   cc  * xnoi;\n            s2     =  -0.5 * s3 / rtemsq;\n            s4     =   s3  * rtemsq;\n            s1     = -15.0 * em * s4;\n            s5     =   x1  * x3 + x2 * x4;\n            s6     =   x2  * x3 + x1 * x4;\n            s7     =   x2  * x4 - x1 * x3;\n\n            //  ----------------------- do lunar terms -------------------\n            if (lsflg === 1) {\n                ss1    = s1;\n                ss2    = s2;\n                ss3    = s3;\n                ss4    = s4;\n                ss5    = s5;\n                ss6    = s6;\n                ss7    = s7;\n                sz1    = z1;\n                sz2    = z2;\n                sz3    = z3;\n                sz11   = z11;\n                sz12   = z12;\n                sz13   = z13;\n                sz21   = z21;\n                sz22   = z22;\n                sz23   = z23;\n                sz31   = z31;\n                sz32   = z32;\n                sz33   = z33;\n                zcosg      = zcosgl;\n                zsing      = zsingl;\n                zcosi      = zcosil;\n                zsini      = zsinil;\n                zcosh      = zcoshl * cnodm + zsinhl * snodm;\n                zsinh      = snodm * zcoshl - cnodm * zsinhl;\n                cc         = c1l;\n            }\n        }\n        zmol = (4.7199672 + 0.22997150  * day - gam)   % constants.twoPi;\n        zmos = (6.2565837 + 0.017201977 * day)         % constants.twoPi;\n\n        //  ------------------------ do solar terms ----------------------\n        se2  =   2.0 * ss1 * ss6;\n        se3  =   2.0 * ss1 * ss7;\n        si2  =   2.0 * ss2 * sz12;\n        si3  =   2.0 * ss2 * (sz13 - sz11);\n        sl2  =  -2.0 * ss3 * sz2;\n        sl3  =  -2.0 * ss3 * (sz3 - sz1);\n        sl4  =  -2.0 * ss3 * (-21.0 - 9.0 * emsq) * zes;\n        sgh2 =   2.0 * ss4 * sz32;\n        sgh3 =   2.0 * ss4 * (sz33 - sz31);\n        sgh4 = -18.0 * ss4 * zes;\n        sh2  =  -2.0 * ss2 * sz22;\n        sh3  =  -2.0 * ss2 * (sz23 - sz21);\n\n        //  ------------------------ do lunar terms ----------------------\n        ee2  =   2.0 * s1 * s6;\n        e3   =   2.0 * s1 * s7;\n        xi2  =   2.0 * s2 * z12;\n        xi3  =   2.0 * s2 * (z13 - z11);\n        xl2  =  -2.0 * s3 * z2;\n        xl3  =  -2.0 * s3 * (z3 - z1);\n        xl4  =  -2.0 * s3 * (-21.0 - 9.0 * emsq) * zel;\n        xgh2 =   2.0 * s4 * z32;\n        xgh3 =   2.0 * s4 * (z33 - z31);\n        xgh4 = -18.0 * s4 * zel;\n        xh2  =  -2.0 * s2 * z22;\n        xh3  =  -2.0 * s2 * (z23 - z21);\n\n        var dscomResults =  {\n            snodm : snodm,\n            cnodm : cnodm,\n            sinim : sinim,\n            cosim : cosim,\n            sinomm : sinomm,\n\n            cosomm : cosomm,\n            day : day,\n            e3 : e3,\n            ee2 : ee2,\n            em : em,\n\n            emsq : emsq,\n            gam : gam,\n            peo : peo,\n            pgho : pgho,\n            pho : pho,\n\n            pinco : pinco,\n            plo : plo,\n            rtemsq : rtemsq,\n            se2 : se2,\n            se3 : se3,\n\n            sgh2 : sgh2,\n            sgh3 : sgh3,\n            sgh4 : sgh4,\n            sh2 : sh2,\n            sh3 : sh3,\n\n            si2 : si2,\n            si3 : si3,\n            sl2 : sl2,\n            sl3 : sl3,\n            sl4 : sl4,\n\n            s1 : s1,\n            s2 : s2,\n            s3 : s3,\n            s4 : s4,\n            s5 : s5,\n\n            s6 : s6,\n            s7 : s7,\n            ss1 : ss1,\n            ss2 : ss2,\n            ss3 : ss3,\n\n            ss4 : ss4,\n            ss5 : ss5,\n            ss6 : ss6,\n            ss7 : ss7,\n            sz1 : sz1,\n\n            sz2 : sz2,\n            sz3 : sz3,\n            sz11 : sz11,\n            sz12 : sz12,\n            sz13 : sz13,\n\n            sz21 : sz21,\n            sz22 : sz22,\n            sz23 : sz23,\n            sz31 : sz31,\n            sz32 : sz32,\n\n            sz33 : sz33,\n            xgh2 : xgh2,\n            xgh3 : xgh3,\n            xgh4 : xgh4,\n            xh2 : xh2,\n\n            xh3 : xh3,\n            xi2 : xi2,\n            xi3 : xi3,\n            xl2 : xl2,\n            xl3 : xl3,\n\n            xl4 : xl4,\n            nm : nm,\n            z1 : z1,\n            z2 : z2,\n            z3 : z3,\n\n            z11 : z11,\n            z12 : z12,\n            z13 : z13,\n            z21 : z21,\n            z22 : z22,\n\n            z23 : z23,\n            z31 : z31,\n            z32 : z32,\n            z33 : z33,\n            zmol : zmol,\n\n            zmos : zmos\n        };\n        return dscomResults;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('dsinit',[\n    './constants'\n], function(\n    constants\n) {\n    'use strict';\n\n    return function(dsinitParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                           procedure dsinit\n         *\n         *  this procedure provides deep space contributions to mean motion dot due\n         *    to geopotential resonance with half day and one day orbits.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    cosim, sinim-\n         *    emsq        - eccentricity squared\n         *    argpo       - argument of perigee\n         *    s1, s2, s3, s4, s5      -\n         *    ss1, ss2, ss3, ss4, ss5 -\n         *    sz1, sz3, sz11, sz13, sz21, sz23, sz31, sz33 -\n         *    t           - time\n         *    tc          -\n         *    gsto        - greenwich sidereal time                   rad\n         *    mo          - mean anomaly\n         *    mdot        - mean anomaly dot (rate)\n         *    no          - mean motion\n         *    nodeo       - right ascension of ascending node\n         *    nodedot     - right ascension of ascending node dot (rate)\n         *    xpidot      -\n         *    z1, z3, z11, z13, z21, z23, z31, z33 -\n         *    eccm        - eccentricity\n         *    argpm       - argument of perigee\n         *    inclm       - inclination\n         *    mm          - mean anomaly\n         *    xn          - mean motion\n         *    nodem       - right ascension of ascending node\n         *\n         *  outputs       :\n         *    em          - eccentricity\n         *    argpm       - argument of perigee\n         *    inclm       - inclination\n         *    mm          - mean anomaly\n         *    nm          - mean motion\n         *    nodem       - right ascension of ascending node\n         *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n         *    atime       -\n         *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433    -\n         *    dedt        -\n         *    didt        -\n         *    dmdt        -\n         *    dndt        -\n         *    dnodt       -\n         *    domdt       -\n         *    del1, del2, del3        -\n         *    ses  , sghl , sghs , sgs  , shl  , shs  , sis  , sls\n         *    theta       -\n         *    xfact       -\n         *    xlamo       -\n         *    xli         -\n         *    xni\n         *\n         *  locals        :\n         *    ainv2       -\n         *    aonv        -\n         *    cosisq      -\n         *    eoc         -\n         *    f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543  -\n         *    g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533  -\n         *    sini2       -\n         *    temp        -\n         *    temp1       -\n         *    theta       -\n         *    xno2        -\n         *\n         *  coupling      :\n         *    getgravconst\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var cosim   = dsinitParameters.cosim,\n            emsq    = dsinitParameters.emsq,\n            argpo   = dsinitParameters.argpo,\n\n            s1      = dsinitParameters.s1,\n            s2      = dsinitParameters.s2,\n            s3      = dsinitParameters.s3,\n            s4      = dsinitParameters.s4,\n            s5      = dsinitParameters.s5,\n            sinim   = dsinitParameters.sinim,\n\n            ss1     = dsinitParameters.ss1,\n            ss2     = dsinitParameters.ss2,\n            ss3     = dsinitParameters.ss3,\n            ss4     = dsinitParameters.ss4,\n            ss5     = dsinitParameters.ss5,\n\n            sz1     = dsinitParameters.sz1,\n            sz3     = dsinitParameters.sz3,\n            sz11    = dsinitParameters.sz11,\n            sz13    = dsinitParameters.sz13,\n            sz21    = dsinitParameters.sz21,\n            sz23    = dsinitParameters.sz23,\n            sz31    = dsinitParameters.sz31,\n            sz33    = dsinitParameters.sz33,\n\n            t       = dsinitParameters.t,\n            tc      = dsinitParameters.tc,\n            gsto    = dsinitParameters.gsto,\n\n            mo      = dsinitParameters.mo,\n            mdot    = dsinitParameters.mdot,\n            no      = dsinitParameters.no,\n            nodeo   = dsinitParameters.nodeo,\n            nodedot = dsinitParameters.nodedot,\n\n            xpidot  = dsinitParameters.xpidot,\n\n            z1      = dsinitParameters.z1,\n            z3      = dsinitParameters.z3,\n            z11     = dsinitParameters.z11,\n            z13     = dsinitParameters.z13,\n            z21     = dsinitParameters.z21,\n            z23     = dsinitParameters.z23,\n            z31     = dsinitParameters.z31,\n            z33     = dsinitParameters.z33,\n\n            ecco    = dsinitParameters.ecco,\n            eccsq   = dsinitParameters.eccsq,\n            em      = dsinitParameters.em,\n\n            argpm   = dsinitParameters.argpm,\n            inclm   = dsinitParameters.inclm,\n            mm      = dsinitParameters.mm,\n            nm      = dsinitParameters.nm,\n            nodem   = dsinitParameters.nodem,\n            irez    = dsinitParameters.irez,\n            atime   = dsinitParameters.atime,\n\n            d2201   = dsinitParameters.d2201,\n            d2211   = dsinitParameters.d2211,\n            d3210   = dsinitParameters.d3210,\n            d3222   = dsinitParameters.d3222,\n            d4410   = dsinitParameters.d4410,\n            d4422   = dsinitParameters.d4422,\n\n            d5220   = dsinitParameters.d5220,\n            d5232   = dsinitParameters.d5232,\n            d5421   = dsinitParameters.d5421,\n            d5433   = dsinitParameters.d5433,\n\n            dedt    = dsinitParameters.dedt,\n            didt    = dsinitParameters.didt,\n            dmdt    = dsinitParameters.dmdt,\n            dnodt   = dsinitParameters.dnodt,\n            domdt   = dsinitParameters.domdt,\n\n            del1    = dsinitParameters.del1,\n            del2    = dsinitParameters.del2,\n            del3    = dsinitParameters.del3,\n\n            xfact   = dsinitParameters.xfact,\n            xlamo   = dsinitParameters.xlamo,\n            xli     = dsinitParameters.xli,\n            xni     = dsinitParameters.xni;\n\n        var f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543;\n        var g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533;\n        var sini2,  temp,   temp1,    theta,    xno2,\n            ainv2,  aonv,   cosisq, eoc;\n\n        var q22     = 1.7891679e-6;\n        var q31     = 2.1460748e-6;\n        var q33     = 2.2123015e-7;\n        var root22  = 1.7891679e-6;\n        var root44  = 7.3636953e-9;\n        var root54  = 2.1765803e-9;\n        var rptim   = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n        var root32  = 3.7393792e-7;\n        var root52  = 1.1428639e-7;\n        var x2o3    = 2.0 / 3.0;\n        var znl     = 1.5835218e-4;\n        var zns     = 1.19459e-5;\n\n\n        //  -------------------- deep space initialization ------------\n        irez    = 0;\n        if (0.0034906585 < nm < 0.0052359877){\n            irez = 1;\n        }\n        if (8.26e-3 <= nm <= 9.24e-3 && em >= 0.5){\n            irez = 2;\n        }\n\n        //  ------------------------ do solar terms -------------------\n        var ses =  ss1 * zns *  ss5;\n        var sis =  ss2 * zns * (sz11 + sz13);\n        var sls = -zns * ss3 * (sz1  + sz3  - 14.0 - 6.0 * emsq);\n        var sghs=  ss4 * zns * (sz31 + sz33 -  6.0);\n        var shs = -zns * ss2 * (sz21 + sz23);\n\n        //  sgp4fix for 180 deg incl\n        if (inclm < 5.2359877e-2 || inclm > constants.pi - 5.2359877e-2){\n            shs = 0.0;\n        }\n        if (sinim !== 0.0){\n            shs = shs / sinim;\n        }\n        var sgs  = sghs - cosim * shs;\n\n        //  ------------------------- do lunar terms ------------------\n        dedt =  ses + s1  *  znl *  s5;\n        didt =  sis + s2  *  znl * (z11 + z13);\n        dmdt =  sls - znl *  s3  * (z1  + z3 - 14.0 - 6.0 * emsq);\n        var sghl =  s4  * znl * (z31 +  z33 - 6.0);\n        var shll = -znl * s2  * (z21 +  z23);\n        //  sgp4fix for 180 deg incl\n        if ((inclm < 5.2359877e-2) || (inclm > (constants.pi - 5.2359877e-2))){\n            shll = 0.0;\n        }\n        domdt = sgs + sghl;\n        dnodt = shs;\n        if (sinim !== 0.0){\n            domdt = domdt - cosim / sinim * shll;\n            dnodt = dnodt + shll / sinim;\n        }\n\n\n        //  ----------- calculate deep space resonance effects --------\n        var dndt    = 0.0;\n        theta   = (gsto + tc * rptim) % constants.twoPi;\n        em          = em + dedt * t;\n        inclm       = inclm + didt * t;\n        argpm       = argpm + domdt * t;\n        nodem       = nodem + dnodt * t;\n        mm          = mm + dmdt * t;\n\n        //   sgp4fix for negative inclinations\n        //   the following if statement should be commented out\n        //if (inclm < 0.0)\n        //  {\n        //    inclm  = -inclm;\n        //    argpm  = argpm - pi;\n        //    nodem = nodem + pi;\n        //  }\n\n\n        //  -------------- initialize the resonance terms -------------\n        if (irez !== 0) {\n            aonv = Math.pow(nm / constants.xke, x2o3);\n            //  ---------- geopotential resonance for 12 hour orbits ------\n            if (irez === 2) {\n                cosisq = cosim * cosim;\n                var emo= em;\n                em     = ecco;\n                var emsqo  = emsq;\n                emsq   = eccsq;\n                eoc    = em * emsq;\n                g201   = -0.306 - (em - 0.64) * 0.440;\n\n                if (em <= 0.65){\n                    g211 =    3.616  -  13.2470 * em +  16.2900 * emsq;\n                    g310 =  -19.302  + 117.3900 * em - 228.4190 * emsq +  156.5910 * eoc;\n                    g322 =  -18.9068 + 109.7927 * em - 214.6334 * emsq +  146.5816 * eoc;\n                    g410 =  -41.122  + 242.6940 * em - 471.0940 * emsq +  313.9530 * eoc;\n                    g422 = -146.407  + 841.8800 * em - 1629.014 * emsq + 1083.4350 * eoc;\n                    g520 = -532.114  + 3017.977 * em - 5740.032 * emsq + 3708.2760 * eoc;\n                }\n                else {\n                    g211 =   -72.099 +   331.819 * em -   508.738 * emsq +   266.724 * eoc;\n                    g310 =  -346.844 +  1582.851 * em -  2415.925 * emsq +  1246.113 * eoc;\n                    g322 =  -342.585 +  1554.908 * em -  2366.899 * emsq +  1215.972 * eoc;\n                    g410 = -1052.797 +  4758.686 * em -  7193.992 * emsq +  3651.957 * eoc;\n                    g422 = -3581.690 + 16178.110 * em - 24462.770 * emsq + 12422.520 * eoc;\n                    if (em > 0.715) {\n                        g520 =-5149.66 + 29936.92 * em - 54087.36 * emsq + 31324.56 * eoc;\n                    }\n                    else {\n                        g520 = 1464.74 -  4664.75 * em +  3763.64 * emsq;\n                    }\n                }\n                if (em < 0.7) {\n                    g533 = -919.22770 + 4988.6100 * em - 9064.7700 * emsq + 5542.21  * eoc;\n                    g521 = -822.71072 + 4568.6173 * em - 8491.4146 * emsq + 5337.524 * eoc;\n                    g532 = -853.66600 + 4690.2500 * em - 8624.7700 * emsq + 5341.4  * eoc;\n                }\n                else{\n                    g533 =-37995.780 + 161616.52 * em - 229838.20 * emsq + 109377.94 * eoc;\n                    g521 =-51752.104 + 218913.95 * em - 309468.16 * emsq + 146349.42 * eoc;\n                    g532 =-40023.880 + 170470.89 * em - 242699.48 * emsq + 115605.82 * eoc;\n                }\n                sini2 =  sinim * sinim;\n                f220  =  0.75 * (1.0 + 2.0 * cosim+cosisq);\n                f221  =  1.5 * sini2;\n                f321  =  1.875 * sinim  *  (1.0 - 2.0 * cosim - 3.0 * cosisq);\n                f322  = -1.875 * sinim  *  (1.0 + 2.0 * cosim - 3.0 * cosisq);\n                f441  = 35.0 * sini2 * f220;\n                f442  = 39.3750 * sini2 * sini2;\n                f522  =  9.84375 * sinim * (sini2 * (1.0 - 2.0 * cosim- 5.0 * cosisq) +\n                0.33333333 * (-2.0 + 4.0 * cosim + 6.0 * cosisq) );\n                f523  = sinim * (4.92187512 * sini2 * (-2.0 - 4.0 * cosim +\n                10.0 * cosisq) + 6.56250012 * (1.0+2.0 * cosim - 3.0 * cosisq));\n                f542  = 29.53125 * sinim * (2.0 - 8.0 * cosim + cosisq *\n                (-12.0    + 8.0   *  cosim + 10.0 * cosisq));\n                f543  = 29.53125 * sinim * (-2.0 - 8.0   * cosim+cosisq *\n                ( 12.0    + 8.0   * cosim - 10.0  * cosisq));\n\n                xno2  =  nm     * nm;\n                ainv2 =  aonv   * aonv;\n                temp1 =  3.0    * xno2  * ainv2;\n                temp  =  temp1  * root22;\n                d2201 =  temp   * f220  * g201;\n                d2211 =  temp   * f221  * g211;\n                temp1 =  temp1  * aonv;\n                temp  =  temp1  * root32;\n                d3210 =  temp   * f321  * g310;\n                d3222 =  temp   * f322  * g322;\n                temp1 =  temp1  * aonv;\n                temp  =  2.0    * temp1 * root44;\n                d4410 =  temp   * f441  * g410;\n                d4422 =  temp   * f442  * g422;\n                temp1 =  temp1  * aonv;\n                temp  =  temp1  * root52;\n                d5220 =  temp   * f522  * g520;\n                d5232 =  temp   * f523  * g532;\n                temp  =  2.0    * temp1 * root54;\n                d5421 =  temp   * f542  * g521;\n                d5433 =  temp   * f543  * g533;\n                xlamo = (mo     + nodeo + nodeo -  theta    - theta) % constants.twoPi;\n                xfact =  mdot   + dmdt  + 2.0   * (nodedot  + dnodt  - rptim) - no;\n                em    =  emo;\n                emsq  =  emsqo;\n            }\n            //  ---------------- synchronous resonance terms --------------\n            if (irez === 1) {\n                g200  = 1.0 + emsq * (-2.5 + 0.8125 * emsq);\n                g310  = 1.0 + 2.0 * emsq;\n                g300  = 1.0 + emsq * (-6.0 + 6.60937 * emsq);\n                f220  = 0.75 * (1.0 + cosim) * (1.0 + cosim);\n                f311  = 0.9375 * sinim * sinim * (1.0 + 3.0 * cosim) - 0.75 * (1.0 + cosim);\n                f330  = 1.0 + cosim;\n                f330  = 1.875 * f330 * f330 * f330;\n                del1  = 3.0 * nm * nm * aonv * aonv;\n                del2  = 2.0 * del1 * f220 * g200 * q22;\n                del3  = 3.0 * del1 * f330 * g300 * q33 * aonv;\n                del1  = del1 * f311 * g310 * q31 * aonv;\n                xlamo = (mo + nodeo + argpo - theta) % constants.twoPi;\n                xfact = mdot + xpidot - rptim + dmdt + domdt + dnodt - no;\n            }\n            //  ------------ for sgp4, initialize the integrator ----------\n            xli   = xlamo;\n            xni   = no;\n            atime = 0.0;\n            nm    = no + dndt;\n        }\n        var dsinitResults = {\n            em : em,\n            argpm : argpm,\n            inclm : inclm,\n            mm : mm,\n            nm : nm,\n            nodem : nodem,\n\n            irez : irez,\n            atime : atime,\n\n            d2201 : d2201,\n            d2211 : d2211,\n            d3210 : d3210,\n            d3222 : d3222,\n            d4410 : d4410,\n\n            d4422 : d4422,\n            d5220 : d5220,\n            d5232 : d5232,\n            d5421 : d5421,\n            d5433 : d5433,\n\n            dedt : dedt,\n            didt : didt,\n            dmdt : dmdt,\n            dndt : dndt,\n            dnodt : dnodt,\n            domdt : domdt,\n\n            del1 : del1,\n            del2 : del2,\n            del3 : del3,\n\n            xfact : xfact,\n            xlamo : xlamo,\n            xli : xli,\n            xni : xni\n        };\n        return dsinitResults;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('initl',[\n    './constants',\n    './gstime/gstime'\n], function(\n    constants,\n    gstime\n) {\n    'use strict';\n\n    return function (initlParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                           procedure initl\n         *\n         *  this procedure initializes the spg4 propagator. all the initialization is\n         *    consolidated here instead of having multiple loops inside other routines.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    ecco        - eccentricity                           0.0 - 1.0\n         *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n         *    inclo       - inclination of satellite\n         *    no          - mean motion of satellite\n         *    satn        - satellite number\n         *\n         *  outputs       :\n         *    ainv        - 1.0 / a\n         *    ao          - semi major axis\n         *    con41       -\n         *    con42       - 1.0 - 5.0 cos(i)\n         *    cosio       - cosine of inclination\n         *    cosio2      - cosio squared\n         *    eccsq       - eccentricity squared\n         *    method      - flag for deep space                    'd', 'n'\n         *    omeosq      - 1.0 - ecco * ecco\n         *    posq        - semi-parameter squared\n         *    rp          - radius of perigee\n         *    rteosq      - square root of (1.0 - ecco*ecco)\n         *    sinio       - sine of inclination\n         *    gsto        - gst at time of observation               rad\n         *    no          - mean motion of satellite\n         *\n         *  locals        :\n         *    ak          -\n         *    d1          -\n         *    del         -\n         *    adel        -\n         *    po          -\n         *\n         *  coupling      :\n         *    getgravconst\n         *    gstime      - find greenwich sidereal time from the julian date\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        // TODO: defined but never used\n        //var satn = initlParameters.satn;\n\n        var ecco = initlParameters.ecco,\n            epoch = initlParameters.epoch,\n            inclo = initlParameters.inclo,\n            no = initlParameters.no,\n            method = initlParameters.method,\n            opsmode = initlParameters.opsmode;\n\n        var ak, d1, adel, po, gsto;\n\n        // TODO: defined but never used\n        // var del;\n\n        // sgp4fix use old way of finding gst\n        //  ----------------------- earth constants ----------------------\n        //  sgp4fix identify constants and allow alternate values\n\n        //  ------------- calculate auxillary epoch quantities ----------\n        var eccsq = ecco * ecco;\n        var omeosq = 1.0 - eccsq;\n        var rteosq = Math.sqrt(omeosq);\n        var cosio = Math.cos(inclo);\n        var cosio2 = cosio * cosio;\n\n        //  ------------------ un-kozai the mean motion -----------------\n        ak = Math.pow(constants.xke / no, constants.x2o3);\n        d1 = 0.75 * constants.j2 * (3.0 * cosio2 - 1.0) / (rteosq * omeosq);\n        var delPrime = d1 / (ak * ak);\n        adel = ak * (1.0 - delPrime * delPrime - delPrime *\n        (1.0 / 3.0 + 134.0 * delPrime * delPrime / 81.0));\n        delPrime = d1 / (adel * adel);\n        no = no / (1.0 + delPrime);\n\n        var ao = Math.pow(constants.xke / no, constants.x2o3);\n        var sinio = Math.sin(inclo);\n        po = ao * omeosq;\n        var con42 = 1.0 - 5.0 * cosio2;\n        var con41 = -con42 - cosio2 - cosio2;\n        var ainv = 1.0 / ao;\n        var posq = po * po;\n        var rp = ao * (1.0 - ecco);\n        method = 'n';\n\n        //  sgp4fix modern approach to finding sidereal time\n        if (opsmode === 'a') {\n            //  sgp4fix use old way of finding gst\n            //  count integer number of days from 0 jan 1970\n            var ts70 = epoch - 7305.0;\n            var ds70 = Math.floor(ts70 + 1.0e-8);\n            var tfrac = ts70 - ds70;\n            //  find greenwich location at epoch\n            var c1 = 1.72027916940703639e-2;\n            var thgr70 = 1.7321343856509374;\n            var fk5r = 5.07551419432269442e-15;\n            var c1p2p = c1 + constants.twoPi;\n            gsto = ( thgr70 + c1 * ds70 + c1p2p * tfrac + ts70 * ts70 * fk5r) % constants.twoPi;\n            if (gsto < 0.0) {\n                gsto = gsto + constants.twoPi;\n            }\n        }\n        else {\n            gsto = gstime(epoch + 2433281.5);\n        }\n\n        var initlResults = {\n            no: no,\n\n            method: method,\n\n            ainv: ainv,\n            ao: ao,\n            con41: con41,\n            con42: con42,\n            cosio: cosio,\n\n            cosio2: cosio2,\n            eccsq: eccsq,\n            omeosq: omeosq,\n            posq: posq,\n\n            rp: rp,\n            rteosq: rteosq,\n            sinio: sinio,\n            gsto: gsto\n        };\n        return initlResults;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('sgp4init',[\n    './constants',\n    './dpper',\n    './dscom',\n    './dsinit',\n    './initl',\n    './sgp4'\n], function(\n    constants,\n    dpper,\n    dscom,\n    dsinit,\n    initl,\n    sgp4\n) {\n    'use strict';\n\n    return function(satrec, sgp4initParameters) {\n        /*-----------------------------------------------------------------------------\n         *\n         *                             procedure sgp4init\n         *\n         *  this procedure initializes variables for sgp4.\n         *\n         *  author        : david vallado                  719-573-2600   28 jun 2005\n         *\n         *  inputs        :\n         *    opsmode     - mode of operation afspc or improved 'a', 'i'\n         *    satn        - satellite number\n         *    bstar       - sgp4 type drag coefficient              kg/m2er\n         *    ecco        - eccentricity\n         *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n         *    argpo       - argument of perigee (output if ds)\n         *    inclo       - inclination\n         *    mo          - mean anomaly (output if ds)\n         *    no          - mean motion\n         *    nodeo       - right ascension of ascending node\n         *\n         *  outputs       :\n         *    satrec      - common values for subsequent calls\n         *    return code - non-zero on error.\n         *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n         *                   2 - mean motion less than 0.0\n         *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n         *                   4 - semi-latus rectum < 0.0\n         *                   5 - epoch elements are sub-orbital\n         *                   6 - satellite has decayed\n         *\n         *  locals        :\n         *    cnodm  , snodm  , cosim  , sinim  , cosomm , sinomm\n         *    cc1sq  , cc2    , cc3\n         *    coef   , coef1\n         *    cosio4      -\n         *    day         -\n         *    dndt        -\n         *    em          - eccentricity\n         *    emsq        - eccentricity squared\n         *    eeta        -\n         *    etasq       -\n         *    gam         -\n         *    argpm       - argument of perigee\n         *    nodem       -\n         *    inclm       - inclination\n         *    mm          - mean anomaly\n         *    nm          - mean motion\n         *    perige      - perigee\n         *    pinvsq      -\n         *    psisq       -\n         *    qzms24      -\n         *    rtemsq      -\n         *    s1, s2, s3, s4, s5, s6, s7          -\n         *    sfour       -\n         *    ss1, ss2, ss3, ss4, ss5, ss6, ss7         -\n         *    sz1, sz2, sz3\n         *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n         *    tc          -\n         *    temp        -\n         *    temp1, temp2, temp3       -\n         *    tsi         -\n         *    xpidot      -\n         *    xhdot1      -\n         *    z1, z2, z3          -\n         *    z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n         *\n         *  coupling      :\n         *    getgravconst-\n         *    initl       -\n         *    dscom       -\n         *    dpper       -\n         *    dsinit      -\n         *    sgp4        -\n         *\n         *  references    :\n         *    hoots, roehrich, norad spacetrack report #3 1980\n         *    hoots, norad spacetrack report #6 1986\n         *    hoots, schumacher and glover 2004\n         *    vallado, crawford, hujsak, kelso  2006\n         ----------------------------------------------------------------------------*/\n\n        var opsmode = sgp4initParameters.opsmode,\n            satn    = sgp4initParameters.satn,\n            epoch   = sgp4initParameters.epoch,\n\n            xbstar  = sgp4initParameters.xbstar,\n            xecco   = sgp4initParameters.xecco,\n            xargpo  = sgp4initParameters.xargpo,\n\n            xinclo  = sgp4initParameters.xinclo,\n            xmo     = sgp4initParameters.xmo,\n            xno     = sgp4initParameters.xno,\n\n            xnodeo  = sgp4initParameters.xnodeo;\n\n\n        var cnodm,  snodm,  cosim,  sinim,  cosomm, sinomm,\n            cc1sq,  cc2,    cc3,    coef,   coef1,  cosio4,\n            day,    dndt,\n            em, emsq, eeta, etasq,  gam,\n            argpm,  nodem,  inclm,  mm,     nm,\n            perige, pinvsq, psisq,  qzms24, rtemsq,\n            s1,  s2,  s3,  s4,  s5,  s6,  s7,   sfour,\n            ss1,ss2,    ss3,    ss4,    ss5,    ss6,    ss7,\n            sz1, sz2, sz3,\n            sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33,\n            tc, temp,   temp1,  temp2,  temp3,  temp4, tsi,\n            xpidot, xhdot1,\n            z1, z2, z3,\n            z11, z12, z13, z21, z22, z23, z31, z32, z33;\n        /* ------------------------ initialization --------------------- */\n        // sgp4fix divisor for divide by zero check on inclination\n        // the old check used 1.0 + Math.cos(pi-1.0e-9), but then compared it to\n        // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n        temp4    =   1.5e-12;\n\n        //  ----------- set all near earth variables to zero ------------\n        satrec.isimp   = 0;   satrec.method = 'n'; satrec.aycof    = 0.0;\n        satrec.con41   = 0.0; satrec.cc1    = 0.0; satrec.cc4      = 0.0;\n        satrec.cc5     = 0.0; satrec.d2     = 0.0; satrec.d3       = 0.0;\n        satrec.d4      = 0.0; satrec.delmo  = 0.0; satrec.eta      = 0.0;\n        satrec.argpdot = 0.0; satrec.omgcof = 0.0; satrec.sinmao   = 0.0;\n        satrec.t       = 0.0; satrec.t2cof  = 0.0; satrec.t3cof    = 0.0;\n        satrec.t4cof   = 0.0; satrec.t5cof  = 0.0; satrec.x1mth2   = 0.0;\n        satrec.x7thm1  = 0.0; satrec.mdot   = 0.0; satrec.nodedot  = 0.0;\n        satrec.xlcof   = 0.0; satrec.xmcof  = 0.0; satrec.nodecf   = 0.0;\n\n        //  ----------- set all deep space variables to zero ------------\n        satrec.irez  = 0;   satrec.d2201 = 0.0; satrec.d2211 = 0.0;\n        satrec.d3210 = 0.0; satrec.d3222 = 0.0; satrec.d4410 = 0.0;\n        satrec.d4422 = 0.0; satrec.d5220 = 0.0; satrec.d5232 = 0.0;\n        satrec.d5421 = 0.0; satrec.d5433 = 0.0; satrec.dedt  = 0.0;\n        satrec.del1  = 0.0; satrec.del2  = 0.0; satrec.del3  = 0.0;\n        satrec.didt  = 0.0; satrec.dmdt  = 0.0; satrec.dnodt = 0.0;\n        satrec.domdt = 0.0; satrec.e3    = 0.0; satrec.ee2   = 0.0;\n        satrec.peo   = 0.0; satrec.pgho  = 0.0; satrec.pho   = 0.0;\n        satrec.pinco = 0.0; satrec.plo   = 0.0; satrec.se2   = 0.0;\n        satrec.se3   = 0.0; satrec.sgh2  = 0.0; satrec.sgh3  = 0.0;\n        satrec.sgh4  = 0.0; satrec.sh2   = 0.0; satrec.sh3   = 0.0;\n        satrec.si2   = 0.0; satrec.si3   = 0.0; satrec.sl2   = 0.0;\n        satrec.sl3   = 0.0; satrec.sl4   = 0.0; satrec.gsto  = 0.0;\n        satrec.xfact = 0.0; satrec.xgh2  = 0.0; satrec.xgh3  = 0.0;\n        satrec.xgh4  = 0.0; satrec.xh2   = 0.0; satrec.xh3   = 0.0;\n        satrec.xi2   = 0.0; satrec.xi3   = 0.0; satrec.xl2   = 0.0;\n        satrec.xl3   = 0.0; satrec.xl4   = 0.0; satrec.xlamo = 0.0;\n        satrec.zmol  = 0.0; satrec.zmos  = 0.0; satrec.atime = 0.0;\n        satrec.xli   = 0.0; satrec.xni   = 0.0;\n\n\n        // sgp4fix - note the following variables are also passed directly via satrec.\n        // it is possible to streamline the sgp4init call by deleting the \"x\"\n        // variables, but the user would need to set the satrec.* values first. we\n        // include the additional assignments in case twoline2rv is not used.\n\n        satrec.bstar   = xbstar;\n        satrec.ecco    = xecco;\n        satrec.argpo   = xargpo;\n        satrec.inclo   = xinclo;\n        satrec.mo      = xmo;\n        satrec.no      = xno;\n        satrec.nodeo   = xnodeo;\n\n        //  sgp4fix add opsmode\n        satrec.operationmode = opsmode;\n\n        //  ------------------------ earth constants -----------------------\n        //  sgp4fix identify constants and allow alternate values\n\n\n        var ss     = 78.0 / constants.earthRadius + 1.0;\n        //  sgp4fix use multiply for speed instead of pow\n        var qzms2ttemp = (120.0 - 78.0) / constants.earthRadius;\n        var qzms2t = qzms2ttemp * qzms2ttemp * qzms2ttemp * qzms2ttemp;\n        var x2o3   =  2.0 / 3.0;\n\n        satrec.init = 'y';\n        satrec.t    = 0.0;\n\n        var initlParameters = {\n            satn : satn,\n            ecco : satrec.ecco,\n\n            epoch : epoch,\n            inclo : satrec.inclo,\n            no : satrec.no,\n\n            method : satrec.method,\n            opsmode : satrec.operationmode\n        };\n\n        var initlResult= initl(initlParameters);\n\n        satrec.no       = initlResult.no;\n\n        // TODO: defined but never used\n        //var method      = initlResult.method;\n        //var ainv        = initlResult.ainv;\n\n        var ao          = initlResult.ao;\n        satrec.con41    = initlResult.con41;\n        var con42       = initlResult.con42;\n        var cosio       = initlResult.cosio;\n        var cosio2      = initlResult.cosio2;\n        var eccsq       = initlResult.eccsq;\n        var omeosq      = initlResult.omeosq;\n        var posq        = initlResult.posq;\n        var rp          = initlResult.rp;\n        var rteosq      = initlResult.rteosq;\n        var sinio       = initlResult.sinio;\n        satrec.gsto     = initlResult.gsto;\n\n        satrec.error = 0;\n\n        // sgp4fix remove this check as it is unnecessary\n        // the mrt check in sgp4 handles decaying satellite cases even if the starting\n        // condition is below the surface of te earth\n        //     if (rp < 1.0)\n        //       {\n        //         printf(\"// *** satn%d epoch elts sub-orbital ***\\n\", satn);\n        //         satrec.error = 5;\n        //       }\n\n\n        if (omeosq >= 0.0 || satrec.no >= 0.0){\n            satrec.isimp = 0;\n            if (rp < 220.0 / constants.earthRadius + 1.0){\n                satrec.isimp = 1;\n            }\n            sfour  = ss;\n            qzms24 = qzms2t;\n            perige = (rp - 1.0) * constants.earthRadius;\n\n            //  - for perigees below 156 km, s and qoms2t are altered -\n            if (perige < 156.0){\n                sfour = perige - 78.0;\n                if (perige < 98.0){\n                    sfour = 20.0;\n                }\n                //  sgp4fix use multiply for speed instead of pow\n                var qzms24temp =  (120.0 - sfour) / constants.earthRadius;\n                qzms24 = qzms24temp * qzms24temp * qzms24temp * qzms24temp;\n                sfour  = sfour / constants.earthRadius + 1.0;\n            }\n            pinvsq = 1.0 / posq;\n\n            tsi  = 1.0 / (ao - sfour);\n            satrec.eta  = ao * satrec.ecco * tsi;\n            etasq = satrec.eta * satrec.eta;\n            eeta  = satrec.ecco * satrec.eta;\n            psisq = Math.abs(1.0 - etasq);\n            coef  = qzms24 * Math.pow(tsi, 4.0);\n            coef1 = coef / Math.pow(psisq, 3.5);\n            cc2   = coef1 * satrec.no * (ao * (1.0 + 1.5 * etasq + eeta *\n                    (4.0 + etasq)) + 0.375 * constants.j2 * tsi / psisq * satrec.con41 *\n                    (8.0 + 3.0 * etasq * (8.0 + etasq)));\n            satrec.cc1   = satrec.bstar * cc2;\n            cc3   = 0.0;\n            if (satrec.ecco > 1.0e-4) {\n                cc3 = -2.0 * coef * tsi * constants.j3oj2 * satrec.no * sinio / satrec.ecco;\n            }\n            satrec.x1mth2 = 1.0 - cosio2;\n            satrec.cc4    = 2.0 * satrec.no * coef1 * ao * omeosq *\n                            (satrec.eta * (2.0 + 0.5 * etasq) + satrec.ecco *\n                            (0.5 + 2.0 * etasq) - constants.j2 * tsi / (ao * psisq) *\n                            (-3.0 * satrec.con41 * (1.0 - 2.0 * eeta + etasq *\n                            (1.5 - 0.5 * eeta)) + 0.75 * satrec.x1mth2 *\n                            (2.0 * etasq - eeta * (1.0 + etasq)) * Math.cos(2.0 * satrec.argpo)));\n            satrec.cc5 =    2.0 * coef1 * ao * omeosq * (1.0 + 2.75 *\n                            (etasq + eeta) + eeta * etasq);\n            cosio4 = cosio2 * cosio2;\n            temp1 = 1.5 * constants.j2 * pinvsq * satrec.no;\n            temp2 = 0.5 * temp1 * constants.j2 * pinvsq;\n            temp3 = -0.46875 * constants.j4 * pinvsq * pinvsq * satrec.no;\n            satrec.mdot   = satrec.no + 0.5 * temp1 * rteosq * satrec.con41 + 0.0625 *\n                            temp2 * rteosq * (13.0 - 78.0 * cosio2 + 137.0 * cosio4);\n            satrec.argpdot = (-0.5 * temp1 * con42 + 0.0625 * temp2 *\n                            (7.0 - 114.0 * cosio2 + 395.0 * cosio4) +\n            temp3 * (3.0 - 36.0 * cosio2 + 49.0 * cosio4));\n            xhdot1 = -temp1 * cosio;\n            satrec.nodedot = xhdot1 + (0.5 * temp2 * (4.0 - 19.0 * cosio2) +\n                            2.0 * temp3 * (3.0 - 7.0 * cosio2)) * cosio;\n            xpidot =  satrec.argpdot+ satrec.nodedot;\n            satrec.omgcof   = satrec.bstar * cc3 * Math.cos(satrec.argpo);\n            satrec.xmcof    = 0.0;\n            if (satrec.ecco > 1.0e-4) {\n                satrec.xmcof = -x2o3 * coef * satrec.bstar / eeta;\n            }\n            satrec.nodecf = 3.5 * omeosq * xhdot1 * satrec.cc1;\n            satrec.t2cof   = 1.5 * satrec.cc1;\n            //  sgp4fix for divide by zero with xinco = 180 deg\n            if (Math.abs(cosio+1.0) > 1.5e-12){\n                satrec.xlcof = -0.25 * constants.j3oj2 * sinio * (3.0 + 5.0 * cosio) / (1.0 + cosio);\n            }\n            else{\n                satrec.xlcof = -0.25 * constants.j3oj2 * sinio * (3.0 + 5.0 * cosio) / temp4;\n            }\n            satrec.aycof   = -0.5 * constants.j3oj2 * sinio;\n            //  sgp4fix use multiply for speed instead of pow\n            var delmotemp = 1.0 + satrec.eta * Math.cos(satrec.mo);\n            satrec.delmo   = delmotemp * delmotemp * delmotemp;\n            satrec.sinmao  = Math.sin(satrec.mo);\n            satrec.x7thm1  = 7.0 * cosio2 - 1.0;\n\n            //  --------------- deep space initialization -------------\n            if (2*constants.pi / satrec.no >= 225.0){\n                satrec.method = 'd';\n                satrec.isimp  = 1;\n                tc    =  0.0;\n                inclm = satrec.inclo;\n\n                var dscomParameters = {\n                    epoch : epoch,\n                    ep : satrec.ecco,\n                    argpp : satrec.argpo,\n                    tc : tc,\n                    inclp : satrec.inclo,\n                    nodep : satrec.nodeo,\n\n                    np : satrec.no,\n\n                    e3 : satrec.e3,\n                    ee2 : satrec.ee2,\n\n                    peo : satrec.peo,\n                    pgho : satrec.pgho,\n                    pho : satrec.pho,\n                    pinco : satrec.pinco,\n\n                    plo : satrec.plo,\n                    se2 : satrec.se2,\n                    se3 : satrec.se3,\n\n                    sgh2 : satrec.sgh2,\n                    sgh3 : satrec.sgh3,\n                    sgh4 : satrec.sgh4,\n\n                    sh2 : satrec.sh2,\n                    sh3 : satrec.sh3,\n                    si2 : satrec.si2,\n                    si3 : satrec.si3,\n\n                    sl2 : satrec.sl2,\n                    sl3 : satrec.sl3,\n                    sl4 : satrec.sl4,\n\n                    xgh2 : satrec.xgh2,\n                    xgh3 : satrec.xgh3,\n                    xgh4 : satrec.xgh4,\n                    xh2 : satrec.xh2,\n\n                    xh3 : satrec.xh3,\n                    xi2 : satrec.xi2,\n                    xi3 : satrec.xi3,\n                    xl2 : satrec.xl2,\n\n                    xl3 : satrec.xl3,\n                    xl4 : satrec.xl4,\n\n                    zmol : satrec.zmol,\n                    zmos : satrec.zmos\n                };\n\n                var dscomResult = dscom(dscomParameters);\n\n                snodm = dscomResult.snodm;\n                cnodm = dscomResult.cnodm;\n                sinim = dscomResult.sinim;\n                cosim = dscomResult.cosim;\n                sinomm = dscomResult.sinomm;\n\n                cosomm = dscomResult.cosomm;\n                day = dscomResult.day;\n                satrec.e3 = dscomResult.e3;\n                satrec.ee2 = dscomResult.ee2;\n                em = dscomResult.em;\n\n                emsq = dscomResult.emsq;\n                gam = dscomResult.gam;\n                satrec.peo = dscomResult.peo;\n                satrec.pgho = dscomResult.pgho;\n                satrec.pho = dscomResult.pho;\n\n                satrec.pinco = dscomResult.pinco;\n                satrec.plo = dscomResult.plo;\n                rtemsq = dscomResult.rtemsq;\n                satrec.se2 = dscomResult.se2;\n                satrec.se3 = dscomResult.se3;\n\n                satrec.sgh2 = dscomResult.sgh2;\n                satrec.sgh3 = dscomResult.sgh3;\n                satrec.sgh4 = dscomResult.sgh4;\n                satrec.sh2 = dscomResult.sh2;\n                satrec.sh3 = dscomResult.sh3;\n\n                satrec.si2 = dscomResult.si2;\n                satrec.si3 = dscomResult.si3;\n                satrec.sl2 = dscomResult.sl2;\n                satrec.sl3 = dscomResult.sl3;\n                satrec.sl4 = dscomResult.sl4;\n\n                s1 = dscomResult.s1;\n                s2 = dscomResult.s2;\n                s3 = dscomResult.s3;\n                s4 = dscomResult.s4;\n                s5 = dscomResult.s5;\n\n                s6 = dscomResult.s6;\n                s7 = dscomResult.s7;\n                ss1 = dscomResult.ss1;\n                ss2 = dscomResult.ss2;\n                ss3 = dscomResult.ss3;\n\n                ss4 = dscomResult.ss4;\n                ss5 = dscomResult.ss5;\n                ss6 = dscomResult.ss6;\n                ss7 = dscomResult.ss7;\n                sz1 = dscomResult.sz1;\n\n                sz2 = dscomResult.sz2;\n                sz3 = dscomResult.sz3;\n                sz11 = dscomResult.sz11;\n                sz12 = dscomResult.sz12;\n                sz13 = dscomResult.sz13;\n\n                sz21 = dscomResult.sz21;\n                sz22 = dscomResult.sz22;\n                sz23 = dscomResult.sz23;\n                sz31 = dscomResult.sz31;\n                sz32 = dscomResult.sz32;\n\n                sz33 = dscomResult.sz33;\n                satrec.xgh2 = dscomResult.xgh2;\n                satrec.xgh3 = dscomResult.xgh3;\n                satrec.xgh4 = dscomResult.xgh4;\n                satrec.xh2 = dscomResult.xh2;\n\n                satrec.xh3 = dscomResult.xh3;\n                satrec.xi2 = dscomResult.xi2;\n                satrec.xi3 = dscomResult.xi3;\n                satrec.xl2 = dscomResult.xl2;\n                satrec.xl3 = dscomResult.xl3;\n\n                satrec.xl4 = dscomResult.xl4;\n                nm = dscomResult.nm;\n                z1 = dscomResult.z1;\n                z2 = dscomResult.z2;\n                z3 = dscomResult.z3;\n\n                z11 = dscomResult.z11;\n                z12 = dscomResult.z12;\n                z13 = dscomResult.z13;\n                z21 = dscomResult.z21;\n                z22 = dscomResult.z22;\n\n                z23 = dscomResult.z23;\n                z31 = dscomResult.z31;\n                z32 = dscomResult.z32;\n                z33 = dscomResult.z33;\n                satrec.zmol = dscomResult.zmol;\n                satrec.zmos = dscomResult.zmos;\n\n                var dpperParameters = {\n                    inclo : inclm,\n                    init : satrec.init,\n                    ep : satrec.ecco,\n                    inclp : satrec.inclo,\n                    nodep : satrec.nodeo,\n                    argpp : satrec.argpo,\n                    mp : satrec.mo,\n                    opsmode : satrec.operationmode\n                };\n\n                var dpperResult = dpper(satrec, dpperParameters);\n\n                satrec.ecco = dpperResult.ep;\n                satrec.inclo = dpperResult.inclp;\n                satrec.nodeo = dpperResult.nodep;\n                satrec.argpo = dpperResult.argpp;\n                satrec.mo = dpperResult.mp;\n\n                argpm  = 0.0;\n                nodem  = 0.0;\n                mm     = 0.0;\n\n                var dsinitParameters = {\n                    cosim : cosim,\n                    emsq : emsq,\n                    argpo : satrec.argpo,\n                    s1 : s1,\n                    s2 : s2,\n                    s3 : s3,\n                    s4 : s4,\n                    s5 : s5,\n                    sinim : sinim,\n                    ss1 : ss1,\n                    ss2 : ss2,\n                    ss3 : ss3,\n                    ss4 : ss4,\n                    ss5 : ss5,\n                    sz1 : sz1,\n                    sz3 : sz3,\n                    sz11 : sz11,\n                    sz13 : sz13,\n                    sz21 : sz21,\n                    sz23 : sz23,\n                    sz31 : sz31,\n                    sz33 : sz33,\n                    t : satrec.t,\n                    tc : tc,\n                    gsto : satrec.gsto,\n                    mo : satrec.mo,\n                    mdot : satrec.mdot,\n                    no : satrec.no,\n                    nodeo : satrec.nodeo,\n                    nodedot : satrec.nodedot,\n                    xpidot : xpidot,\n                    z1 : z1,\n                    z3 : z3,\n                    z11 : z11,\n                    z13 : z13,\n                    z21 : z21,\n                    z23 : z23,\n                    z31 : z31,\n                    z33 : z33,\n                    ecco : satrec.ecco,\n                    eccsq : eccsq,\n                    em : em,\n                    argpm : argpm,\n                    inclm : inclm,\n                    mm : mm,\n                    nm : nm,\n                    nodem : nodem,\n                    irez : satrec.irez,\n                    atime : satrec.atime,\n                    d2201 : satrec.d2201,\n                    d2211 : satrec.d2211,\n                    d3210 : satrec.d3210,\n                    d3222 : satrec.d3222 ,\n                    d4410 : satrec.d4410,\n                    d4422 : satrec.d4422,\n                    d5220 : satrec.d5220,\n                    d5232 : satrec.d5232,\n                    d5421 : satrec.d5421,\n                    d5433 : satrec.d5433,\n                    dedt : satrec.dedt,\n                    didt : satrec.didt,\n                    dmdt : satrec.dmdt,\n                    dnodt : satrec.dnodt,\n                    domdt : satrec.domdt,\n                    del1 : satrec.del1,\n                    del2 : satrec.del2,\n                    del3 : satrec.del3,\n                    xfact : satrec.xfact,\n                    xlamo : satrec.xlamo,\n                    xli : satrec.xli,\n                    xni : satrec.xni\n                };\n\n                var dsinitResult = dsinit( dsinitParameters );\n\n                em              = dsinitResult.em;\n                argpm           = dsinitResult.argpm;\n                inclm           = dsinitResult.inclm;\n                mm              = dsinitResult.mm;\n                nm              = dsinitResult.nm;\n\n                nodem           = dsinitResult.nodem;\n                satrec.irez     = dsinitResult.irez;\n                satrec.atime    = dsinitResult.atime;\n                satrec.d2201    = dsinitResult.d2201;\n                satrec.d2211    = dsinitResult.d2211;\n\n                satrec.d3210    = dsinitResult.d3210;\n                satrec.d3222    = dsinitResult.d3222;\n                satrec.d4410    = dsinitResult.d4410;\n                satrec.d4422    = dsinitResult.d4422;\n                satrec.d5220    = dsinitResult.d5220;\n\n                satrec.d5232    = dsinitResult.d5232;\n                satrec.d5421    = dsinitResult.d5421;\n                satrec.d5433    = dsinitResult.d5433;\n                satrec.dedt     = dsinitResult.dedt;\n                satrec.didt     = dsinitResult.didt;\n\n                satrec.dmdt     = dsinitResult.dmdt;\n                dndt            = dsinitResult.dndt;\n                satrec.dnodt    = dsinitResult.dnodt;\n                satrec.domdt    = dsinitResult.domdt;\n                satrec.del1     = dsinitResult.del1;\n\n                satrec.del2     = dsinitResult.del2;\n                satrec.del3     = dsinitResult.del3;\n                satrec.xfact    = dsinitResult.xfact;\n                satrec.xlamo    = dsinitResult.xlamo;\n                satrec.xli      = dsinitResult.xli;\n\n                satrec.xni      = dsinitResult.xni;\n            }\n\n            //----------- set variables if not deep space -----------\n            if (satrec.isimp !== 1){\n                cc1sq       = satrec.cc1 * satrec.cc1;\n                satrec.d2   = 4.0 * ao * tsi * cc1sq;\n                temp        = satrec.d2 * tsi * satrec.cc1 / 3.0;\n                satrec.d3   = (17.0 * ao + sfour) * temp;\n                satrec.d4   = 0.5 * temp * ao * tsi * (221.0 * ao + 31.0 * sfour) * satrec.cc1;\n                satrec.t3cof= satrec.d2 + 2.0 * cc1sq;\n                satrec.t4cof= 0.25 * (3.0 * satrec.d3 + satrec.cc1 *\n                (12.0 * satrec.d2 + 10.0 * cc1sq));\n                satrec.t5cof= 0.2 * (3.0 * satrec.d4 +\n                12.0 * satrec.cc1 * satrec.d3 +\n                6.0 * satrec.d2 * satrec.d2 +\n                15.0 * cc1sq * (2.0 * satrec.d2 + cc1sq));\n            }\n\n\n            /* finally propogate to zero epoch to initialize all others. */\n            // sgp4fix take out check to let satellites process until they are actually below earth surface\n            //  if(satrec.error == 0)\n        }\n        sgp4(satrec, 0.0);\n\n        satrec.init = 'n';\n\n        // sgp4fix return boolean. satrec.error contains any error codes\n        return true;\n    };\n});\n/*\n * satellite-js v1.2\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\ndefine('propagate/twoline2satrec',[\n    '../constants',\n    '../gstime/days2mdhms',\n    '../gstime/jday',\n    '../sgp4init'\n], function(\n    constants,\n    days2mdhms,\n    jday,\n    sgp4init\n) {\n    'use strict';\n\n    return function twoline2rv(longstr1, longstr2){\n        /*Return a Satellite imported from two lines of TLE data.\n\n         Provide the two TLE lines as strings `longstr1` and `longstr2`,\n         and select which standard set of gravitational constants you want\n         by providing `gravity_constants`:\n\n         `sgp4.propagation.wgs72` - Standard WGS 72 model\n         `sgp4.propagation.wgs84` - More recent WGS 84 model\n         `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n\n         Normally, computations are made using various recent improvements\n         to the algorithm.  If you want to turn some of these off and go\n         back into \"afspc\" mode, then set `afspc_mode` to `True`. */\n\n        var opsmode = 'i';\n        var xpdotp   =  1440.0 / (2.0 *constants.pi);  //  229.1831180523293;\n        var revnum = 0;\n        var elnum = 0;\n        var year = 0;\n\n        var satrec = {};\n        satrec.error = 0;\n\n        // TODO: defined but never used\n        //var cardnumb        = parseInt(longstr1.substring(0, 1), 10);\n\n        satrec.satnum       = longstr1.substring(2, 7);\n\n        // TODO: defined but never used\n        //var classification  = longstr1.substring(7, 8);\n        //var intldesg        = longstr1.substring(9, 11);\n\n        satrec.epochyr      = parseInt(longstr1.substring(18, 20), 10);\n        satrec.epochdays    = parseFloat(longstr1.substring(20, 32));\n        satrec.ndot         = parseFloat(longstr1.substring(33, 43));\n        satrec.nddot        = parseFloat(\n                                '.' + parseInt(longstr1.substring(44, 50), 10) +\n                                'E' + longstr1.substring(50, 52)\n                            );\n        satrec.bstar        = parseFloat(\n                                longstr1.substring(53, 54) +\n                                '.' +  parseInt(longstr1.substring(54, 59), 10) +\n                                'E' + longstr1.substring(59, 61)\n                            );\n\n        // TODO: defined but never used\n        //var numb            = parseInt(longstr1.substring(62, 63), 10);\n\n        elnum               = parseInt(longstr1.substring(64, 68), 10);\n\n        //satrec.satnum   = longstr2.substring(2, 7);\n        satrec.inclo    = parseFloat(longstr2.substring(8, 16));\n        satrec.nodeo    = parseFloat(longstr2.substring(17, 25));\n        satrec.ecco     = parseFloat('.' + longstr2.substring(26, 33));\n        satrec.argpo    = parseFloat(longstr2.substring(34, 42));\n        satrec.mo       = parseFloat(longstr2.substring(43, 51));\n        satrec.no       = parseFloat(longstr2.substring(52, 63));\n        revnum          = parseFloat(longstr2.substring(63, 68));\n\n\n        //  ---- find no, ndot, nddot ----\n        satrec.no   = satrec.no / xpdotp; //   rad/min\n        //satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n        //satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n\n        //  ---- convert to sgp4 units ----\n        satrec.a    = Math.pow( satrec.no*constants.tumin , (-2.0/3.0) );\n        satrec.ndot = satrec.ndot  / (xpdotp*1440.0);  //   ? * minperday\n        satrec.nddot= satrec.nddot / (xpdotp*1440.0*1440);\n\n        //  ---- find standard orbital elements ----\n        satrec.inclo = satrec.inclo  * constants.deg2rad;\n        satrec.nodeo = satrec.nodeo  * constants.deg2rad;\n        satrec.argpo = satrec.argpo  * constants.deg2rad;\n        satrec.mo    = satrec.mo     * constants.deg2rad;\n\n        satrec.alta = satrec.a*(1.0 + satrec.ecco) - 1.0;\n        satrec.altp = satrec.a*(1.0 - satrec.ecco) - 1.0;\n\n\n        // ----------------------------------------------------------------\n        // find sgp4epoch time of element set\n        // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n        // and minutes from the epoch (time)\n        // ----------------------------------------------------------------\n\n        // ---------------- temp fix for years from 1957-2056 -------------------\n        // --------- correct fix will occur when year is 4-digit in tle ---------\n\n        if (satrec.epochyr < 57){\n            year = satrec.epochyr + 2000;\n        }\n        else{\n            year = satrec.epochyr + 1900;\n        }\n\n\n        var mdhmsResult = days2mdhms(year, satrec.epochdays);\n        var mon      = mdhmsResult.mon;\n        var day      = mdhmsResult.day;\n        var hr       = mdhmsResult.hr;\n        var minute   = mdhmsResult.minute;\n        var sec      = mdhmsResult.sec;\n        satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec);\n\n        //  ---------------- initialize the orbit at sgp4epoch -------------------\n        var sgp4initParameters = {\n            opsmode : opsmode,\n            satn : satrec.satnum,\n            epoch : satrec.jdsatepoch-2433281.5,\n            xbstar : satrec.bstar,\n\n            xecco : satrec.ecco,\n            xargpo : satrec.argpo,\n            xinclo : satrec.inclo,\n            xmo : satrec.mo,\n            xno : satrec.no,\n\n            xnodeo : satrec.nodeo\n        };\n\n        sgp4init(satrec, sgp4initParameters );\n\n        return satrec;\n    };\n});\ndefine('satellite',[\n    './constants',\n    './coordinate-transforms/degrees-lat',\n    './coordinate-transforms/degrees-long',\n    './coordinate-transforms/ecf-to-eci',\n    './coordinate-transforms/ecf-to-look-angles',\n    './coordinate-transforms/eci-to-ecf',\n    './coordinate-transforms/eci-to-geodetic',\n    './coordinate-transforms/geodetic-to-ecf',\n    './coordinate-transforms/topocentric',\n    './coordinate-transforms/topocentric-to-look-angles',\n    './doppler-factor',\n    './gstime/days2mdhms',\n    './gstime/gstime',\n    './gstime/jday',\n    './propagate/propagate',\n    './propagate/twoline2satrec',\n    './sgp4'\n], function(\n    constants,\n    degreesLat,\n    degreesLong,\n    ecfToEci,\n    ecfToLookAngles,\n    eciToEcf,\n    eciToGeodetic,\n    geodeticToEcf,\n    topocentric,\n    topocentricToLookAngles,\n    dopplerFactor,\n    days2mdhms,\n    gstime,\n    jday,\n    propagate,\n    twoline2satrec,\n    sgp4\n) {\n    'use strict';\n\n    return {\n        version: '1.2.0',\n        constants: constants,\n\n        // Coordinate transforms\n        degreesLat: degreesLat,\n        degreesLong: degreesLong,\n        eciToEcf: eciToEcf,\n        ecfToEci: ecfToEci,\n        eciToGeodetic: eciToGeodetic,\n        ecfToLookAngles: ecfToLookAngles,\n        geodeticToEcf: geodeticToEcf,\n\n        dopplerFactor: dopplerFactor,\n        gstimeFromJday: gstime,\n        gstimeFromDate: function() {\n            return gstime(jday.apply(null, arguments));\n        },\n        jday: jday,\n        propagate: propagate,\n        twoline2satrec: twoline2satrec,\n        sgp4: sgp4\n    };\n});\n    return require('satellite');\n}));\n//# sourceMappingURL=satellite.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/satellite.js/dist/satellite.js\n// module id = 2\n// module chunks = 0","import { _MS_IN_A_DAY, _LEADING_ZERO_ASSUMED_PREFIX } from './constants';\n\n/**\n * Determines if a number is positive.\n */\nexport const _isPositive = num => num >= 0;\n\n/**\n * Determines the amount of digits in a number.  Used for converting a TLE's \"leading decimal\n * assumed\" notation.\n *\n * Example:\n * getDigitCount(12345);\n * -> 5\n */\nexport const _getDigitCount = (num) => {\n  const absVal = Math.abs(num);\n  return absVal.toString().length;\n};\n\n/**\n * Converts a TLE's \"leading decimal assumed\" notation to a float representation.\n *\n * Example:\n * toLeadingDecimal(12345);\n * -> 0.12345\n */\nexport const _toLeadingDecimal = (num) => {\n  const numDigits = _getDigitCount(num);\n  const zeroes = '0'.repeat(numDigits - 1);\n  return parseFloat(num * `${_LEADING_ZERO_ASSUMED_PREFIX}${zeroes}1`);\n};\n\n/**\n * Converts a TLE's \"leading decimal assumed\" notation with leading zeroes to a float\n * representation.\n *\n * Example:\n * decimalAssumedEToFloat('12345-4');\n * -> 0.000012345\n */\nexport const _decimalAssumedEToFloat = (str) => {\n  const numWithAssumedLeadingDecimal = str.substr(0, str.length - 2);\n  const num = _toLeadingDecimal(numWithAssumedLeadingDecimal);\n  const leadingDecimalPoints = parseInt(str.substr(str.length - 2, 2), 10);\n  const float = num * Math.pow(10, leadingDecimalPoints);\n  return float.toPrecision(5);\n};\n\n/**\n * Converts a fractional day of the year to a timestamp.  Used for parsing the TLE epoch.\n */\nexport const _dayOfYearToTimeStamp = (dayOfYear, year = (new Date()).getFullYear()) => {\n  const yearStart = new Date(`1/1/${year} 0:0:0 Z`);\n\n  const yearStartMS = yearStart.getTime();\n\n  return Math.floor(yearStartMS + ((dayOfYear - 1) * _MS_IN_A_DAY));\n};\n\n/**\n * Converts a string divided by spacer characters to camelCase representation.\n *\n * Examples:\n * toCamelCase('foo-bar');\n * -> 'fooBar'\n * toCamelCase('foo bar', ' ');\n * -> 'fooBar'\n */\nexport const _toCamelCase = (str, divider = '-') => {\n  const bits = str.split(divider);\n\n  const output = [];\n\n  output.push(bits[0]);\n\n  for (let i = 1, len = bits.length; i < len; i++) {\n    output.push(bits[i].substr(0, 1).toUpperCase() + bits[i].substr(1, bits[i].length - 1));\n  }\n\n  return output.join('');\n};\n\n/**\n * Converts radians (0 to 2π) to degrees (0 to 360).\n */\nexport const _radiansToDegrees = radians => radians * (180 / Math.PI);\n\n/**\n * Converts degrees (0 to 360) to radians (0 to 2π).\n */\nexport const _degreesToRadians = degrees => degrees * (Math.PI / 180);\n\n/**\n * Determines if a pair of longitude points crosses over the antemeridian, which is a\n * pain point for mapping software.\n */\nexport const _crossesAntemeridian = (longitude1, longitude2) => {\n  if (!longitude1 || !longitude2) return false;\n\n  const isLong1Positive = _isPositive(longitude1);\n  const isLong2Positive = _isPositive(longitude2);\n  const haveSameSigns = isLong1Positive === isLong2Positive;\n\n  if (haveSameSigns) return false;\n\n  // Signs don't match, so check if we're reasonably near the antemeridian (just to be sure it's\n  // not the prime meridian).\n  const isNearAntemeridian = Math.abs(longitude1) > 100;\n\n  return isNearAntemeridian;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","import { _DATA_TYPES } from './constants';\n\nconst line1 = {\n  /* TLE line number. Will always return 1 for valid TLEs. */\n  lineNumber1: {\n    start: 0,\n    length: 1,\n    type: _DATA_TYPES._INT\n  },\n\n  /**\n   * NORAD satellite catalog number (Sputnik's rocket was 00001).\n   *\n   * Range: 0 to 99999\n   * Example: 25544\n   */\n  satelliteNumber: {\n    start: 2,\n    length: 5,\n    type: _DATA_TYPES._INT\n  },\n\n  /**\n   * Satellite classification.\n   * 'U' = unclassified\n   * 'C' = classified\n   * 'S' = secret)\n   *\n   * Example: 'U'\n   */\n  classification: {\n    start: 7,\n    length: 1,\n    type: _DATA_TYPES._CHAR\n  },\n\n  /**\n   * International Designator: Last 2 digits of launch year. 57 to 99 = 1900s, 00-56 = 2000s.\n   * See https://en.wikipedia.org/wiki/International_Designator\n   *\n   * Range: 00 to 99\n   * Example: 98\n   */\n  intDesignatorYear: {\n    start: 9,\n    length: 2,\n    type: _DATA_TYPES._INT\n  },\n\n  /**\n   * International Designator: Launch number of the year.\n   * See https://en.wikipedia.org/wiki/International_Designator\n   *\n   * Range: 1 to 999\n   * Example: 67\n   */\n  intDesignatorLaunchNumber: {\n    start: 11,\n    length: 3,\n    type: _DATA_TYPES._INT\n  },\n\n  /**\n   * International Designator: Piece of the launch.\n   * See https://en.wikipedia.org/wiki/International_Designator\n   *\n   * Range: A to ZZZ\n   * Example: 'A'\n   */\n  intDesignatorPieceOfLaunch: {\n    start: 14,\n    length: 3,\n    type: _DATA_TYPES._CHAR\n  },\n\n  /**\n   * Year when the TLE was generated (TLE epoch), last two digits.\n   *\n   * Range: 00 to 99\n   * Example: 17\n   */\n  epochYear: {\n    start: 18,\n    length: 2,\n    type: _DATA_TYPES._INT\n  },\n\n  /**\n   * Fractional day of the year when the TLE was generated (TLE epoch).\n   *\n   * Range: 1 to 365.99999999\n   * Example: 206.18396726\n   */\n  epochDay: {\n    start: 20,\n    length: 12,\n    type: _DATA_TYPES._FLOAT\n  },\n\n  /**\n   * First Time Derivative of the Mean Motion divided by two.  Defines how mean motion changes\n   * from day to day, so TLE propagators can still be used to make reasonable guesses when\n   * times are distant from the original TLE epoch.\n   *\n   * Units: Orbits / day ^ 2\n   * Example: 0.00001961\n   */\n  firstTimeDerivative: {\n    start: 33,\n    length: 11,\n    type: _DATA_TYPES._FLOAT\n  },\n\n  /**\n   * Second Time Derivative of Mean Motion divided by six (decimal point assumed). Measures rate\n   * of change in the Mean Motion Dot so software can make reasonable guesses when times are\n   * distant from the original TLE epoch.\n   *\n   * Usually zero, unless the satellite is manuevering or in a decaying orbit.\n   *\n   * Units: Orbits / day ^ 3.\n   * Example: 0 ('00000-0' in the original TLE [= 0.00000 * 10 ^ 0])\n   */\n  secondTimeDerivative: {\n    start: 44,\n    length: 8,\n    type: _DATA_TYPES._DECIMAL_ASSUMED_E\n  },\n\n  /**\n   * BSTAR drag term (decimal point assumed).  Estimates the effects of\n   * atmospheric drag on the satellite's motion.\n   *\n   * Units: EarthRadii ^ -1\n   * Example: 0.000036771 ('36771-4' in the original TLE [= 0.36771 * 10 ^ -4])\n   */\n  bstarDrag: {\n    start: 53,\n    length: 8,\n    type: _DATA_TYPES._DECIMAL_ASSUMED_E\n  },\n\n  /**\n   * Private value - used by Air Force Space Command to reference the orbit model used to\n   * generate the TLE.  Will always be seen as zero externally (e.g. by \"us\", unless you are\n   * \"them\" - in which case, hello!).\n   *\n   * Example: 0\n   */\n  orbitModel: {\n    start: 62,\n    length: 1,\n    type: _DATA_TYPES._INT\n  },\n\n  /**\n   * TLE element set number, incremented for each new TLE generated. 999 seems to mean the TLE\n   * has maxed out.\n   *\n   * Range: Technically 1 to 9999, though in practice the maximum number seems to be 999.\n   * Example: 999\n   */\n  tleSetNumber: {\n    start: 64,\n    length: 4,\n    type: _DATA_TYPES._INT\n  },\n\n  /*\n   * TLE line 1 checksum (modulo 10), for verifying the integrity of this line of the TLE.\n   *\n   * Range: 0 to 9\n   * Example: 3\n   */\n  checksum1: {\n    start: 68,\n    length: 1,\n    type: _DATA_TYPES._INT\n  }\n};\n\nconst line2 = {\n  /* TLE line number. Will always return 2 for valid TLEs. */\n  lineNumber2: {\n    start: 0,\n    length: 1,\n    type: _DATA_TYPES._INT\n  },\n\n  /**\n   * NORAD satellite catalog number (Sputnik's rocket was 00001).  Should match the satellite\n   * number on line 1.\n   *\n   * Range: 0 to 99999\n   * Example: 25544\n   */\n  satelliteNumber2: {\n    start: 2,\n    length: 5,\n    type: _DATA_TYPES._INT\n  },\n\n  /**\n   * Inclination relative to the Earth's equatorial plane in degrees. 0 to 90 degrees is a\n   * prograde orbit and 90 to 180 degrees is a retrograde orbit.\n   *\n   * Units: degrees\n   * Range: 0 to 180\n   * Example: 51.6400\n   */\n  inclination: {\n    start: 8,\n    length: 8,\n    type: _DATA_TYPES._FLOAT\n  },\n\n  /**\n   * Right ascension of the ascending node in degrees. Essentially, this is the angle of the\n   * satellite as it crosses northward (ascending) across the Earth's equator (equatorial\n   * plane).\n   *\n   * Units: degrees\n   * Range: 0 to 359.9999\n   * Example: 208.9163\n   */\n  rightAscension: {\n    start: 17,\n    length: 8,\n    type: _DATA_TYPES._FLOAT\n  },\n\n  /**\n   * Orbital eccentricity, decimal point assumed. All artifical Earth satellites have an\n   * eccentricity between 0 (perfect circle) and 1 (parabolic orbit).\n   *\n   * Range: 0 to 1\n   * Example: 0.0006317 (`0006317` in the original TLE)\n   */\n  eccentricity: {\n    start: 26,\n    length: 7,\n    type: _DATA_TYPES._DECIMAL_ASSUMED\n  },\n\n  /**\n   * Argument of perigee. See https://en.wikipedia.org/wiki/Argument_of_perigee\n   * Units: degrees\n   * Range: 0 to 359.9999\n   * Example: 69.9862\n   */\n  perigee: {\n    start: 34,\n    length: 8,\n    type: _DATA_TYPES._FLOAT\n  },\n\n  /**\n   * Mean anomaly. Indicates where the satellite was located within its orbit at the time of the\n   * TLE epoch.\n   * See https://en.wikipedia.org/wiki/Mean_Anomaly\n   *\n   * Units: degrees\n   * Range: 0 to 359.9999\n   * Example: 25.2906\n   */\n  meanAnomaly: {\n    start: 43,\n    length: 8,\n    type: _DATA_TYPES._FLOAT\n  },\n\n  /**\n   * Revolutions around the Earth per day (mean motion).\n   * See https://en.wikipedia.org/wiki/Mean_Motion\n   *\n   * Range: 0 to 17 (theoretically)\n   * Example: 15.54225995\n   */\n  meanMotion: {\n    start: 52,\n    length: 11,\n    type: _DATA_TYPES._FLOAT\n  },\n\n  /**\n   * Total satellite revolutions when this TLE was generated. This number seems to roll over\n   * (e.g. 99999 -> 0).\n   *\n   * Range: 0 to 99999\n   * Example: 6766\n   */\n  revNumberAtEpoch: {\n    start: 63,\n    length: 5,\n    type: _DATA_TYPES._INT\n  },\n\n  /*\n   * TLE line 1 checksum (modulo 10), for verifying the integrity of this line of the TLE.\n   *\n   * Range: 0 to 9\n   * Example: 0\n   */\n  checksum2: {\n    start: 68,\n    length: 1,\n    type: _DATA_TYPES._INT\n  }\n};\n\n/**\n * Fixed locations of orbital element value strings as they have appeared going back to the\n * punchcard days.\n * See https://en.wikipedia.org/wiki/Two-line_element_set.\n */\nexport default { line1, line2 };\n\n\n\n// WEBPACK FOOTER //\n// ./src/line-defs.js"],"sourceRoot":""}